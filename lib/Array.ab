# Copyright (C) 2014 nineties
# $Id: Array.ab 2014-02-05 16:02:27 nineties $

import Container

ArrayTrait: Prim.ArrayTrait
ArrayTrait.parent = ContainerTrait

new: Prim.array_new
   | Prim.array_new_with_size
   | Prim.array_new_with_size_and_initial_value
   | (values @ List) -> Prim.list_to_array(values)
   | (gen @ Function) -> {
         ary: Prim.array_new()
         while true {
             v: gen()
             if (v == undef) return ary
             ary.push(v)
         }
     }
   | (iter @ Function, v) -> {
         ary: Prim.array_new()
         while true {
             ary.push(v)
             v = iter(v)
             if (v == undef) return ary
         }
     }

ArrayTrait.to_array: id
ArrayTrait.to_list():   Prim.array_to_list(self)

ArrayTrait.length:      alias(() -> Prim.array_length(self))
ArrayTrait.size:        alias(() -> Prim.array_length(self))
ArrayTrait.at(i):       Prim.array_at(self, i)
ArrayTrait.store(i, v): Prim.array_store(self, i, v)
ArrayTrait.push(v):     Prim.array_push(self, v)
ArrayTrait.pop():       Prim.array_pop(self)

ArrayTrait.reverse!():  Prim.array_reverse(self)
ArrayTrait.reverse():   Prim.array_reverse(self.copy())

ArrayTrait.map!(fun):   Prim.array_map(fun, self)
ArrayTrait.map(fun):    Prim.array_map(fun, self.copy())

ArrayTrait.foldl(fun, v): Prim.array_foldl(fun, v, self)
ArrayTrait.foldl1(fun):   Prim.array_foldl1(fun, self)
ArrayTrait.foldr(fun, v): Prim.array_foldr(fun, self, v)
ArrayTrait.foldr1(fun):   Prim.array_foldr1(fun, self)

add = Prim.array_append | add

ArrayTrait.each(): {
    ary: self
    i: 0
    n: ary.size
    () -> {
        if (i < n) {
            i += 1
            return ary[i-1]
        }
        return undef
    }
}

export ArrayTrait add
