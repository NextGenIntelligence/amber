# Copyright (C) 2014 nineties
# $Id: Array.ab 2014-02-16 11:15:24 nineties $

import Collection

new: Prim.array_new
   | Prim.array_new_with_size
   | Prim.array_new_with_size_and_initial_value
   | (values @ List) -> Prim.list_to_array(values)
   | (gen @ Function) -> {
         ary: Prim.array_new()
         while true {
             v: gen()
             if (v == nil) return ary
             ary.push_back(v)
         }
     }
   | (iter @ Function, v) -> {
         ary: Prim.array_new()
         while true {
             ary.push_back(v)
             v = iter(v)
             if (v == nil) return ary
         }
     }

add = Prim.array_append | add

trait Array {
    extends(Trait.Collection)

    to_array()    = self
    to_list()     = Prim.array_to_list(self)
    size          = alias(() -> Prim.array_length(self))
    get(i)        = Prim.array_at(self, i)
    set(i, v)     = Prim.array_store(self, i, v)
    push_back(v)  = Prim.array_push(self, v)
    pop_back(v)   = Prim.array_pop(self)
    reverse()     = Prim.array_reverse(self)
    reverse()     = Prim.array_reverse(self.copy())
    map(fun)      = Prim.array_map(fun, self)
    map(fun)      = Prim.array_map(fun, self.copy())
    foldl(fun, v) = Prim.array_foldl(fun, v, self)
    foldl1(fun)   = Prim.array_foldl1(fun, self)
    foldr(fun, v) = Prim.array_foldr(fun, self, v)
    foldr1(fun)   = Prim.array_foldr1(fun, self)
}

export add
