# Copyright (C) 2014 nineties
# $Id: Array.ab 2014-02-06 14:56:37 nineties $

import Container

new: Prim.array_new
   | Prim.array_new_with_size
   | Prim.array_new_with_size_and_initial_value
   | (values @ List) -> Prim.list_to_array(values)
   | (gen @ Function) -> {
         ary: Prim.array_new()
         while true {
             v: gen()
             if (v == undef) return ary
             ary.push(v)
         }
     }
   | (iter @ Function, v) -> {
         ary: Prim.array_new()
         while true {
             ary.push(v)
             v = iter(v)
             if (v == undef) return ary
         }
     }

add = Prim.array_append | add

ArrayTrait: Prim.ArrayTrait with {
    parent        = ContainerTrait
    to_array()    = self
    to_list()     = Prim.array_to_list(self)
    length        = alias(() -> Prim.array_length(self))
    size          = alias(() -> Prim.array_length(self))
    at(i)         = Prim.array_at(self, i)
    store(i, v)   = Prim.array_store(self, i, v)
    push(v)       = Prim.array_push(self, v)
    pop()         = Prim.array_pop(self)
    reverse!()    = Prim.array_reverse(self)
    reverse()     = Prim.array_reverse(self.copy())
    map!(fun)     = Prim.array_map(fun, self)
    map(fun)      = Prim.array_map(fun, self.copy())
    foldl(fun, v) = Prim.array_foldl(fun, v, self)
    foldl1(fun)   = Prim.array_foldl1(fun, self)
    foldr(fun, v) = Prim.array_foldr(fun, self, v)
    foldr1(fun)   = Prim.array_foldr1(fun, self)
}

export ArrayTrait add
