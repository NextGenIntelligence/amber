# Copyright (C) 2014 nineties
# $Id: Array.ab 2014-02-17 20:53:41 nineties $

import Collection

new: Prim.array_new
   | Prim.array_new_with_size
   | Prim.array_new_with_size_and_initial_value
   | (values @ List) -> Prim.list_to_array(values)
   | (gen @ Function) -> {
         ary: Prim.array_new()
         while true {
             v: gen()
             if (v == nil) return ary
             ary.push_back(v)
         }
     }
   | (iter @ Function, v) -> {
         ary: Prim.array_new()
         while true {
             ary.push_back(v)
             v = iter(v)
             if (v == nil) return ary
         }
     }

add = Prim.array_append | add
sub = Prim.array_diff | sub

trait Array {
    extend Collection

    to_array()    = self
    to_list()     = Prim.array_to_list(self)
    size          = alias(() -> Prim.array_length(self))
    get(i)        = Prim.array_at(self, i)
    set(i, v)     = Prim.array_store(self, i, v)
    push_back(v)  = Prim.array_push(self, v)
    pop_back()    = Prim.array_pop(self)
    reverse()     = Prim.array_reverse(self)
    reverse()     = Prim.array_reverse(self.copy())
    map(fun)      = Prim.array_map(fun, self)
    map(fun)      = Prim.array_map(fun, self.copy())
    foldl(fun, v) = Prim.array_foldl(fun, v, self)
    foldl1(fun)   = Prim.array_foldl1(fun, self)
    foldr(fun, v) = Prim.array_foldr(fun, self, v)
    foldr1(fun)   = Prim.array_foldr1(fun, self)

    add!(other)   = Prim.array_append!(self, other)
    sub!(other)   = Prim.array_diff!(self, other)

    extend RandomIterable

    Iterator = Trait.new(\ArrayIterator) with {
        extend RandomAccessIterator
        extend MutableIterator
        extend InsertAfterIterator
        extend InsertBeforeIterator
        extend EraseIterator

        array  = alias(0)
        index  = alias(1)

        advance?(d @ Int) = (index + d >= 0 and index + d < array.size)
        advance(d @ Int) = {
            i: index + d
            if (i < 0 or i >= array.size)
                throw `IndexOutOfRange{!LOCATION, !array, !i}
            index = i
            self
        }

        get(i)    = array[index+i]
        set(i, v) = {array[index+i] = v}

        distance(other): {
            if (not identical?(self.array, other.array))
                throw `LogicError{!LOCATION,
                    "Comparison of two iterators of different arrays",
                    self, other}
            other.index - self.index
        }
    }

    iterator() = `Iterator{!self, 0} with parent = Trait.Array.Iterator
    begin = iterator
    end() = iterator().advance(self.size-1)
}

Prim.set_builtin_parent(\Array, Trait.Array)

export add
