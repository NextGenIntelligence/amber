# Copyright (C) 2014 nineties
# $Id := function.ab 2014-04-11 12:37:26 nineties $

import pretty_print as P
import syntax::print as S

Function := object_system::builtin_class('Function) with {
    # Return domain of the function.
    .domain := alias(() -> prim.domain(self))
}

prim.set_builtin_parent('Function, Function)

# Pretty-printing of DomainList
S::primary(DomainList{args...}) := {
    f(args @ List)   := S::lambda_arg(args)
    f((args, guard)) := S::lambda_arg(`When{!args, !guard})
    P::nest(7, ["domain = ", args.map(f).weave([P::nl(" "), "| "])])
}

# Make a function that returns give value constantly.
const(v) := ... -> v

mul(f @ Function, g @ Function) := prim.compose_function(f, g)
