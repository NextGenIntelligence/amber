# Copyright (C) 2014 nineties
# $Id: numeric/blllhRiab 2014-04-02 18:19:56 nineties $

import numeric

#= Multi-precision integer. =
# This module defines numerical operations on multi-precision integers,
# we call it as 'bigint'. The head of bigints is `BigInt`.

INTEGER_MIN = -infinity
INTEGER_MAX =  infinity

#== Implicit type conversion ==
# Type conversion between objects and bigints is done by methods named
# `to_bint`. `to_bint` must returns a `BigInt` type value.

typecast(a, 'BigInt) = a.to_bint()
typejoin('Int, 'BigInt) = 'BigInt
typejoin('BigInt, 'Int) = 'BigInt
typejoin('Flot, 'BigInt) = 'Float
typejoin('BigInt, 'Float) = 'Float

# Extend numerical operations. See Numeric.ab for details.

uplus(n @ BigInt) = n
uplus  = prim.bint_uplus  | uplus
uminus = prim.bint_uminus | uminus
abs    = prim.bint_abs | abs
add    = prim.bint_add | add
sub    = prim.bint_sub | sub
mul    = prim.bint_mul | mul
div    = prim.bint_div | div
mod    = prim.bint_mod | mod
quo    = prim.bint_quo | quo
divmod = prim.bint_divmod | divmod
pow    = prim.bint_pow | pow
powmod = prim.bint_powmod | powmod
compare = prim.bint_compare | compare

BigInt: object_system.builtin_class('BigInt) with {
    .to_i():    self
    .to_f():    prim.bint_to_float(self)
    .to_s():    prim.bint_to_string(self)
    .to_bint(): self
}

prim.set_builtin_parent('BigInt, BigInt)

Int.to_bint():   prim.int_to_bint(self)
Float.to_bint(): prim.float_to_bint(self)
