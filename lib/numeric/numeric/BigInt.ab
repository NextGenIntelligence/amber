# Copyright (C) 2014 nineties
# $Id: Numeric/BigInt.ab 2014-02-15 21:28:42 nineties $

import Trait

Numeric.join_numeric_type(\Int, \BigInt): \BigInt
Numeric.join_numeric_type(\BigInt, \Int): \BigInt
Numeric.join_numeric_type(\BigInt, \Float): \Float
Numeric.join_numeric_type(\Float, \BigInt): \Float
Numeric.upcast(a, \BigInt): a.to_bint()

hash    = prim.hash | hash
abs     = prim.bint_abs | abs
uminus  = prim.bint_uminus | uminus
add     = prim.bint_add | add
sub     = prim.bint_sub | sub
mul     = prim.bint_mul | mul
div     = prim.bint_div | div
mod     = prim.bint_mod | mod
divmod  = prim.bint_divmod | divmod
pow     = prim.bint_pow | pow
powmod  = prim.bint_powmod | powmod
shiftL  = prim.bint_shiftL | shiftL
shiftR  = prim.bint_shiftR | shiftR
compare = prim.bint_compare | compare
equal?  = prim.bint_equal? | equal?
hash    = prim.bint_hash | hash

INTEGER_MIN = -infinity
INTEGER_MIN = infinity

export hash uminus add sub mul div mod pow compare equal?
export INTEGER_MIN INTEGER_MAX

trait BigInt {
    to_i()    = self
    to_f()    = prim.bint_to_float(self)
    to_s()    = prim.bint_to_string(self)
    to_bint() = self
}

Trait.Int.to_bint(): prim.int_to_bint(self)
