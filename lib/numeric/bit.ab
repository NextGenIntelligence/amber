# Copyright (C) 2014 nineties
# $Id: numeric/bit.ab 2014-04-05 05:44:39 nineties $

#= Bitwise operations =
# Bitwise not, and, or, xor and arighmetic shifts. Two's complement is
# used for negative integers.
# Operations with !-sign may perform in-place operation on the left-hand
# side operand.

lnot: prim.int_lnot
land: prim.int_land
lor: prim.int_lor
lxor: prim.int_lxor
lshift: prim.int_lshift
rshift: prim.int_rshift

lnot!: prim.int_lnot!
land!: prim.int_land!
lor!: prim.int_lor!
lxor!: prim.int_lxor!
lshift!: prim.int_lshift!
rshift!: prim.int_rshift!

# Testing of bits. Return `true` when `land(a ,b) != 0`.
ltest(a, b): land(a, b) != 0

# Create bit-flags.
# ----
# > Flag: Bit.flags('a, 'b, 'c)
# > Flag.a      # => 0x1
# > Flag.b      # => 0x2
# > Flag.c      # => 0x4
# ----
flags(symbols...): {
    if symbols.size > INTEGER_WIDTH
        throw `InvalidArgument{"too many flags", !symbols}

    f: `Flags{!symbols...}
    v: 1
    for s in symbols {
        f.set_slot(s, v)
        v = v <lshift> 1
    }
    f
}
