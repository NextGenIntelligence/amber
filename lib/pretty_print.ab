# Copyright (C) 2014 nineties
# $Id := pretty_print.ab 2014-04-09 13:50:32 nineties $

#= Pretty printing =
# Implementation of pretty printing algorithm of the following paper.
# * Philip Wadler. "A pretty printer."
# * http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf
#
# A 'document' is a one of following forms:
# * A string
# * A list of documents.
# * nl()  := Output newline or empty string when the document is compressed into a single line.
# * nl(sep)  := Output newline or `sep` when the document is compressed into a single line.
# * nest(indent, document) := Output the document with indentation width = `indent`.
# * group(document) := Compress the document into a single line when there is enough area.
# * breakable(document) := Breaks lines when lines reach the maximum width of texts.
# * compress(document) := Compress the document into a single line.

nl()    := `Newline{""}
nl(sep) := `Newline{!sep}

nest(i, doc)             := `Nest{!i, !doc}
nest(i, Group{len, doc}) := `Group{!len, !nest(i, doc)}
nest(i, Break{doc})      := `Break{!nest(i, doc)}
nest(i, Compress{doc})   := doc
nest(i, Nest{j, doc})    := nest(i+j, doc)
nest(i, docs @ List)     := docs.map(d -> nest(i, d))
nest(i, doc @ String)    := doc
nest(0, doc)             := doc

group(doc)     := `Group{nil, !doc}
breakable(doc) := `Break{!doc}
compress(doc)  := `Compress{!doc}

# Compute the length of given document when it is compressed into
# single-line.
occupy([]) := 0
occupy([Newline{alt}, docs...])          := alt.size + occupy(docs)
occupy([Nest{i, Newline{alt}}, docs...]) := alt.size + occupy(docs)
occupy([doc @ String, docs...])          := doc.size + occupy(docs)
occupy([Group{len, doc}, docs...])       := len + occupy(docs)
occupy([g @ Group{nil, doc}, docs...])   := (g[0] = occupy(doc)) + occupy(docs)
occupy([Break{doc}, docs...])            := occupy(doc) + occupy(docs)
occupy([Compress{doc}, docs...])         := occupy(doc) + occupy(docs)
occupy([docs @ List, rest...])           := occupy(docs) + occupy(rest)

# Compute the minimum remaining length of given document in the current line.
remain([], cont) := remain(cont, [])
remain([Newline{_}, ...], _)             := 0
remain([Nest{i, Newline{_}}, ...], _)    := 0
remain([doc @ String, docs...], cont)    := doc.size + remain(docs, cont)
remain([Group{len, doc}, docs...], cont) := remain([doc, docs], cont)
remain([Break{doc}, docs...], cont)      := remain([doc, docs], cont)
remain([Compress{doc}, docs], cont)      := occupy(doc) + remain(doc, cont)
remain([docs @ List, rest...], cont)     := remain(docs, [rest, cont])

# Output the document.
# Arguments:
# o := Output stream. It must implements `print` method.
# w := The maximum width of single line.
# k := Remaining spaces in the current line.
# b := `b == true` when printing breakable document.
# c := `c == true` when the document is compressed.
layout(out, w, k, b, c, [Newline{d}, docs...]) := {
    if c or (b and remain(docs, [`Newline{""}]) + d.size <= k) {
        out.print(d)
        layout(out, w, k - d.size, b, c, docs)
    } else {
        out.print("\n")
        layout(out, w, w, b, c, docs)
    }
}

layout(out, w, k, b, c, [Nest{i, Newline{d}}, docs...]) := {
    if c or (b and remain(docs, [`Newline{""}]) + d.size <= k) {
        out.print(d)
        layout(out, w, k - d.size, b, c, docs)
    } else {
        out.print("\n")
        out.print(" " * i)
        layout(out, w, w - i, b, c, docs)
    }
}

layout(out, w, k, b, c, [s @ String, docs...]) := {
    out.print(s)
    layout(out, w, k - s.size, b, c, docs)
}

layout(out, w, k, b, c, [g @ Group{len, doc}, docs...]) := {
    if len == nil
        len = occupy([g])

    if len < k {
        k = layout(out, w, k, b, true, doc)
        layout(out, w, k, b, c, docs)
    } else
        layout(out, w, k, b, c, [doc, docs])
}

layout(out, w, k, b, c, [Break{doc}, docs...]) := {
    k = layout(out, w, k, true, c, doc)
    layout(out, w, k, b, c, docs)
}

layout(out, w, k, b, c, [Compress{doc}, docs...]) := {
    k = layout(out, w, k, b, true, doc)
    layout(out, w, k, b, c, docs)
}

layout(out, w, k, b, c, [docs @ List, rest...])
    := layout(out, w, k, b, c, docs ++ rest)

layout(_, _, k, _, _, []) := k

# Pretty printer.
# Arguments:
# * out := An output stream.
# * doc := The document.
# * width (optional) := The maximum width of the text.
#
# ----
# > doc := ["bbbbb", "[", nest(2, [nl(), "ccc",
# ~       ",", nl(), "dd"]), nl(), "]"]
# > pretty(stdout, doc)
# bbbbb[
#   ccc,
#   dd
# ]=> nil
# > pretty(stdout, group(doc))
# bbbbb[ccc,dd]=> nil
# > pretty(stdout, group(doc), width=5)
# bbbbb[
#   ccc,
#   dd
# ]=> nil
# ----

pretty(out, doc, width=80) := pretty(out, [doc], width=width)

pretty(out, docs @ List, width=80) := {
    layout(out, width, width, false, false, docs)
    nil
}
