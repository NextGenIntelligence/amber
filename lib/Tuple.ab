# Copyright (C) 2014 nineties
# $Id: Tuple.ab 2014-03-04 14:30:29 nineties $

#= Tuple =
# An n-tuple is an ordered collection of n objects. Tuples do not have
# functionalities as a sequence like lists or arrays. For example, you
# can't change the size of a tuple. Alternatively, tuples are very light
# and element-access is faster than other containers.
#
# The most commonly used idiom with tuples is *multivariate function*.
# You can return multiple values as a tuple and pick them up using
# pattern matching assignment.
# ----
# > f(): return (1,2,3)
# > (x, y, z): f()
# > x              # => 1
# > y              # => 2
# > z              # => 3
# ----

new(v, size @ Int): prim.tuple_new(v, size)

new(container) when container.Iterable? :
    prim.list_to_tuple(container.to_list())

trait Tuple {
    # The number of elements.
    .size:   alias(() -> prim.arity(self))
    .length: alias(() -> prim.arity(self))

    # Apply `f` to each element of `self`.
    .map(f):  prim.tuple_map(f, self)
    .map!(f): prim.tuple_map(f, self)

    extend 'Iterable
    .each(): {
        tuple: self
        idx: 0
        size: self.size

        iterator () -> {
            if (idx >= size)
                return nil
            idx += 1
            tuple[idx-1]
        }
    }
}

prim.set_builtin_parent('Tuple, Trait.Tuple)
