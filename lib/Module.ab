# Copyright (C) 2010 nineties
# $Id: Module.ab 2014-02-03 08:41:54 nineties $

Module: enter_module(\Module)

    # import mod.var to global module.
    import_variable(mod @ Module, var @ Symbol):
        Prim.define_variable(var, Prim.get_slot(mod, var), \incremental)

    import_variables(mod @ Module, vars @ List):
        Prim.list_map(v -> import_variable(mod, v), vars)

    expand_import([M], script): `Seq{[
        ((!M):enter_module(\!M)),
        If{not Prim.has_slot?(!M, \exports), ((!M).exports=[])},
        load(!script),
        exit_module()
    ]}
    expand_import([M,rest...], script): `Seq{[
        ((!M):enter_module(\!M)),
        If{not Prim.has_slot?(!M, \exports), ((!M).exports=[])},
        !expand_import(rest, script),
        exit_module()
    ]}

    buildpath(mods): Prim.string_add(Prim.string_join(
            Prim.list_map(Prim.symbol_to_string, mods), "/")
            , ".ab")

exit_module()

macro(Import{mods}): {
    script: Module.buildpath(mods)
    mod: Prim.list_foldl1((l, r) -> `Slot{!l, !r}, mods)
    `Seq{[
        !Module.expand_import(mods, script),
        Module.import_variables(!mod, (!mod).exports)
    ]}
}

macro(QuoteSyntax{ Import{mods, vars} }): {
    script: Module.buildpath(mods)
    mod: Prim.list_foldl1((l, r) -> `Slot{!l, !r}, mods)
    `Seq{[
        !Module.expand_import(mods, script),
        Module.import_variables(!mod, \!vars)
    ]}
}

macro(QuoteSyntax{ Import{mods, Hiding{vars}} }): {
    script: Module.buildpath(mods)
    mod: Prim.list_foldl1((l, r) -> `Slot{!l, !r}, mods)
    `Seq{[
        !Module.expand_import(mods, script),
        Module.import_variables(!mod,
            Prim.list_subtract((!mod).exports, \!vars)
            )
    ]}
}

macro(Export{vars}):
    `(exports = Prim.list_foldr(Prim.list_insert_unique, \!vars, exports))
