# Copyright (C) 2010 nineties
# $Id: Module.ab 2014-02-16 00:03:51 nineties $

Module: enter_module(\Module)

    # import mod.var to global module.
    import_variable(mod @ Module, var @ Symbol): {
        Prim.define_variable(var, Prim.get_slot(mod, var), \fusion)
    }

    import_variables(mod @ Module, vars @ List):
        Prim.list_foreach(v -> import_variable(mod, v), vars)

    expand_import([], _): nil
    expand_import([M,rest...], path): {
        if (not Prim.string_equal?(path, ""))
            path = Prim.string_add(path, "/")
        path = Prim.string_add(path, Prim.symbol_to_string(M))

        loadstmt: case rest of
              [] -> `load(!Prim.string_add(path, ".ab"))
            | _  -> `load(!Prim.string_add(path, ".ab"), \nothrow)

        `Seq{[
            enter_module(\!M),
            If{not Prim.has_slot?(!M, \exports), ((!M).exports=[])},
            !loadstmt,
            !expand_import(rest, path),
            exit_module()
        ]}
    }

    buildpath(mods): Prim.string_add(Prim.string_join(
            Prim.list_map(Prim.symbol_to_string, mods), "/")
            , ".ab")

exit_module()

macro(e @ Import{mods, option}): {
    mod: Prim.list_foldl1((l, r) -> `Slot{!l, !r}, mods)
    case option of
          Some{As{name}}
            -> `Seq{[
                    !Module.expand_import(mods, ""),
                    (!name : !mod)
                ]}
        | Some{Hiding{vars}}
            -> `Seq{[
                    !Module.expand_import(mods, ""),
                    Module.import_variables(!mod,
                        Prim.list_subtract((!mod).exports, \!vars)
                        )
                ]}
        | Some{vars}
            -> `Seq{[
                    !Module.expand_import(mods, ""),
                    Module.import_variables(!mod, \!vars)
                ]}
        | nil
            -> `Seq{[
                    !Module.expand_import(mods, ""),
                    Module.import_variables(!mod, (!mod).exports)
                ]}
        | _
            -> { throw `UnknownExpression{!LOCATION, !e} }
}

macro(Export{vars}):
    `(exports = Prim.list_foldr(Prim.list_insert_unique, \!vars, exports))
