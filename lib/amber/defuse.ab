# Copyright (C) 2014 nineties
# $Id: amber/defuse.ab 2014-04-30 18:54:20 nineties $

import amber::basic (collect_variables, collect_parameters)

#= Construction of use-def chain =
defuse_analysis(compiler) := {
    compiler.global_definitions = []
    AmberProgram{lines} := compiler.program

    # Scan global variable assignments.
    for line in lines
        scan(compiler, line)

    # Use-def analysis.
    for line in lines {
        line.livein = compiler.global_definitions
        global(compiler, line)
    }
}

# Setup compiler.globla_definitions.
scan(c, _) := nil
scan(c, s @ Define{x, _}) := {
    c.global_definitions = cons((x, [s]), c.global_definitions)
}
scan(c, s @ Define{x, _, union}):= {
    set := c.global_definitions.assoc(x)
    set  = set ? cons(s, set) : [s]
    c.global_definitions = cons((x, set), c.global_definitions)
}
scan(c, s @ Assign{x, _}) := {
    c.global_definitions = cons((x, [s]), c.global_definitions)
}
scan(c, s @ Assign{x, _, union}) := {
    set := c.global_definitions.assoc(x)
    set  = set ? cons(s, set) : [s]
    c.global_definitions = cons((x, set), c.global_definitions)
}

# Analyze global statements
# c: Compiler object.
global(c, e @ Apply)        := local(e, c.global_definitions)
global(c, s @ Define{_, v}) := local(s, c.global_definitions)
global(c, s @ Define{_, Lambda{args @ List, body}, ...}) := {
    livein   := s.livein
    for p in collect_parameters(args)
        livein = livein.assoc_set(p, [args])
    local(body, livein)
}

# Analyze local statements.
# `livein` is an assoc-list of reaching definitions and returns
# assoc-list of live-out definitions.
local(stmt, livein) := {
    # Collect variables used in the statement
    use      := collect_variables(stmt)
    stmt.def := []
    for v in use {
        defs := livein.assoc(v)
        stmt.def = stmt.def.assoc_set(v, defs) if defs
    }
    livein
}
local(s @ Define, _) := {
    throw "defuse::local Not implemented"
}
local(s @ Assign, _) := {
    throw "defuse::local Not implemented"
}
