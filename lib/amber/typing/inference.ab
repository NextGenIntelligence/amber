# Copyright (C) 2014 nineties
# $Id: amber/inference.ab 2014-04-29 23:28:07 nineties $

import amber::typing::CPT as CPT
import amber::typing::types as T
import random (choice)

#= Type inference =

class TypeInferencer{} with {
    .new(defuse) := .make() with {
        .defuse = defuse
        .ftypes = CPT::builtin_functions
    }

    .analyze(AmberProgram{lines}) := {
        # First inference.
        for line in lines
            self.global(line)
        # Revision.
        for i in 1..100 {
            for (name, cpt) in self.ftypes {
                for (args, result_type) in cpt.table {
                    type := T::Ptype.new()
                    count := 0
                    defs := self.defuse.global_defs.assoc(name)
                    continue unless defs
                    for def in defs {
                        ty := .infer_lambda(def[1], args, def.def)
                        if ty {
                            count += 1
                            type += ty
                        }
                    }
                    result_type.table = T::mul(1/count, type).table
                }
            }
        }

        # Annotate types.
        puts(pretty(self.ftypes))
        puts(pretty(self.defuse.global_defs))
    }

    # Type inference of global variable.
    .global(stmt @ Define) := nil
    .global(stmt @ Apply)  := .infer(stmt, stmt.def)

    #.global(stmt @ Define{x, v}) := {
    #    t := .infer(v, stmt.def)
    #    stmt.types = [(x, t)]
    #}
    #.global(stmt @ Define{f, Lambda{args, body}, ...}) := {
    #    t := .infer_lambda(args, body, stmt.def)
    #    stmt.types = [(f, t)]
    #}
    #.global(stmt @ Apply) := .infer(stmt, stmt.def)

    .infer(_ @ Int, _)    := T::Ptype.new('IntT)
    .infer(_ @ Float, _)  := T::Ptype.new('FloatT)
    .infer(_ @ String, _) := T::Ptype.new('StringT)
    .infer(x @ Symbol, defs) := {
        ds := defs.assoc(x)
        return CPT::NON_INFORMATIVE unless ds
        t := T::Ptype.new()
        for d in ds
            t += d.types.assoc(x)
        return CP::NON_INFORMATIVE if t.empty?
        t.normalize!()
    }
    .infer(Add{x, y}, defs) := {
        xt := .infer(x, defs)
        yt := .infer(y, defs)
        .propagate(CPT::binary['Add], [xt, yt])
    }
    .infer(Sub{x, y}, defs) := {
        xt := .infer(x, defs)
        yt := .infer(y, defs)
        .propagate(CPT::binary['Sub], [xt, yt])
    }
    .infer(Apply{f @ Symbol, args}, defs) := {
        inf   := self
        argst := args.map(a -> inf.infer(a, defs))
        ret   := T::Ptype.new()
        for c in iterable::product(argst.map(a -> a.categories)...) {
            ret += .infer_apply(f, c.to_list(), defs.assoc(f))
        }
        ret.normalize()
    }

    .infer_apply(name @ Symbol, args, defs) := {
        # XXX: consider local functions.
        ftype := .ftypes[name]
        unless ftype {
            ftype = T::FunctionT.new(table=[])
            .ftypes[name] = ftype
        }
        ret := ftype.table.assoc(args)
        return ret if ret
        unless defs {
            # Unknown function
            return T::Ptype.new('_unknown_)
        }


        return_type := T::Ptype.new('_unknown_)
        ftype.table = ftype.table.assoc_set(args, return_type)
        type := T::Ptype.new()
        count    := 0
        for def in defs {
            ty := .infer_lambda(def[1], args, def.def)
            if ty {
                count += 1
                type += ty
            }
        }
        return_type.table = T::mul(1/count, type).table
        return_type
    }

    .infer_lambda(Lambda{params, body}, args, def) := {
        return nil unless T::defined?(params, args)
        params.types := iterable::zip(params, args).map(((p, a))
                -> (p, T::Ptype.new(a))).to_list()
        return .infer(body, body.def)
    }

    #.infer_lambda(args, body, defs) := {
    #    inf    := self
    #    list   := []
    #    params := args.map(a -> {
    #            t := inf.infer_param(a)
    #            if a.head == 'Symbol
    #                list = cons((a, T::Ptype.new(t)), list)
    #        })
    #    args.types = list
    #    ret := .infer(body, body.def)
    #    prim.debugpf ret
    #    type := FunctionT.new()
    #    type.add(params, ret)
    #    type
    #}

    #.infer_param(_ @ Symbol) := T::any

    # compute P(T) = sum(P(T|a1,...an)p(a1)...p(an)).
    .propagate(FunctionT{cpt}, ps) := {
        prob := T::Ptype.new()
        for (cond, p) in cpt {
            r    := 1
            skip := false
            for (c, q) in iterable::zip(cond, ps) {
                t := q.table.assoc(c)
                unless t {
                    skip = true
                    break
                }
                r *= t
            }
            continue if skip
            prob += T::mul(r, p)
        }
        p := prob.sum()
        unless p == 1
            prob.table = prob.table.assoc_set('_type_error_, 1-p)
        prob
    }

    #.global(Lambda{_, _})       := nil
    #.global(Define{_, body, _}) := .global(body)
    #.global(a @ Apply)          := .statement(a)

    #.statement(e) := .expr(e, e.def)

    #.statement(_ @ Int) := CPT::mustbe('Int)
    #.statement(x @ Symbol) := {
    #    throw x
    #}
    #.statement(e @ Apply{f, args}) := {
    #    inferencer := self
    #    type := .apply(f,
    #            args.map(a -> inferencer.expr(a, e.def)), e.def)
    #    e.type = type
    #    type
    #}
    #.statement(e @ Add{x, y}) := {
    #    self.expr(x, e.def)
    #    self.expr(y, e.def)
    #}
    #.statement(e @ Sub{x, y}) := {
    #    prim.debugpf self.expr(x, def)
    #    prim.debugpf self.expr(y, def)
    #}

    #.expr(_ @ Int, _) := CPT::mustbe('Int)
    #.expr(Add{x, y}, def) := {
    #    .expr(x, def)
    #    .expr(y, def)
    #}
    #.expr(Apply{f @ Symbol, args}, def) := {
    #    inf := self
    #    funcs := def.assoc(f)
    #    args   = args.map(a -> inf.expr(a, def))
    #    if not funcs
    #        return CPT::NON_INFORMATIVE_LOCAL
    #    n := 0
    #    for i in 1..10 {
    #        params := args.map(p -> CPT::sampling_type(p))
    #        prim.debugpf (.analyze_apply(choice(funcs), params))
    #    }
    #}

    #.analyze_apply(Lambda{args, body}, params) := {
    #    prim.debugpf "ANALYZE_TYPE"
    #    .statement(body)
    #}
}
