# Copyright (C) 2010 nineties
# $Id: Base.ab 2014-02-20 08:16:52 nineties $

# Chain of obj.parent.parent... eventually reaches `nil',
# so we can use nil as the root object of parent chain.

nil with {
    .head      = Prim.alias(() -> Prim.head(self))
    .arguments = Prim.alias(() -> Prim.arguments(self))
    .arity     = Prim.alias(() -> Prim.arity(self))
    .to_s()    = fullform(self)

    .get_slot(sym @ Symbol, recursive=true, alias=true, check=true)
        = Prim.get_slot(self, sym, recursive, alias)
    .set_slot(sym @ Symbol, v, overwrite=false, fusion=true, alias=true)
        = Prim.set_slot(self, sym, v, overwrite, fusion, alias)
    .has_slot?(sym) = Prim.has_slot?(self, sym)

    .get(i @ Int) = Prim.get_arg(self, i)
    .set(i @ Int, v) = Prim.set_arg(self, i, v)
    .each_slots(fun @ Function) = Prim.each_slots(self, fun)
}

id(obj):    obj
equal?:     Prim.equal?
identical?: Prim.identical?
fullform:   Prim.fullform
fusion:     Prim.fusion_function
fusion!:    Prim.fusion_function
compose:    Prim.compose_function
alias:      Prim.alias

alias(i @ Int): alias(
        () -> self[i],
        (v) -> { self[i] = v }
        )

hash(obj): {
    h: 0
    n: obj.arity
    for (i in 0..n-1) 
        h = 13*h + hash(obj.get_arg(i))
    13*h + hash(obj.head)
}
