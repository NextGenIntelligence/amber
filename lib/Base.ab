# Copyright (C) 2010 nineties
# $Id: Base.ab 2014-02-15 13:08:52 nineties $

# Chain of obj.parent.parent... eventually reaches `nil',
# so we can use nil as the root object of parent chain.

nil with {
    head            = Prim.alias(() -> Prim.head(self))
    arguments       = Prim.alias(() -> Prim.arguments(self))
    arity           = Prim.alias(() -> Prim.arity(self))
    copy()          = Prim.copy(self)
    to_s()          = fullform(self)

    get(i @ Int)                = Prim.get_arg(self, i)
    get(sym @ Symbol)           = Prim.get_slot(self, sym)
    get(sym @ Symbol, \norec)   = Prim.get_slot_norec(self, sym)
    get(sym @ Symbol, \unalias) = Prim.get_slot_unalias(self, sym)

    set(i @ Int, v) = Prim.set_arg(self, i, v)
    set(sym @ Symbol, v) = Prim.set_slot(self, sym, v)
    set(sym @ Symbol, v, \fusion) = Prim.set_slot_fusion(self, sym, v)
    set(sym @ Symbol, v, \unalias) = Prim.set_slot_unalias(self, sym, v)

    has_slot?(sym) = Prim.has_slot?(self, sym)
}

id(obj):    obj
equal?:     Prim.equal?
identical?: Prim.identical?
fullform:   Prim.fullform
fusion:     Prim.fusion_function
fusion!:    Prim.fusion_function
compose:    Prim.compose_function
alias:      Prim.alias

hash(obj): {
    h: 0
    n: obj.arity
    for (i in 0..n-1) 
        h = 13*h + hash(obj.get_arg(i))
    13*h + hash(obj.head)
}
