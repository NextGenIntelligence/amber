# Copyright (C) 2014 nineties
# $Id: list.ab 2014-04-19 07:44:05 nineties $

#= List =
# A list is a finite sequence of objects. The internal representation of
# lists are singly linked cells.
# Amber's objects are basically heterogeneous, i.e. you can put any kind
# of object into one list.

List := object_system::builtin_class('List)
List with {
    # Create a list of length `n` whose `i`-th element is `f(i)`.
    # Example:
    # ----
    # > List.new(x -> x^2, 5)       # => [0, 1, 4, 9, 16]
    # ----
    .new(f @ Function, n @ Int) := {
        list := []
        for i in 0..n-1
            list = cons(f(i), list)
        prim.list_reverse(list)
    }

    # Create a list of length `n` by first element `f0` and recurrence
    # formula `f`.
    # Example:
    # ----
    # > List.new(x -> x + 1, 0, 5)      # => [0,1,2,3,4]
    # ----
    .new(f @ Function, f0, n @ Int) := {
        list := []
        for i in 1..n {
            list = cons(f0, list)
            f0 = f(f0)
        }
        prim.list_reverse(list)
    }

    # Create a list whose elements are obtained from an iterable object
    # `container`.
    .new(container) when container.Iterable? := {
        list := []
        for v in container
            list = cons(v, list)
        prim.list_reverse(list)
    }

    # The number of elements.
    .length := alias(() -> prim.list_length(self))
    .size :=   alias(() -> prim.list_length(self))

    # Return true when `self` is an empty list.
    .empty? := alias(() -> self == [])

    # `i`-th element.
    .get(i @ Int) := prim.list_at(self, i)

    # Do nothing. For consistency with other containers.
    .to_list() := self

    # Create a new array that include all elements of `self` in the same
    # order.
    .to_array() := prim.list_to_array(self)

    # Create a list that include all elements of `self` in the
    # reverse order.
    .reverse() := prim.list_reverse(self)

    # Create a list by applying `f` to each element of `self`.
    .map(f) := prim.list_map(f, self)

    # Return true when `self` include `v`.
    .include?(v) := prim.list_include?(v, self)

    # Lookup from association list.
    # `self` must be a list of pairs.
    .assoc(x) := prim.list_assoc(self, x)
    .assoc_set(x, v) := prim.list_assoc_set(self, x, v)

    # Convert nested list to flat list.
    # ----
    # > [1,[2,3],[4,[5],6]].flatten()   # => [1,2,3,4,5,6]
    # ----
    .flatten() := prim.list_flatten(self)

    # Fold elements of `self` by the binary function `f` from left to right.
    # Example:
    # ----
    # > [1,2,3,4].foldl((x,y)->x+y, 1)  # => (((1+1)+2)+3)+4
    # > [1,2,3,4].foldl((x,y)->x+y)     # => ((1+2)+3)+4
    # ----
    .foldl(f, v) := prim.list_foldl(f, v, self)
    .foldl(f)    := prim.list_fold1(f, self)

    # Fold elements of `self` by the binary function `f` from right to left.
    # Example:
    # ----
    # > [1,2,3,4].foldr((x,y)->x+y, 1)  # => 1+(2+(3+(4+1)))
    # > [1,2,3,4].foldr((x,y)->x+y)     # => 1+(2+(3+4))
    # ----
    .foldr(f, v) := prim.list_foldr(f, self, v)
    .foldr(f)    := prim.list_foldr1(f, self)

    # Create new list that contains all elements of `self` but they are sorted.
    .sort(cmp @ Function) := prim.list_sort(self, cmp)
    .sort()               := prim.list_sort(self, compare)

    # Create new list where `v` is inserted between each element.
    # Example:
    # ----
    # > [1,2,3,4].weave(0)    # => [1,0,2,0,3,0,4]
    # ----
    .weave(v) := prim.list_weave(v, self)

    extend Iterable

    .each() := {
        list := self

        iterator () -> {
            if (list == [])
                return undef
            v := first(list)
            list = rest(list)
            return v
        }
    }
}

prim.set_builtin_parent('List, List)

# `cons(a, [b,c,d,...]) == [a,b,c,d,...]`. O(1)
cons := prim.list_cons

# `first([a,b,c,...]) == a`. O(1)
first := prim.list_first

# `rest([a,b,c,...]) == [b,c,...]`. O(1)
rest :=  prim.list_rest

# Concatenation of two lists.
# ----
# > [1,2,3] ++ [4,5]     # => [1,2,3,4,5]
# ----
ncadd := prim.list_append | ncadd

# Difference of two arrays.
# ----
# > [1,2,3,4,5] - [2,3,6]   # => [1,4,5]
# ----
sub := prim.list_diff | sub

# Convert to string.
str(list @ List) := {
    os := OutputStringStream.new()
    os.print("[")
    while list != [] {
        os.print(first(list))
        list = rest(list)
        if list != []
            os.print(", ")
    }
    os.print("]")
    prim.oss_to_string(os)
}

# Return a list consists of elements that are included in both `a` and `b`.
intersection(a @ List, b @ List) := iterable::intersection(a, b).to_list()

