# Copyright (C) 2014 nineties
# $Id: List.ab 2014-02-05 21:08:18 nineties $

import Container

ListTrait: Prim.ListTrait
ListTrait.parent = ContainerTrait

cons: Prim.cons
car:  Prim.car
cdr:  Prim.cdr

new: (gen @ Function) -> {
         list: []
         while true {
             v: gen()
             if (v == undef) return Prim.list_reverse(list)
             list = cons(v, list)
         }
     }
   | (iter @ Function, v) -> {
         list: []
         while true {
             list = cons(v, list)
             v = iter(v)
             if (v == undef) return Prim.list_reverse(list)
         }
     }

ListTrait.to_array(): Prim.list_to_array(self)
ListTrait.to_list():  self

ListTrait.length:        alias(() -> Prim.list_length(self))
ListTrait.size:          alias(() -> Prim.list_length(self))
ListTrait.empty?():      self == []
ListTrait.at(i):         Prim.list_at(self, i)
ListTrait.store(i, v):   Prim.list_store(self, i, v)
ListTrait.reverse():     Prim.list_reverse(self)
ListTrait.map(fun):      Prim.list_map(fun, self)
ListTrait.member?(v):    Prim.list_member?(self, v)
ListTrait.foldl(fun, v): Prim.list_foldl(fun, v, self)
ListTrait.foldl1(fun):   Prim.list_fold1(fun, self)
ListTrait.foldr(fun, v): Prim.list_foldr(fun, self, v)
ListTrait.foldr1(fun):   Prim.list_foldr1(fun, self)

ListTrait.each():   {
    list: self
    () -> {
        if (list == [])
            return undef
        else {
            v: car(list)
            list = cdr(list)
            v
        }
    }
}

add = Prim.list_append | add

export ListTrait cons car cdr add
