# Copyright (C) 2014 nineties
# $Id: List.ab 2014-02-28 19:17:38 nineties $

import Iterable

#= List =
# A list is a finite sequence of objects. Amber's list is heterogeneous,
# i.e. you can put any kind of objects into one list.
# The internal representation of lists are *singly-linked list*.

cons: Prim.cons
car:  Prim.car
cdr:  Prim.cdr

new: (f @ Function, n @ Int) -> {
        list: []
        for (i in 0..n-1) list = cons(f(i), list)
        Prim.list_reverse(list)
     }
   | (f @ Function, f0, n @ Int) -> {
        list: []
        for (i in 0..n-1) {
            list = cons(f0, list)
            f0 = f(f0)
        }
        Prim.list_reverse(list)
     }
   | (container) when container.Iterable? -> {
        list: []
        it: container.iterator()
        while (not it.end?) {
            list = cons(it.value, list)
            it.next()
        }
        Prim.list_reverse(list)
     }

#add = Prim.list_append | add
#
#trait List {
#    .extend 'Collection
#
#    .to_array()    = Prim.list_to_array(self)
#    .to_list()     = self
#    .size          = alias(() -> Prim.list_length(self))
#    .empty?        = alias(() -> self == [])
#    .get(i)        = Prim.list_at(self, i)
#    .set(i, v)     = Prim.list_store(self, i, v)
#    .reverse()     = Prim.list_reverse(self)
#    .map(fun)      = Prim.list_map(fun, self)
#    .member?(v)    = Prim.list_member?(self, v)
#    .foldl(fun, v) = Prim.list_foldl(fun, v, self)
#    .foldl1(fun)   = Prim.list_fold1(fun, self)
#    .foldr(fun, v) = Prim.list_foldr(fun, self, v)
#    .foldr1(fun)   = Prim.list_foldr1(fun, self)
#
#    .extend 'Iterable
#
#    .Iterator = Trait.new(\ListIterator) with {
#        .extend ForwardIterator
#        .extend MutableIterator
#
#        .list   = alias(0)
#        .next?  = alias(() -> .list != [])
#        .next() = {
#            v: car(.list)
#            .list = cdr(.list)
#            v
#        }
#
#        .value = alias(() -> .list[0], (v) -> {.list[0] = v})
#    }
#
#    .iterator() = `Iterator{!self} with .parent = Trait.List.Iterator
#}
#
#Prim.set_builtin_parent(\List, Trait.List)
#
#export cons car cdr
