# Copyright (C) 2014 nineties
# $Id: List.ab 2014-02-12 10:53:27 nineties $

import Enumerable

cons: Prim.cons
car:  Prim.car
cdr:  Prim.cdr

new: (gen @ Function) -> {
         list: []
         while true {
             v: gen()
             if (v == nil) return Prim.list_reverse(list)
             list = cons(v, list)
         }
     }
   | (iter @ Function, v) -> {
         list: []
         while true {
             list = cons(v, list)
             v = iter(v)
             if (v == nil) return Prim.list_reverse(list)
         }
     }

add = Prim.list_append | add

ListTrait: Prim.ListTrait with {
    parent        = EnumerableTrait
    to_array()    = Prim.list_to_array(self)
    to_list()     = self
    length        = alias(() -> Prim.list_length(self))
    size          = alias(() -> Prim.list_length(self))
    empty?()      = self == []
    at(i)         = Prim.list_at(self, i)
    store(i, v)   = Prim.list_store(self, i, v)
    reverse()     = Prim.list_reverse(self)
    map(fun)      = Prim.list_map(fun, self)
    member?(v)    = Prim.list_member?(self, v)
    foldl(fun, v) = Prim.list_foldl(fun, v, self)
    foldl1(fun)   = Prim.list_fold1(fun, self)
    foldr(fun, v) = Prim.list_foldr(fun, self, v)
    foldr1(fun)   = Prim.list_foldr1(fun, self)
    each() = {
        list: self
        () -> {
            if (list == [])
                return nil
            else {
                v: car(list)
                list = cdr(list)
                v
            }
        }
    }
}

export ListTrait cons car cdr
