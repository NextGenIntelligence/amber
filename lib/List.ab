# Copyright (C) 2014 nineties
# $Id: List.ab 2014-02-17 16:12:20 nineties $

import Collection

cons: Prim.cons
car:  Prim.car
cdr:  Prim.cdr

new: (gen @ Function) -> {
         list: []
         while true {
             v: gen()
             if (v == nil) return Prim.list_reverse(list)
             list = cons(v, list)
         }
     }
   | (iter @ Function, v) -> {
         list: []
         while true {
             list = cons(v, list)
             v = iter(v)
             if (v == nil) return Prim.list_reverse(list)
         }
     }

add = Prim.list_append | add

trait List {
    extend Collection

    to_array()    = Prim.list_to_array(self)
    to_list()     = self
    size          = alias(() -> Prim.list_length(self))
    empty?        = alias(() -> self == [])
    get(i)        = Prim.list_at(self, i)
    set(i, v)     = Prim.list_store(self, i, v)
    reverse()     = Prim.list_reverse(self)
    map(fun)      = Prim.list_map(fun, self)
    member?(v)    = Prim.list_member?(self, v)
    foldl(fun, v) = Prim.list_foldl(fun, v, self)
    foldl1(fun)   = Prim.list_fold1(fun, self)
    foldr(fun, v) = Prim.list_foldr(fun, self, v)
    foldr1(fun)   = Prim.list_foldr1(fun, self)

    extend Iterable

    Iterator = Trait.new(\ListIterator) with {
        extend ForwardIterator
        extend MutableIterator

        list   = alias(0)
        next?  = alias(() -> list != [])
        next() = {
            v: car(list)
            list = cdr(list)
            v
        }

        value = alias(() -> list[0], (v) -> {list[0] = v})
    }

    iterator() = `Iterator{!self} with parent = Iterator
}

Prim.set_builtin_parent(\List, Trait.List)

export cons car cdr
