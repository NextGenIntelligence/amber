# Copyright (C) 2012 nineties
#
# $Id: C.ab 2012-10-04 02:00:03 nineties $

# HIL to C translater

include "dev/HIL.ab"
include "dev/HIL/vector.ab"
include "pretty_printer.ab"

module HIL::C {
    compile_program(io, stmts): {
        pretty_printer::pprint(io, [
            "/* Automatically generated by HIL-Compiler of Amber */",
            \BlankLine,
            # XXX: fixme. following libs should not be hard-coded.
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <math.h>",
            \BlankLine
        ])

        pretty_printer::pprint(io, [
            "int",
            "main(int argc, char *argv[]) {",
            `Nested{ !(concatMap(stmts, emit_stmt) + ["return 0;"]) },
            "}"
        ])
    }

    emit_stmt(\nil): []
    emit_stmt(Located{_, stmt}): emit_stmt(stmt)
    emit_stmt(DefineVariable{Float, x, v}):
        [`NoSpace{"double ", !x, " = ", !emit_expr(v), ";"}]
    emit_stmt(Faddasgn{x, v}):
        [format("%S += %S;", x, v)]
    emit_stmt(While{cond, body}):
        [`NoSpace{"while(", !emit_expr(cond), ") {"},
         `Nested{!emit_stmt(body)},
          "}"
        ]
    emit_stmt(Block{stmts}): concatMap(stmts, emit_stmt)

    emit_expr(v@Symbol): v
    emit_expr(v@Float): v
    emit_expr(Flt{x, y}): `OneLine{!emit_expr(x), "<", !emit_expr(y)}

    #=== Vector arithmetic ===
    emit_stmt(DefineVariable{FVector{d}, x, v}):
        [`NoSpace{"double ", !x, "[", !d, "] = ", !emit_expr(v), ";"}]

    emit_stmt(FVaddasgn{dim, x, y}):
        List::create(dim, i -> format("%S[%d] += %S[%d];", x, i, y, i))

    emit_expr(FVector{dim, values...}):
        Node{\OneLine, ["{"] + map(values, emit_expr).delimit(",") + ["}"]}
    emit_expr(FVneg{dim, x}):
        Node{\OneLine, ["{"] + List::create(dim, i -> format("-%S[%d]", x, i)).delimit(",") + ["}"]}
    emit_expr(FVmuls{dim, x, s}):
        Node{\OneLine, ["{"] + List::create(dim, i -> format("%S[%d]*%S", x, i, s)).delimit(",") + ["}"]}
    emit_expr(FVdivs{dim, x, s}):
        Node{\OneLine, ["{"] + List::create(dim, i -> format("%S[%d]/%S", x, i, s)).delimit(",") + ["}"]}
    emit_expr(FVabs{dim, x}):
        Node{\OneLine, [Node{\NoSpace, ["sqrt("] +
            List::create(dim, i -> format("%S[%d]*%S[%d]", x, i, x, i)).delimit("+") + [")"]}]}

    emit_expr(FIpow{x, 2}): format("%S*%S", x, x)
    emit_expr(FIpow{x, 3}): format("%S*%S*%S", x, x, x)
}

import HIL
HILCompiler("C"): HIL::C::compile_program
