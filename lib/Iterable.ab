# Copyright (C) 2014 nineties
# $Id: Iterable.ab 2014-02-26 12:42:00 nineties $

#= Traits for external iterators =
# There are three traits about way of moving
#   + `ForwardIterator`
#   + `BidirectionalIterator`
#   + `RandomAccessIterator`
# and two traits about read/write operations.
#   + `ImmutableIterator`
#   + `MutableIterator`

trait ForwardIterator {
    # Step forward and return self.
    # When the iterator already reached the end of the sequence,
    # do nothing.
    require '.next()

    # `true` when the iterator already reached the end of the sequence.
    require '.end?
}

trait BidirectionalIterator {
    extend 'ForwardIterator

    # Step backward and return self.
    # When the iterator already reached the end of the sequence,
    # do nothing.
    require '.prev()

    # `true` when the iterator already reached the beginning of the sequence.
    require '.begin?
}

trait RandomAccessIterator {
    extend 'BidirectionalIterator

    # Change the position of the iteratlr by given `offset` and return
    # `self`.  When the iterator already reached the beginning or end of
    # the sequence, do nothing.
    require '.advance(offset @ Int)

    # Return the distance of `self` and `other` which is another iterator
    # for the same sequence.
    require '.distance(other @ Iterator)

    .next() = .advance(1)
    .prev() = .advance(-1)

    # You can also change the position of the iterator `i` with offset `d`
    # by `i += d` or `i -= d`.
    .add!(d @ Int) = .advance(d)
    .sub!(d @ Int) = .advance(-d)
}

# The element of the current position of an iterator can be accessed by
# `value` slot. You can implement it using `alias` function.
# For example, the `value` slot of an immutable iterator can be implemented
# as an alias which is created only with `get` option.
trait ImmutableIterator {
    require '.value
}

trait MutableIterator {
    require '.value
}

#= Iterable objects =
trait Iterable {
    require '.iterator()
    require '.Iterator
}
