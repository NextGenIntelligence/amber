# Copyright (C) 2014 nineties
# $Id: Iterable.ab 2014-02-24 08:41:51 nineties $

trait Iterable {
    .require 'iterator, 'Iterator
}

trait RandomIterable {
    .extend 'Iterable
    .require 'first, 'last

    .first() = .iterator()
}

trait ForwardIterator {
    .require 'next, 'next?
}

trait BidirectionalIterator {
    .extend 'ForwardIterator
    .require 'prev, 'prev?
}

trait RandomAccessIterator {
    .extend 'BidirectionalIterator
    .require 'advance, 'distance

    .next() = .advance(1)
    .next?  = alias(() -> .advance?(1))
    .prev() = .advance(-1)
    .prev?  = alias(() -> .advance?(-1))

    .add!(d @ Int) = .advance(d)
    .sub!(d @ Int) = .advance(-d)
}

sub(a, b) when a.RandomAccessIterator? and b.RandomAccessIterator?
    : b.distance(a)

trait MutableIterator{
    .require 'value, 'value?
}

trait ImmutableIterator{
    .require 'value, 'value?
}

trait InsertAfterIterator {
    .require 'insertafter
}

trait InsertBeforeIterator {
    .require 'insertbefore
}

trait EraseIterator {
    .require erase
}

