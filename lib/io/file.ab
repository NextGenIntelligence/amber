# Copyright (C) 2014 nineties
# $Id: io/file.ab 2014-04-02 01:39:09 nineties $

# Standard input, standard output and standard error.
stdin:  prim.stdin
stdout: prim.stdout
stderr: prim.stderr

# Printing functions for `stdout`.
print(v): stdout.print(v)
puts(v): stdout.puts(v)
printf(fmt @ String, args...): stdout.printf(fmt, args...)

# Open file `path` and create an input stream.
# Option:
#   * binary: Binary mode.
open_in(path @ String, binary=false): {
    io: prim.open_in(path, binary)
    if binary
        io.parent = Trait.BinaryInputFileStream
    io
}

# Open file `path` and create an output stream.
# Option:
#   * append: Do not truncate existing content of the file and
#     write new data to the end of the file.
#   * binary: Binary mode.
open_out(path @ String, append=false, binary=false): {
    io: prim.open_out(path, append, binary)
    if binary
        io.parent = Trait.BinaryOutputFileStream
    io
}

trait InputFileStream with {
    extend InputStream

    # Close the stream.
    .close(): prim.close_in(self)

    # True when the stream is at end of stream.
    .eos?: alias(() -> prim.eos?(self))

    # Read one byte from the stream.
    .read(eoserror=false): prim.read_char(self, eoserror)

    # Read `n` bytes or until reach EOS and return them as a string.
    .read(n @ Int, eoserror=false): prim.read_bytes(self, n, eoserror)

    # Read characters until reach "\n", "\0" or EOS. The newline character
    # will be truncated.
    .read_line(eoserror): prim.read_line(self, eoserror)

    # Read characters until reach EOS.
    .read_all(): prim.read_all(self)

    # Return the next character if any.
    .lookahead(eoserror=false): prim.lookahead(self, eoserror)
}


trait OutputFileStream with {
    extend OutputStream

    # Close the stream.
    .close(): prim.close_out(self)

    # Output string `s` to the stream.
    .write(s @ String): prim.print_string(self, s)
}

prim.set_builtin_parent('InputFileStream, InputFileStream)
prim.set_builtin_parent('OutputFileStream, OutputFileStream)

trait BinaryInputFileStream with {
    extend InputFileStream

    # Read characters until reach "\0" or EOS.
    .read_string(): prim.read_string(self)

    # Read signed or unsigned integer with specified precision and
    # return a fixed-length integer or a multi-precision integer.
    .read_int8():   prim.read_int8(self)
    .read_uint8():  prim.read_uint8(self)
    .read_int16():  prim.read_int16(self)
    .read_uint16(): prim.read_uint16(self)
    .read_int32():  prim.read_int32(self)
    .read_uint32(): prim.read_uint32(self)
    .read_int64():  prim.read_int64(self)
    .read_uint64(): prim.read_uint64(self)

    # Read IEEE754 double-precision floating point number.
    .read_float():  prim.read_float(self)
}

trait BinaryOutputFileStream with {
    extend OutputFileStream

    # Write signed or unsigned integer with specified precision.
    .write_int8(n):   prim.write_int8(self, n)
    .write_uint8(n):  prim.write_uint8(self, n)
    .write_int16(n):  prim.write_int16(self, n)
    .write_uint16(n): prim.write_uint16(self, n)
    .write_int32(n):  prim.write_int32(self, n)
    .write_uint32(n): prim.write_uint32(self, n)
    .write_int64(n):  prim.write_int64(self, n)
    .write_uint64(n): prim.write_uint64(self, n)

    # Write IEEE754 double-precision floating point number.
    .write_float(n):  prim.write_float(self, n)
}
