# Copyright (C) 2014 nineties
# $Id: Queue.ab 2014-02-16 17:43:22 nineties $

import Collection

trait Queue {
    extend Collection
    require enqueue dequeue front

    # Enqueue values from give Iterable object.
    enq_values(seq): {
        it: seq.iterator()
        while (not it.end?) enqueue(it.next())
        self
    }
    enq_values(seq, n @ Int): {
        it: seq.iterator()
        for (i in 1..n) enqueue(it.next())
        self
    }

    # Deque `n' elements and return them as a list.
    dequeue(n @ Int): {
        v: dequeue()
        cons(v, dequeue(n-1))
    }
    dequeue(0): []

    # Drop elements.
    drop(): dequeue(); self
    drop(n @ Int): {
        for (i in 1..n) dequeue()
        self
    }

    # Remove all elements from the queue.
    clear(): while (not empty?) pop()

    # Drop elements.
    drop(): dequeue(); self
    drop(n @ Int): {
        for (i in 1..n) drop()
        self
    }

    # Reverse the order of elements. O(n).
    reverse(): {
        stack: Array.new()
        while (not self.empty?)
            stack.push_back(self.dequeue())
        while (not stack.empty?)
            self.enqueue(stack.pop_back())
        self
    }
}
