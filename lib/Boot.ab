" Copyright (C) 2014 nineties "
" $Id: boot.ab 2014-03-12 19:24:21 nineties $ "

" NB: We write comments as string literals until we define comment syntax. "

" Copy important functions from the module `Prim' to the global-module. "
Define{load,          Slot{Prim, load}}
Define{exit,          Slot{Prim, exit}}
Define{create_module, Slot{Prim, create_module}}
Define{enter_module,  Slot{Prim, enter_module}}
Define{exit_module,   Slot{Prim, exit_module}}
Define{fusion,        Slot{Prim, fusion_function}}
Define{equal?,        Slot{Prim, equal?}}
Define{identical?,    Slot{Prim, identical?}}

" Load parser and macros. "
Apply{load, List{"Syntax.ab"}}

# Load important functions
load "Base.ab"

# Setup module system.
load "Module.ab"

# Setup trait system and standard traits.
import Trait (extend, require)

# Import standard libraries.
import Symbol
import Numeric hiding (INTEGER_WIDTH, INTEGER_MIN, INTEGER_MAX)
import Iterable (iterator)
import String
import Tuple
import List (cons,first,rest)
import Array
import Table
import IO
import IO.File (stdin, stdout, stderr)


#printf(stdout, "%f", 1.0)
#printf(stdout, "%f", -1.0)
#f(t) when Seq{[(x:nil), (y:nil), TryAssign{Poge{x, y}, t} or TryAssign{Hoge{y, x}, t}]}: {
#    (x, y)
#}
#
#Prim.debugpf f(`Hoge{3,4})
#
#f(Pair{x, y} or SwapPair{y, x}): {
#    Prim.debugpf [x,y]
#}
#f(`Pair{2, 3})
#f(`SwapPair{3, 2})


#printf(stdout, "hogehoge %30.5s pogepoge\n", "Hello World")

#printf(stdout, "hogehoge %d pogepoge\n", 123)
#printf(stdout, "hogehoge %d pogepoge\n", -123)
#printf(stdout, "hogehoge % d pogepoge\n", 123)
#printf(stdout, "hogehoge % d pogepoge\n", -123)
#printf(stdout, "hogehoge %+d pogepoge\n", 123)
#printf(stdout, "hogehoge %+d pogepoge\n", -123)
#printf(stdout, "hogehoge %-+20d pogepoge\n", 123)
#printf(stdout, "hogehoge %-+20d pogepoge\n", -123)
#printf(stdout, "hogehoge %-020d pogepoge\n", 123)
#printf(stdout, "hogehoge %-020d pogepoge\n", -123)
#printf(stdout, "hogehoge %20d pogepoge\n", 123)
#printf(stdout, "hogehoge %20d pogepoge\n", -123)
#printf(stdout, "hogehoge %020d pogepoge\n", 123)
#printf(stdout, "hogehoge %020d pogepoge\n", -123)
#printf(stdout, "hogehoge % 020d pogepoge\n", 123)
#printf(stdout, "hogehoge % 020d pogepoge\n", -123)

#
#Prim.debugpf IO.open("test", "r")

##import IO
##import IO.Printf
##import Parser
##
##if (ARGV.empty?()) {
##    Syntax.enable_shell_syntax()
##    shell_outputs: Array.new()
##    shell_outputs.push(nil)
##
##    PROMPT = "amber"
##    p: Parser.new(stdin)
##
##    while true {
##        try {
##            if (p.parse_shell()) {
##                expr: p.node
##                if (Prim.has_slot?(Amber, \before_eval))
##                    expr = Amber.before_eval(expr)
##                v: Amber.eval(expr)
##                if (Prim.has_slot?(Amber, \after_eval))
##                    v = Amber.after_eval(v)
##                printf("=> %p\n", v)
##                shell_outputs[0] = v
##                shell_outputs.push(v)
##            } else {
##                #stderr.puts(p.error_string)
##            }
##        } catch e -> {
##            stderr.puts(e)
##        }
##    }
##
##    #while true {
##    #    try {
##    #    } catch e -> {
##    #        stderr.printf("Error: %p", e)
##    #    }
##    #}
##} else {
##    load(ARGV[0])
##    exit(0)
##}
