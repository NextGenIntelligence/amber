" Copyright (C) 2014 nineties "
" $Id: Boot.ab 2014-03-17 19:28:24 nineties $ "

" NB: We write comments as string literals until we define comment syntax. "

" Copy important functions from the module `Prim' to the global-module. "
Define{load,          Slot{Prim, load}}
Define{exit,          Slot{Prim, exit}}
Define{create_module, Slot{Prim, create_module}}
Define{enter_module,  Slot{Prim, enter_module}}
Define{exit_module,   Slot{Prim, exit_module}}
Define{fusion,        Slot{Prim, fusion_function}}
Define{equal?,        Slot{Prim, equal?}}
Define{identical?,    Slot{Prim, identical?}}

" Load parser and macros. "
Apply{load, List{"Syntax.ab"}}

# Load important functions
load "Base.ab"

# Setup module system.
load "Module.ab"

# Setup trait system and standard traits.
import Trait (extend, require)

# Import standard libraries.
import Symbol
import Numeric hiding (INTEGER_WIDTH, INTEGER_MIN, INTEGER_MAX)
import Iterable (iterator)
import String
import Tuple
import List (cons,first,rest)
import Array
import Table
import IO
import IO.File (stdin, stdout, stderr, print, puts, printf)
import Parser

if (ARGV.empty?) {
    # Start shell

    # Add `exit` command.
    Amber.eval('exit): exit(0)

    Syntax.enable_shell_syntax()
    Amber.shell_outputs: Array.new()
    Amber.shell_outputs.push(nil)

    PROMPT = "amber"
    p: Parser.new(stdin, Amber.Syntax)
    while true {
        try {
            if (Syntax.shell(p)) {
                tree: p.tree
                if (Prim.has_slot?(Amber, 'before_eval, true))
                    tree = Amber.before_eval(tree)
                v: Amber.eval(tree)
                if (Prim.has_slot?(Amber, 'after_eval, true))
                    v = Amber.after_eval(tree, v)
                printf("=> %s\n", Prim.fullform(v))
                Amber.shell_outputs[0] = v
                Amber.shell_outputs.push(v)
            } else {
                stderr.printf("Syntax error: %s\n", p.error_string)
                p.reset!()
            }
        } catch e -> {
            stderr.printf("Error: %s\n", Prim.fullform(e))
            p.reset!()
        }
    }
} else {
    load(ARGV[0])
    exit(0)
}
