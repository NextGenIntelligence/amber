" Copyright (C) 2014 nineties "
" $Id: Boot.ab 2014-02-10 17:10:13 nineties $ "

" We write comments as string literals until we define comment syntax. "

" Copy important functions from the module `Prim` to the global-module. "
Define{load,          Slot{Prim, load}}
Define{exit,          Slot{Prim, exit}}
Define{create_module, Slot{Prim, create_module}}
Define{enter_module,  Slot{Prim, enter_module}}
Define{exit_module,   Slot{Prim, exit_module}}
Define{fusion,        Slot{Prim, fusion_function}}
Define{equal?,        Slot{Prim, equal?}}
Define{identical?,    Slot{Prim, identical?}}

" Load parser and macros. "
Apply{load, List{"Syntax.ab"}}

# Setup module system.
load("Module.ab")

import Base
import Numeric
import String
import Symbol
import Container
import List
import Array
import IO
import IO.Printf
import Parser

if (ARGV.empty?()) {
    Syntax.enable_shell_syntax()
    shell_outputs: Array.new()
    shell_outputs.push(undef)

    PROMPT = "amber"
    p: Parser.new(stdin)

    while true {
        try {
            if (p.parse_shell()) {
                expr: p.node
                if (Amber.has_slot?(\before_eval))
                    expr = Amber.before_eval(expr)
                v: Amber.eval(expr)
                if (Amber.has_slot?(\after_eval))
                    v = Amber.after_eval(v)
                printf("=> %p\n", v)
                shell_outputs[0] = v
                shell_outputs.push(v)
            } else {
                #stderr.puts(p.error_string)
            }
        } catch e -> {
            stderr.puts(e)
        }
    }

    #while true {
    #    try {
    #    } catch e -> {
    #        stderr.printf("Error: %p", e)
    #    }
    #}
} else {
    load(ARGV[0])
    exit(0)
}
