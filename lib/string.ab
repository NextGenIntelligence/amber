# Copyright (C) 2014 nineties
# $Id: string.ab 2014-04-12 11:24:01 nineties $

#= Strings. =
# The representation of strings are internally null-terminated sequence
# of 8-bit ascii characters. Multibyte characters are not supported.
# Amber does not have any specific type of objects for 'characters'.
# We treat a characters as a string of length one.
#
# Amber's string objects are immutable. So several operations such as
# concatenation of many strings are not efficient. Use `StringIO` module
# for such operations.

typecast(a, 'String) = str(a)
typejoin(a, 'String) = 'String
typejoin(b, 'String) = 'String

# Concatination of two strings.
# ----
# > "Hello" + " " + "World"     # => "Hello World"
# ----

ncadd = prim.string_add | ncadd

# Repeation of string.
mul(s @ String, n @ Int) = prim.string_repeat(s, n)
mul(n @ Int, s @ String) = prim.string_repeat(s, n)

String: object_system.builtin_class('String) with {
    # Convert to a symbol.
    .to_sym(): prim.string_to_symbol(self)

    # Number of characters.
    # ----
    # > "Hello World".length    # => 21
    # ----
    .length: alias(() -> prim.string_length(self))
    .size:   alias(() -> prim.string_length(self))

    # `i`-th character.
    .get(i @ Int): prim.string_at(self, i)

    # substring of length `m` from `i`-th position.
    .get(i @ Int, m @ Int): prim.string_substr(self, i, m)

    # `true` when the string contains `s` as a substring.
    .contain?(s): prim.string_contain?(self, s)

    # Convert special ascii characters to escape-sequences.
    # ----
    # > "Hello World\n".escape()      # => "Hello World\\n"
    # ----
    .escape(): prim.string_escape(self)

    # Convert escape-sequences to corresponding characters.
    # ----
    # > "Hello World\\n".unescape()   # => "Hello World\n"
    # ----
    .unescape(): prim.string_unescape(self)

    # Convert lower characters to upper ones.
    .upcase(): prim.string_upcase(self)

    # Convert upper characters to lower ones.
    .downcase(): prim.string_downcase(self)

    # Convert first character to uppercase and others to lowercase.
    .capitalize(): prim.string_capitalize(self)

    # Split the string by delimiter string `d` and return a list.
    # ----
    # > "Hello World".split("o")      # => ["Hell", " W", "rld"]
    # ----
    .split(d): prim.string_split(self, d)
    .split():  prim.string_split(self, " ")

    .ljust(w): prim.string_ljust(self, w, "")
    .ljust(w, punct): prim.string_ljust(self, w, punct)

    .rjust(w): prim.string_rjust(self, w, "")
    .rjust(w, punct): prim.string_rjust(self, w, punct)

    .center(w): prim.string_center(self, w, "")
    .center(w, punct): prim.string_center(self, w, punct)

    # Convert a character (i.e. a string of length one) to its ascii code.
    # Exception:
    #   * InvalidArgument
    # ----
    # > "a".to_code()       # => 97
    # ----
    .to_code(): prim.char_to_code(self)

    #== Iteration ==
    extend Iterable
    .each(): {
        str: self
        len: self.size
        idx: 0

        iterator () -> {
            if (idx == len)
                return undef
            idx += 1
            return str[idx-1]
        }
    }
}

# Convert ascii code to a character.
# Exception:
#   * InvalidArgument
Int.to_char(): prim.code_to_char(self)

prim.set_builtin_parent('String, String)
