# Copyright (C) 2010 nineties
# $Id: base.ab 2014-04-12 11:52:05 nineties $

#== The most basic functions and methods. ==

# We chan think `nil` as the common ancestor of objects. From any object
# `o`, the chain of parents, i.e. o.parent.parent..., eventually reaches
# `nil`. This means that every slot of `nil` is accessible to every object.
#
# The exception are objects whose parent-slot is removed.
# You can remove the parent of object `o` by `o.remove_slot('parent)`.

nil with {
    # The head symbol.
    .head: prim.alias(() -> prim.head(self), nil)

    # The arity.
    # It is *NOT* the arity of functions.
    # For an object `h{a1, a2, ..., an}`, its `arity` is `n`.
    .arity: prim.alias(() -> prim.arity(self), nil)

    # The list of arguments.
    # It is *NOT* the arguments of function-calls.
    # For an object `h{a1, a2, ..., an}`, its `arguments` is
    # `[a1, a2, ..., an]`.
    .arguments: prim.alias(() -> prim.arguments(self), nil)

    # Return `true` when it is atom object.
    .atom?: prim.alias(() -> prim.atom?(self), nil)

    # Get the value of the slot named `s`.
    #
    # Options:
    #   * recursive: Lookup parent-slot recursively if it exists. (default=true)
    #   * alias: Resolve Alias objects. (default=true)
    #   * check: If slot is not found, throw UndefinedSlot exception when
    #     check==true, return nil when check==false. (default=true)
    # Examples:
    # ----
    # > A: `Object{A}
    # > B: `Object{B}
    # > A.parent = B
    # > A.x = 0
    # > B.y = 1
    # > A.f = alias(get = () -> 2)
    # > A.get_slot('x)                    # => 0
    # > A.get_slot('y)                    # => 1
    # > A.get_slot('f)                    # => 2
    # > A.get_slot('y, recursive=false)   # => Error UndefinedSlot
    # > A.get_slot('z, check=false)       # => nil
    # > A.get_slot('f, alias=false)       # => @ Alias
    # ----
    .get_slot(s @ Symbol, recursive=true, alias=true, check=true):
        prim.get_slot(self, s, recursive, alias, check)

    # Set a value `v` to the slot named `s` and return `v`.
    #
    # Options:
    #   * overwrite: Lookup the slot recursively, and overwrite it with
    #     the value if the slot is found. It not throw UndefinedSlot exception. (default:false)
    #   * fusion: When `self.s` is a function and `v` is also a function,
    #     set `fusion(v, self.s)` as the new value. When one of `self.s` or `v` is not a function
    #     simply put `v` to the slot. (default=true)
    #   * alias: Resolve Alias objects. (default=true)
    # Examples:
    # ----
    # > A: `Object{A}
    # > B: `Object{B}
    # > A.parent = B
    # > B.x = 0
    # > A.set_slot('y, 0)                            # => 0
    # > A.get_slot('y)                               # => 0
    # > A.set_slot('x, 1, overwrite=true)            # => 1
    # > A.get_slot('x)                               # => 1
    # > A.get_slot('x, recursive=false, check=false) # => nil
    # > A.x = alias(get = () -> self.z, set = (v) -> self.z = 1)
    # > A.set_slot('x, 0)                            # => 0
    # > A.get_slot('x)                               # => 1
    # > A.get_slot('z)                               # => 1
    # > A.set_slot('x, 0, alias=false)               # => 0
    # > A.get_slot('x)                               # => 0
    # > A.get_slot('z)                               # => 1
    # > A.f(x @ Int) = "integer"
    # > A.set_slot('f, (x @ String) -> "string")
    # > A.f(0)                                       # => "integer"
    # > A.f("Hello")                                 # => "string"
    # > A.set_slot('f, (x @ String) -> "string", fusion=false)
    # > A.f("Hello")                                 # => "string"
    # > A.f(0)                                       # => Error MatchingFailed
    # ----
    .set_slot(s @ Symbol, v, overwrite=false, fusion=true, alias=true):
        prim.set_slot(self, s, v, overwrite, fusion, alias)

    # Remove a slot named `s` from `self`.
    #
    # Option:
    #   recursive: Remove all slots named `s` of parents. (default=false)
    .remove_slot(s @ Symbol, recursive=false):
        prim.remove_slot(self, s, recursive)

    # `i`-th argument of the object.
    .get(i @ Int):    prim.get_arg(self, i)
    .set(i @ Int, v): prim.set_arg(self, i, v)

    # Accessing slots with brackets.
    .get(name @ Symbol): self.get_slot(name)
    .get(name @ String): self.get_slot(name.to_sym())

    .set(name @ Symbol, v): self.set_slot(name, v)
    .set(name @ String, v): self.set_slot(name.to_sym(), v)

    # Return true if `self` has a slot named `s`.
    #
    # Option:
    #   recursive: Lookup parents recursively. (default=false)
    .has_slot?(s, recursive=true) : prim.has_slot?(self, s, recursive)

    # Apply `fun` to triplets `(object, slot-name, slot-value)` for all slots.
    # Option:
    #   recursive: Lookup parents recursively. (default=false)
    .each_slots(fun @ Function, recursive=false) : prim.each_slots(self, fun, recursive)

    # Return a list of name and value paris.
    .slots(recursive=false): {
        list: []
        self.each_slots((_,x,v) -> { list = cons((x,v), list) }, recursive=recursive)
        list
    }

    # Evaluate `expression`.
    .eval(expression, full=true):
        if full
            prim.eval_with_self_full(self, expression)
        else
            prim.eval_with_self(self, expression)
}

# Node construction.
node(head @ Symbol, arguments...): Node{head, arguments}

# Identity function.
id(obj): obj

# Equality function.
equal?: prim.equal?

# `identical?(a, b) == true` iff `a` and `b` are exactly same objects.
identical?: prim.identical?

# Fusion two functions.
# If `args` is in the domain of `f`, then `fusion(f,g)(args) == f(args)`.
# Otherwise `fusion(f,g)(args) == g(args)`.
#
# `fusion!` is for `f |= g`.
fusion:  prim.fusion_function
fusion!: prim.fusion_function

# Compose two functions.
# `compose(f,g)` is logically equal to `x -> f(g(x))`.
compose: prim.compose_function

# Create pseudo-attributes.
# A pseudo-attribute can be seen as a usual slot, but reading and writing
# of the slot is redirected to a function call.
#
# A pseudo-attribute `o.f` can be created by `alias` function like:
# `o.f = alias(get = () -> e1, set = (v) -> e2)`.
# Then `o.f` is equal to call of `() -> e1` with `self==o`.
# `o.f = v` is also equal to call of `(v) -> e2`.
#
# You can ommit `get` or `set`.
alias(get=nil, set=nil): prim.alias(get, set)
alias(getter @ Function, setter @ Function): prim.alias(getter, setter)
alias(getter @ Function): prim.alias(getter, nil)

# Create an alias to i-th argument.
#
# Examples:
# ----
# > obj: `Object{0}
# > obj.x = alias(0)
# > obj.x     # => 0
# > obj.x = 1
# > obj[0]    # => 1
# > obj[0] = 2
# > obj.x     # => 2
# ----
alias(i @ Int): alias(
        get = () -> self[i],
        set = (v) -> { self[i] = v }
        )

readonly(i @ Int): alias(get = () -> self[i])

# Builtin hash function.
hash: prim.hash

#== Operators ==
#=== Mathematical operators ===
# * `+ a`    : Unary plus. Equivalent to `uplus(a)`.
# * `- a`    : Unary minus. Equivalent to `uminus(a)`.
# * `|a|`    : Absolute value. Equivalent to `abs(a)`.
# * `a + b`  : Addition. Equivalent to `add(a, b)`.
# * `a ++ b` : Non-commutative addition. equivalent to `ncadd(a, b)`.
# * `a - b`  : Subtraction. Equivalent to `sub(a, b)`.
# * `a * b`  : Multiplication. Equivalent to `mul(a, b)`.
# * `a ** b` * Non-commutative multiplication. Equivalent to `ncmul(a, b)`.
# * `a ^ b`  : Exponential. Equivalent to `pow(a, b)`.
# * `a / b`  : Division. Equivalent to `div(a, b)`.
# * `a // b` : Quotient of Euclidean division (division with remainder).
#   Equivalent to `quo(a, b)`.
# * `a % b` : Remainder of Euclidean division. Equivalent to `rem(a, b)`.
#
#=== Comparison operators ===
# * 'a == b' : Equivalent to `equal?(a, b)`.
# * 'a != b' : Equivalent to `not equal?(a, b)`.
# * 'a < b'  : Equivalent to `less_than?(a, b)`.
# * 'a <= b' : Equivalent to `less_equal?(a, b)`.
# * 'a > b'  : Equivalent to `greater_than?(a, b)`.
# * 'a >= b' : Equivalent to `greater_equal?(a, b)`.
# * 'a <=> b': Equivalent to `compare(a, b)`.
# Default implementations for `<`, `<=`, `>`, `>=` using `compare` are
# provided. For example, `a < b` is equivalent to `compare(a, b) < 0`.
#
#=== Function fusion ===
# * 'f | g': Equivalent to `fusion(f, g)`.
#
#=== Assignment operators ===
# * 'a += b'  : Equivalent to `a = a.add!(b)`
# * 'a ++= b' : Equivalent to `a = a.ncadd!(b)`
# * 'a -= b'  : Equivalent to `a = a.sub!(b)`
# * 'a *= b'  : Equivalent to `a = a.mul!(b)`
# * 'a **= b' : Equivalent to `a = a.ncmul!(b)`
# * 'a ^= b'  : Equivalent to `a = a.pow!(b)`
# * 'a /= b'  : Equivalent to `a = a.div!(b)`
# * 'a //= b' : Equivalent to `a = a.quo!(b)`
# * 'a %= b'  : Equivalent to `a = a.rem!(b)`
# * 'a |= b'  : Equivalent to `a = a.fusion!(b)`
#
# Amber uses different functions for `a op b` and `a op= b`.
# Our intention is to enable giving efficient implementations to assignment
# operatorsa which destructively overwrite left-hand-side operands.
# By default, functions listed above are just aliases of non-destructive
# ones.
#
#=== Implicit type conversion ===
# Functions for implicit type-conversion for mathematical operators.
# You can define new implicit type-conversion rule by extending two
# functions: `typecast` and `typejoin`. Here, we call the head symbol
# of an object the type of it.
#
# `typecast(o,h)` is an object with head `h` converted from `o`. For
# example, `typecast(1, 'Float) == 1.0`. `typejoin(a,b)` is a common
# borader concept of type `a` and `b`. For example,
# `typejoin('Int, 'Float) == 'Float`. `typejoin(a,b) == nil` when such
# type doesn't exist. If `typejoin(a,b) == c` then `typecast(o1,c)` and
# `typecast(o2,c)` must be defined where `o1.head == a` and `o2.head == b`.
#
# The process of implicit type conversion for operation `a op b` is as
# follows.
#   + When `a op b` is defined for the types of `a` and `b`, perform it.
#   + `h: typejoin(a.head, b.head)`.
#   + If `h == nil` throw `LogicError exception.
#   + If `h == a.head and h == b.head` throw `LogicError exception,
#     because we already know `a op b` is not defined here.
#   + Perform `typecast(a, h) op typecast(b, h)`.

typecast(a, h): throw `ValueError{"Can not convert", !a, !h}
typecast(a, h) when a.head == h: a
typejoin(h1, h2): nil
typejoin(h, h): h

perform_binary_operation(a, b, fun, op): {
    h: typejoin(a.head, b.head)
    if (h == nil)
        throw `LogicError{"Operands are incompatible.", !op, !a, !b}
    if (h == a.head and h == b.head)
        throw `LogicError{"Undefined binary operation.", !op, !a, !b}
    fun(typecast(a, h), typecast(b, h))
}

perform_ternary_operation(a, b, c, fun, op): {
    h: typejoin(a.head, typejoin(b.head, c.head))
    if (h == nil)
        throw `LogicError{"Operands are incompatible.", !op, !a, !b, !c}
    if (h == a.head and h == b.head and h == c.head)
        throw `LogicError{"Undefined ternary operation.", !op, !a, !b, !c}
    fun(typecast(a, h), typecast(b, h), typecast(c, h))
}

uplus(a):  throw `LogicError{"No default implementation", uplus}
uminus(a): throw `LogicError{"No default implementation", uminus}
abs(a):    throw `LogicError{"No default implementation", abs}
add(a, b): perform_binary_operation(a, b, add, 'add)
ncadd(a, b): perform_binary_operation(a, b, ncadd, 'ncadd)
sub(a, b): perform_binary_operation(a, b, sub, 'sub)
mul(a, b): perform_binary_operation(a, b, mul, 'mul)
ncmul(a, b): perform_binary_operation(a, b, ncmul, 'ncmul)
pow(a, b): perform_binary_operation(a, b, pow, 'pow)
quo(a, b): perform_binary_operation(a, b, quo, 'quo)
div(a, b): perform_binary_operation(a, b, div, 'div)
rem(a, b): perform_binary_operation(a, b, rem, 'rem)

nil with {
    .add!(b):    add(self, b)
    .ncadd!(b):  ncadd(self, b)
    .sub!(b):    sub(self, b)
    .mul!(b):    mul(self, b)
    .ncmul!(b):  ncmul(self, b)
    .pow!(b):    pow(self, b)
    .quo!(b):    quo(self, b)
    .rem!(b):    rem(self, b)
    .div!(b):    div(self, b)
    .fusion!(b): fusion(self, b)
}

compare(a, b)        : perform_binary_operation(a, b, compare, 'compare)
less_than?(a, b)     : compare(a, b) < 0
greater_than?(a, b)  : compare(a, b) > 0
less_equal?(a, b)    : compare(a, b) <= 0
greater_equal?(a, b) : compare(a, b) >= 0

# Data converters
int(n @ Int):    n
int(f @ Float):  prim.float_to_int(f)
int(s @ String): prim.string_to_int(s)

float(n @ Int):    prim.int_to_float(n)
float(f @ Float):  f
float(s @ String): prim.string_to_float(s)

# Convert objects to fullform-string, i.e. the form of
# `h{a1, a2, .., an}`.
str(obj): prim.fullform(obj)

str(n @ Int, base=10, precision=0, prefix=false, upper=false, unsigned=false):
 prim.int_to_string(n, base, precision, prefix, upper, unsigned)
str(f @ Float, precision=0): prim.float_to_string(f, precision)
str(s @ String): s
