# Copyright (C) 2014 nineties
# $Id: compile.ab 2014-04-22 16:22:11 nineties $

#= Ahead-of-time compilation =

import interactive (ask)

# Now, we a in the directory where this file is installed.
# Change working directory to the original path.
import sys
sys::chdir(INVOKE_PATH)
Apply{Slot{prim, load}, List{"boot.ab"}}

if ARGV.empty? {
    stderr.puts("Usage: amber --compile <file>")
    exit(1)
}

# Construct a state object for compilation.
CompileState := `CompileState{}


# Detect input and output languages.
languages := Table{
    ("ab", "amber"),
    ("c",  "CAST")
}

detect_lang(f, type) := {
    idx := nil
    lang := nil
    f and (idx = f.last_index(".")) and (lang = languages[f[idx+1 .. -1]])
    return lang if lang
    ask("What is the %s language? %p", type, languages.values)
}

load_lang(f, type) := {
    l := detect_lang(f, type).to_sym()
    evalfull(`(Import{[!l]}))
}

CompileState.input_language  := load_lang(ARGV[0], "input")
CompileState.output_language := load_lang(amber.output_file, "output")

# Parse the inputfile as a program of given language.
CompileState.tree := {
    tree := nil
    fp   := io::open_in(ARGV[0])
    try {
        tree = parser::parse(CompileState.input_language, fp)
    } catch e -> {
        fp.close()
        throw e
    }
    fp.close()
    tree
}


evalfull(`(Import{[!CompileState.output_language.name, compiler]}))
exit(0)
