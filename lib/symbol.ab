# Copyright (C) 2014 nineties
# $Id: symbol.ab 2014-04-04 13:50:08 nineties $

import numeric (compare)

# A symbol is an object which can be used as the head of an object, a
# variable, the name of a slot and so on. Amber uses the special symbol
# `Symbol` for the head of symbol objects. The name of a symbol must be
# read as a usual identifier, i.e. [A-Za-z_][A-Za-z0-9_]*[!?]? in regular
# expression.
#
# All symbols except ones which created by `Symbol.unique` are internalized
# to Amber system. In other words, symbols which have same name are always
# same object. Therefore, several functions for symbols are faster than
# ones for strings, e.g. `equal?`, `compare` and `hash`.

trait Symbol with {
    # The unique identification number.
    .id: alias(() -> prim.symbol_id(self))

    # Convert lower characters to upper ones.
    .upcase(): .to_s().upcase().to_sym()

    # Convert upper characters to lower ones.
    .downcase(): .to_s().downcase().to_sym()

    # Convert first character to uppercase and others to lowercase.
    .capitalize(): .to_s().capitalize().to_sym()
}

# Extend the comparison operator.
# NB: This function compares id-numbers of symbols, not lexicographic.
compare = prim.symbol_compare | compare

# Create a symbol, which is not internalized, with given name.
unique: prim.unique_symbol

prim.set_builtin_parent('Symbol, Symbol)
