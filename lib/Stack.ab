# Copyright (C) 2014 nineties
# $Id: Stack.ab 2014-03-17 16:04:35 nineties $

#= Stack =

trait Stack {
    require '.push, '.pop, '.top, '.size

    .empty?: alias(() -> .size == 0)

    # Push values from give iterable object.
    .push_values(seq): {
        for v in seq
            self.push(v)
        self
    }
    .push_values(seq, n @ Int): {
        for v in seq.take(n)
            self.push(v)
        self
    }

    # Remove `n' elements and return them as an array.
    .pop(n @ Int): {
        values: Array.new()
        for i in 0..n
            values.push(.pop())
        values
    }

    # Drop elements.
    .drop(): {
        .pop()
        self
    }
    .drop(n @ Int): {
        for i in 0..n
            self.pop()
        self
    }

    # Remove all elements from the stack.
    .clear(): {
        while (not .empty?)
            self.drop()
        self
    }

    # Duplicate `top'.
    .dup(): .push(.top())

    # Duplicate `top' `n' times.
    .dup(n @ Int): {
        for i in 0..n
            self.dup()
        self
    }

    # Rotate `n` elements by sliding `m' elements.
    .rotate(n @ Int, m @Int): {
        tmp: Array.new(n)
        for i in 0..n-1
            tmp[(i + m) % n] = .pop()
        for i in 1..n
            self.push(tmp[n-i])
        self
    }
}

### Linked list implementation ###
new('List):  `Stack{[]} with .parent = Trait.ListStack
new('Array): `Stack{!Array.new()} with .parent = Trait.ArrayStack
new(): new('Array)

trait ListStack {
    extend 'Stack
    .list:   alias(0)
    .size:   alias(() -> .list.size)
    .empty? = alias(() -> .list.empty?)

    .top(): {
        if .empty?
            throw `EmptyStack{}
        first(.list)
    }

    .push(v): {
        .list = cons(v, .list)
        self
    }

    .pop(): {
        value: first(.list)
        .list = rest(.list)
        value
    }
}

trait ArrayStack {
    extend 'Stack
    .array:   alias(0)
    .size:    alias(() -> .array.size)
    .empty? = alias(() -> .array.empty?)
    .push(v): .array.push(v)
    .pop():   .array.pop()
}
