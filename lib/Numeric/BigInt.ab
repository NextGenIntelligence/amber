# Copyright (C) 2014 nineties
# $Id: Numeric/BigInt.ab 2014-03-20 22:43:47 nineties $

import Numeric

#= Multi-precision integer. =
# This module defines numerical operations on multi-precision integers,
# we call it as 'bigint'. The head of bigints is `BigInt`.

INTEGER_MIN = -infinity
INTEGER_MAX =  infinity

#== Implicit type conversion ==
# Type conversion between objects and bigints is done by methods named
# `to_bint`. `to_bint` must returns a `BigInt` type value.

typecast(a, 'BigInt) = a.to_bint()
typejoin('Int, 'BigInt) = 'BigInt
typejoin('BigInt, 'Int) = 'BigInt
typejoin('Flot, 'BigInt) = 'Float
typejoin('BigInt, 'Float) = 'Float

# Extend numerical operations. See Numeric.ab for details.

uplus(n @ BigInt) = n
uplus  = Prim.bint_uplus  | uplus
uminus = Prim.bint_uminus | uminus
abs    = Prim.bint_abs | abs
add    = Prim.bint_add | add
sub    = Prim.bint_sub | sub
mul    = Prim.bint_mul | mul
div    = Prim.bint_div | div
mod    = Prim.bint_mod | mod
quo    = Prim.bint_quo | quo
divmod = Prim.bint_divmod | divmod
pow    = Prim.bint_pow | pow
powmod = Prim.bint_powmod | powmod
compare = Prim.bint_compare | compare

trait BigInt {
    .to_i():    self
    .to_f():    Prim.bint_to_float(self)
    .to_s():    Prim.bint_to_string(self)
    .to_bint(): self
}

Prim.set_builtin_parent('BigInt, Trait.BigInt)

Trait.Int.to_bint():   Prim.int_to_bint(self)
Trait.Float.to_bint(): Prim.float_to_bint(self)
