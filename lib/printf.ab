# Copyright (C) 2010 nineties
#
# $Id: printf.ab 2013-03-14 20:37:59 nineties $

module Std {
    module Printf {
        compile_printf(io, fmt, args):
            loop: ([], [], ls)
                    -> `Block{!Std::reverse(ls)}
                | (["%s", fs...], [s, ss...], ls)
                    -> loop(fs, ss, Std::cons(`print(!io, !s), ls))
                | (["%S", fs...], [s, ss...], ls)
                    -> loop(fs, ss, Std::cons(`print(!io, !s), ls))
                | (["%d", fs...], [s, ss...], ls)
                    -> loop(fs, ss, Std::cons(`print(!io, !s), ls))
                | (["%f", fs...], [s, ss...], ls)
                    -> loop(fs, ss, Std::cons(`pprint(!io, !s), ls))
                | (["%p", fs...], [s, ss...], ls)
                    -> loop(fs, ss, Std::cons(`pprint(!io, !s), ls))
                | ([f@String, fs...], args, ls)
                    -> loop(fs, args, Std::cons(`print(!io, !f), ls))
                | ([f, ...], _, _) -> { 
                        throw `Error{!LOCATION, !("argument for " + f.to_s + " is not found")} 
                    }
            loop(fmt, args, [])

        compile_format(fmt, args):
            `{
                io: StringIO::new()
                !compile_printf(\io, fmt, args)
                io.to_s
             }
    }

}

### Format string
# XXX: Not good implementation (should not define new syntax)

format_string_element
    ::= "%" [sSdXobpf] { $input }
      | "%" .   { throw `SyntaxError{!LOCATION,
                    "Invalid format string", !($0 + $1)}
                }
      | nospace( [^%\""]+ ) { $input.unescape }

format_string
    ::= nospace( ('"' format_string_element* '"') ) { $0[1] }

postfix_expr
    ::= "printf" "(" format_string ("," expr)* ")" 
        { Std::Printf::compile_printf(\stdout, $2, map(x->x[1], $3)) }
      | "printf" "(" expr "," format_string ("," expr)* ")"
        { Std::Printf::compile_printf($2, $4, map(x->x[1], $5)) }
      | "format" "(" format_string ("," expr)* ")"
        { Std::Printf::compile_format($2, map(x->x[1], $3))}
