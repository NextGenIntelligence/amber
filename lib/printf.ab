# Copyright (C) 2010 nineties
#
# $Id: printf.ab 2013-01-19 13:10:27 nineties $

module std {
    ### Format string
    # XXX: Not good implementation (should not define new syntax)

    format_string_element
        ::= "%" [sSdXobpf] { $input }
          | "%" .   { throw `SyntaxError{!LOCATION,
                        "Invalid format string", !($0 + $1)}
                    }
          | nospace( [^%\""]+ ) { $input.unescape }
    
    format_string
        ::= nospace( ('"' format_string_element* '"') ) { $0[1] }
    
    module printf {
        compile_printf(io, fmt, args):
            loop: ([], [], ls)
                    -> `Block{!std::reverse(ls)}
                | (["%s", fs...], [s, ss...], ls)
                    -> loop(fs, ss, std::cons(`print(!io, !s), ls))
                | (["%S", fs...], [s, ss...], ls)
                    -> loop(fs, ss, std::cons(`print(!io, !s), ls))
                | (["%d", fs...], [s, ss...], ls)
                    -> loop(fs, ss, std::cons(`print(!io, !s), ls))
                | (["%f", fs...], [s, ss...], ls)
                    -> loop(fs, ss, std::cons(`pprint(!io, !s), ls))
                | (["%p", fs...], [s, ss...], ls)
                    -> loop(fs, ss, std::cons(`pprint(!io, !s), ls))
                | ([f@String, fs...], args, ls)
                    -> loop(fs, args, std::cons(`print(!io, !f), ls))
                | ([f, ...], _, _)
                    -> throw `Error{!LOCATION, !("argument for " + f.to_s + " is not found")} 
            loop(fmt, args, [])

        compile_format(fmt, args):
            `{
                io: StringIO::new()
                !compile_printf(\io, fmt, args)
                io.to_s
             }
    }
    
    postfix_expr
        ::= "printf" "(" format_string ("," expr)* ")" 
            { printf::compile_printf(\stdout, $2, map($3, x->x[1])) }
          | "printf" "(" expr "," format_string ("," expr)* ")"
            { printf::compile_printf($2, $4, map($5, x->x[1])) }
          | "format" "(" format_string ("," expr)* ")"
            { printf::compile_format($2, map($3, x->x[1]))}
}
