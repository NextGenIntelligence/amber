# Copyright (C) 2014 nineties
# $Id: IO.ab 2014-03-05 18:32:41 nineties $

#= IO =
# Input and output stream.

trait InputStream {
    require '.read()
    require '.eos?

    # Read `n` bytes or until reach EOS and return them as a string.
    .read(n @ Int, eoserror=false): {
        oss: Prim.oss_new(false)
        for i in 1..n {
            if self.eof? {
                if eoserror
                    throw `IOError{"End of stream"}
                else
                    break
            }
            Prim.oss_print_string(oss, self.read())
        }
        Prim.oss_to_string(oss)
    }

    # Skip next one byte in the stream.
    .skip(): { self.read(); self }

    # Skip `n` bytes or until reach EOS.
    .skip(n @ Int, eoserror=false): {
        self.read(n, eoserror)
        self
    }
}

trait OutputStream {
    require '.write(s @ String)
}

#
#InputStreamTrait: `Trait{InputStream} with {
#    require(\put)
#}
#
#OutputStreamTrait: `Trait{OutputStream} with {
#    require(\next)
#    require(\get)
#
#    pprint(x) = Prim.pretty_print(self, x)
#    print(x)  = self.print_string(x.to_s())
#    puts(x)   = {
#        self.print(x)
#        self.print("\n")
#    }
#}
#
#InputFileStreamTrait: Prim.InputFileStreamTrait with {
#    parent        = InputStreamTrait
#    lookahead()   = Prim.lookahead(self)
#    read_char()   = Prim.read_char(self)
#    read_string() = Prim.read_string(self)
#    read_line()   = Prim.read_line(self)
#    read_int8()   = Prim.read_int8(self)
#    read_uint8()  = Prim.read_uint8(self)
#    read_int16()  = Prim.read_int16(self)
#    read_uint16() = Prim.read_uint16(self)
#    read_int32()  = Prim.read_int32(self)
#    read_uint32() = Prim.read_uint32(self)
#    read_int64()  = Prim.read_int64(self)
#    read_uint64() = Prim.read_uint64(self)
#    read_float()  = Prim.read_float(self)
#}
#
#OutputFileStreamTrait: Prim.OutputFileStreamTrait with {
#    parent          = OutputStreamTrait
#    print_string(v) = Prim.print_string(self, v)
#    write_int8(v)   = Prim.write_int8(self, v)
#    write_uint8(v)  = Prim.write_uint8(self, v)
#    write_int16(v)  = Prim.write_int16(self, v)
#    write_uint16(v) = Prim.write_uint16(self, v)
#    write_int32(v)  = Prim.write_int32(self, v)
#    write_uint32(v) = Prim.write_uint32(self, v)
#    write_int64(v)  = Prim.write_int64(self, v)
#    write_uint64(v) = Prim.write_uint64(self, v)
#    write_string(v) = Prim.write_string(self, v)
#}
#
#export InputStreamTrait OutputStreamTrait
#export InputFileStreamTrait OutputFileStreamTrait
#
#pprint(x):     stdout.pprint(x)
#print(x):      stdout.print(x)
#puts(x):       stdout.puts(x)
#read_char():   stdin.read_char()
#read_string(): stdin.read_string()
#read_line():   stdin.read_line()
#
#export pprint print puts read_char read_string read_line
