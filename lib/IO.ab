# Copyright (C) 2014 nineties
# $Id: IO.ab 2014-03-08 17:45:48 nineties $

#= IO =
# Input and output stream.

trait InputStream {
    require '.read(eoserror=false)
    require '.eos?

    # Read one byte.
    .read_char(eoserror): .read(eoserror)

    # Read characters until reach "\n", "\0" or EOS. The newline character
    # will be truncated.
    .read_line(eoserror): {
        oss: Prim.oss_new(true)
        while true {
            if self.eof? {
                if eoserror
                    throw `IOError{"End of stream"}
                else
                    break
            }
            c: self.read()
            if (c == "\n")
                break
            Prim.oss_print_string(oss, c)
        }
        Prim.oss_to_string(oss)
    }

    # Read `n` bytes or until reach EOS and return them as a string.
    .read(n @ Int, eoserror=false): {
        oss: Prim.oss_new(true)
        for i in 1..n {
            if self.eof? {
                if eoserror
                    throw `IOError{"End of stream"}
                else
                    break
            }
            Prim.oss_print_string(oss, self.read())
        }
        Prim.oss_to_string(oss)
    }

    # Skip next one byte in the stream.
    .skip(eoserror=false): { self.read(eoserror); self }

    # Skip `n` bytes or until reach EOS.
    .skip(n @ Int, eoserror=false): {
        self.read(n, eoserror)
        self
    }
}

trait OutputStream {
    require '.write(s @ String)

    # Convert an object `o` to a string by `to_s` and output it.
    print(o): self.write(o.to_s())

    # Ouptut an object `o` and newline.
    puts(o): { self.print(o); self.write("\n") }
}

#InputFileStreamTrait: Prim.InputFileStreamTrait with {
#    parent        = InputStreamTrait
#}
#
#OutputFileStreamTrait: Prim.OutputFileStreamTrait with {
#    parent          = OutputStreamTrait
#    print_string(v) = Prim.print_string(self, v)
#    write_int8(v)   = Prim.write_int8(self, v)
#    write_uint8(v)  = Prim.write_uint8(self, v)
#    write_int16(v)  = Prim.write_int16(self, v)
#    write_uint16(v) = Prim.write_uint16(self, v)
#    write_int32(v)  = Prim.write_int32(self, v)
#    write_uint32(v) = Prim.write_uint32(self, v)
#    write_int64(v)  = Prim.write_int64(self, v)
#    write_uint64(v) = Prim.write_uint64(self, v)
#    write_string(v) = Prim.write_string(self, v)
#}
#
#export InputStreamTrait OutputStreamTrait
#export InputFileStreamTrait OutputFileStreamTrait
#
#pprint(x):     stdout.pprint(x)
#print(x):      stdout.print(x)
#puts(x):       stdout.puts(x)
#read_char():   stdin.read_char()
#read_string(): stdin.read_string()
#read_line():   stdin.read_line()
#
#export pprint print puts read_char read_string read_line
