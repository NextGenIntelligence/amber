# Copyright (C) 2014 nineties
# $Id: IO.ab 2014-03-09 22:16:51 nineties $

#= IO =
# Input and output stream.

trait InputStream {
    require '.read(eoserror=false)
    require '.eos?

    # Read one byte.
    .read_char(eoserror): .read(eoserror)

    # Read characters until reach "\n", "\0" or EOS. The newline character
    # will be truncated.
    .read_line(eoserror): {
        oss: Prim.oss_new(true)
        while true {
            if self.eof? {
                if eoserror
                    throw `IOError{"End of stream"}
                else
                    break
            }
            c: self.read()
            if (c == "\n")
                break
            Prim.oss_print_string(oss, c)
        }
        Prim.oss_to_string(oss)
    }

    # Read `n` bytes or until reach EOS and return them as a string.
    .read(n @ Int, eoserror=false): {
        oss: Prim.oss_new(true)
        for i in 1..n {
            if self.eof? {
                if eoserror
                    throw `IOError{"End of stream"}
                else
                    break
            }
            Prim.oss_print_string(oss, self.read())
        }
        Prim.oss_to_string(oss)
    }

    # Skip next one byte in the stream.
    .skip(eoserror=false): { self.read(eoserror); self }

    # Skip `n` bytes or until reach EOS.
    .skip(n @ Int, eoserror=false): {
        self.read(n, eoserror)
        self
    }
}

trait OutputStream {
    require '.write(s @ String)

    # Convert an object `o` to a string by `to_s` and output it.
    .print(o): self.write(o.to_s())

    # Ouptut an object `o` and newline.
    .puts(o): { self.print(o); self.write("\n") }
}
