# Copyright (C) 2012 nineties
#
# $Id: list.ab 2013-02-15 16:56:26 nineties $

module Std {
    add(ls1@List, ls2@List): append(ls1, ls2)

    concat(ls@List): foldl(ls, [], append)

    concatMap(ls@List, fun@Function): concat(map(fun, ls))

    delete: ([], _) -> []
          | ([v, vs...], x)
            -> (x == v) ? delete(vs, x) : cons(v, delete(vs, x))

    uniq: []         -> []
        | [v, vs...] -> cons(v, uniq(delete(v, vs)))

    intersperse: ([], _)         -> []
               | ([a], _)        -> [a]
               | ([l, ls...], d) -> cons(l, cons(d, intersperse(ls, d)))
        
    each(ls@List): () -> {
        if (ls == []) return undef
        v: car(ls)
        ls = cdr(ls)
        v
    }

    reverse_each(ls@List): each(reverse(ls))
}
