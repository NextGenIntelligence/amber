# Copyright (C) 2012 nineties
#
# $Id: list.ab 2013-03-21 22:05:09 nineties $

module Std {
    add(ls1@List, ls2@List): append(ls1, ls2)

    concat(ls@List): foldl(append, [], ls)

    index(ls@List, v): {
        loop: ([], _) -> undef
            | ([x,...], i) when x == v -> i
            | ([_,xs...], i) -> loop(xs, i+1)

        loop(ls, 0)
    }

    delete: ([], _) -> []
          | ([v, vs...], x)
            -> (x == v) ? delete(vs, x) : cons(v, delete(vs, x))

    uniq: []         -> []
        | [v, vs...] -> cons(v, uniq(delete(v, vs)))

    intersperse: ([], _)         -> []
               | ([a], _)        -> [a]
               | ([l, ls...], d) -> cons(l, cons(d, intersperse(ls, d)))
        
    each(ls@List): () -> {
        if (ls == []) return undef
        v: car(ls)
        ls = cdr(ls)
        v
    }

    reverse_each(ls@List): each(reverse(ls))
}
