# Copyright (C) 2012 nineties
#
# $Id: random.ab 2013-03-20 12:18:02 nineties $

module Std {
    module impl {
        # Choose `n' elements from `seq' and move them to the beginning of `seq' by
        # Fisher-Yate's algorithm.
        fisher_yates(seq, n): {
            len: seq.size
            if (n > len)
                throw make Error {LOCATION, "The sequence doesn't have " + n + " elements"}
            for(i in 0..n-1) {
                j: i + rand(len-i)
                (seq[i], seq[j]) = (seq[j], seq[i])
            }
            seq
        }

    }

    # Choose one element randomly
    choose(seq): seq[rand(seq.size)]

    # Choose `n' element from `seq' randomly
    choose(seq, n@Int) when n >= 0: to_list(impl::fisher_yates(to_array(seq), n), 0, n-1)

    # Choose `n' element from `seq' randomly allowing repeatedly chosen
    # elements.
    choose(seq, n@Int, \repeat) when n >= 0: List::new(n, _ -> choose(seq))

    # Shuffle `seq' randomly by Fisher-Yates's algorithm.
    shuffle(seq):      impl::fisher_yates(copy(seq), seq.size)
    shuffle(seq@List): to_list(impl::fisher_yates(to_array(seq), seq.size))
}
