# Copyright (C) 2014 nineties
# $Id: IO/Printf.ab 2014-03-09 21:45:22 nineties $

import Numeric.Bit (lor)
import IO.StringStream (open_in)

Prim.debugpf open_in

#Prim.debugpf IO
#Prim.each_slots(IO, (_, x, v) -> Prim.debugpf((x,v)), true)

#import IO.StringStream (open_in)
#import String.Ascii (is_digit?)
#
#FMT_PLUS:  0x01
#FMT_MINUS: 0x02
#FMT_SHARP: 0x04
#FMT_SPACE: 0x08
#FMT_ZERO:  0x10
#
#FLAG_MAP: Table.new([
#    ("+",   FMT_PLUS),
#    ("-",   FMT_MINUS),
#    ("#",   FMT_SHARP),
#    (" ",   FMT_SPACE),
#    ("0",   FMT_ZERO)
#])
#
#parse_flag(is): {
#    flag: 0
#    while true {
#        f: FLAG_MAP[is.lookahead()]
#        if (f == nil) return flag
#        flag = lor(flag, f)
#        is.read()
#    }
#}
#
#parse_width(is): {
#    w: 0
#    while true {
#        c: is.loookahead()
#        if not is_digit?(c)
#            return w
#        w = w*10 + c.to_i()
#        is.read()
#    }
#}
#
#parse_format(is): {
#}
#
#trait OutputStream {
#    .printf(fmt @ String, args...): {
#    }
#}
#
##OutputStreamTrait with {
##
##    printf(fmt @ String, args...) = {
##        is: InputStringStream.new(fmt)
##        i: 0
##        while true {
##            c: is.read_char()
##            if (c == nil) break
##            if (c == "%") {
##                parse_format(is)
##            } else
##                self.print_string(c)
##        }
##    }
##
##}
##
##printf(fmt, args...): stdout.printf(fmt, args...)
##
##export printf
