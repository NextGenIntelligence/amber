# Copyright (C) 2014 nineties
# $Id: Numeric.ab 2014-02-05 01:18:29 nineties $

binary_coerce(a, b): undef
binary_coerce(a, b @ Float): (a.to_f(), b)
binary_coerce(a @ Float, b): (a, b.to_f())

perform_binary_operation(a, b, fun, op): {
    t: binary_coerce(a, b)
    if (t == undef)
        throw `LogicError{!LOCATION,
            "Undefined binary operation", !op, !a, !b}
    fun(t[0], t[1])
}

add(a, b): perform_binary_operation(a, b, add, \add)
sub(a, b): perform_binary_operation(a, b, sub, \sub)
mul(a, b): perform_binary_operation(a, b, mul, \mul)
div(a, b): perform_binary_operation(a, b, div, \div)
mod(a, b): perform_binary_operation(a, b, mod, \mod)
pow(a, b): perform_binary_operation(a, b, pow, \pow)

compare(a, b): perform_binary_operation(a, b, compare, \compare)
less_than?(a, b):     compare(a, b) < 0
greater_than?(a, b):  compare(a, b) > 0
less_equal?(a, b):    compare(a, b) <= 0
greater_equal?(a, b): compare(a, b) >= 0
less_than? = Prim.int_less_than? | less_than?
greater_than? = Prim.int_greater_than? | greater_than?
less_equal? = Prim.int_less_equal? | less_equal?
greater_equal? = Prim.int_greater_equal? | greater_equal?

uplus(a): a
uminus(a): -1 * a

# Integer and Floating-point
INTEGER_MIN: Prim.INTEGER_MIN
INTEGER_MAX: Prim.INTEGER_MAX

uplus = Prim.int_uplus | Prim.float_uplus | uplus
uminus = Prim.int_uminus | Prim.float_uminus | uminus
add = Prim.int_add | Prim.float_add | add
sub = Prim.int_sub | Prim.float_sub | sub
mul = Prim.int_mul | Prim.float_mul | mul
div = Prim.int_div | Prim.float_div | div
mod = Prim.int_mod | Prim.float_mod | mod
pow = Prim.int_pow | Prim.float_pow | pow
shiftL: Prim.int_shiftL
shiftR: Prim.int_shiftR

compare = Prim.int_compare | Prim.float_compare | compare
equal?  = Prim.float_equal? | equal?

infinity: Prim.infinity

export uplus uminus add sub mul div mod pow
export shiftL shiftR
export compare less_than? greater_than? less_equal? greater_equal? equal?
export INTEGER_MIN INTEGER_MAX
export infinity

# traits
NumericTrait: `Trait{Numeric}
IntegerTrait: `Trait{Integer}

IntTrait: Prim.IntTrait
FloatTrait: Prim.FloatTrait

IntegerTrait.parent = NumericTrait
IntTrait.parent = IntegerTrait
FloatTrait.parent = NumericTrait

IntTrait.to_i(): self
IntTrait.to_f(): Prim.int_to_float(self)
IntTrait.to_s(): Prim.int_to_string(self)

FloatTrait.to_i(): Prim.float_to_int(self)
FloatTrait.to_f(): self
FloatTrait.to_s(): Prim.float_to_string(self)

export NumericTrait IntegerTrait IntTrait FloatTrait

min(a, b): a < b ? a : b
max(a, b): a < b ? b : a

export min max

