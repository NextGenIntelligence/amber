# Copyright (C) 2012 nineties
#
# $Id: struct.ab 2013-02-02 01:20:04 nineties $

# Declaration:
#
# struct Foo {
#     name1:   default_value1
#     name2:   default_value2
#     ...
# }
#
# or
#
#   Foo{ name1: default_value1, name2: default_value2, ... }
#
# Usage:
#
#   Foo{ name1: value1, name2: value2, ... }  # arbitrary order
#

module std {
    module impl {
    }

    struct_field ::= symbol ":" expr   { ($0, $2) }
    struct_fields ::= [multiline] "{" delimited(struct_field, ",") "}"
                      { $1 }
                    | [multiline] "{" aligned(struct_field) "}"
                      { $1 }

    struct_declaration
        ::= "struct" symbol struct_fields
            { `DefineVariable{!$1, NewStruct{!$1, !$2}} }
          | "struct" qualified_symbol struct_fields
            { `DefineVariable{!$1, NewStruct{!$1[1], !$2}} }

    struct_creation
        ::= [multiline] qualified_symbol struct_fields
            { `CreateStruct{!$0, !$1} }

    statement ::= struct_declaration
    postfix_expr ::= struct_creation


    mother_structure: \Struct{
        nil,
        structure,
        [name, fields, initial_values],
        [nil, nil, nil]
    }
    #mother_structure[0] = mother_structure

    NewStruct{name, fields} => {
        (names, values): unzip(fields)
        `MakeNode{\Struct, [\!mother_structure, \!name, \!names, !values]}
    }

    CreateStruct{struct, fields} => {
        obj:  gensym()
        assign: map(fields, ((x, v)) -> `Assign{FieldGet{!obj, !x}, !v})
        `Block{[
            DefineVariable{!obj, init_struct(!struct)},
            Seq{!assign},
            !obj
            ]}
    }
}
