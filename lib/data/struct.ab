# Copyright (C) 2012 nineties
#
# $Id: struct.ab 2013-01-25 04:57:57 nineties $

### Simple struct declaration
# 
# Declaration:
#
#   struct Foo
#   struct Foo, Bar, ..
#
# Usage:
#
#   Foo{arg0, arg1, ...}
#
### Declaration with fields
#
# Declaration:
#
# struct Foo {
#     name1:   default_value1
#     name2:   default_value2
#     ...
# }
#
# Usage:
#
#   Foo{ name: value, name: value, ... }    # arbitrary order
#

module std {
    module impl {
        simple_decl_single(sym):
            `(!MakeNode{sym, [\(args...)]} => `MakeNode{\!!sym, !!\!args})
        gen_simple_decls(syms): `Seq{!map(syms, simple_decl_single)}


        gen_create_struct(head, names, values):
            `(!MakeNode{head, [\(args...)]} => `{
                obj: MakeNode{\!!head, !!values}
                !!\Seq{!map(args, (Field{x,v} -> `Apply{!("set_" + x).to_sym, [obj, !v]}))}
                obj
            })

        gen_getters(_, head, []): []
        gen_getters(i, head, [x,xs...]): {
            getter: `DefineFunction{!x, Lambda{Domain{obj, !head}, _at(obj, !i)}}
            cons(getter, gen_getters(i+1, head, xs))
        }

        gen_setters(_, head, []): []
        gen_setters(i, head, [x,xs...]): {
            setter: `DefineFunction{!("set_" + x).to_sym, Lambda{[Domain{obj, !head}, val], _store(obj, !i, val)}}
            cons(setter, gen_setters(i+1, head, xs))
        }

        gen_struct_decl(head, fields): {
            names:  map(fields, f -> f[0])
            values: map(fields, f -> f[1])

            code1: gen_getters(0, head, names)
            code2: gen_setters(0, head, names)
            code3: gen_create_struct(head, names, values)
            `Seq{[Seq{!code1}, Seq{!code2}, !code3]}
        }
    }

field_declaration
    ::= symbol ":" expr
        { `Field{!$0, !$2} }

field_declarations
    ::= [multiline] "{" aligned(field_declaration) "}"
        { $1 }

struct_declaration
    ::= "struct" symbol field_declarations
        { impl::gen_struct_decl($1, $2) }
      | "struct" delimited1(symbol, ",")
        { impl::gen_simple_decls($1) }

struct_creation
    ::= [multiline] symbol "{" delimited(field_declaration, ",") "}"
        { MakeNode{$0, $2} }
      | [multiline] qualified_symbol "{" delimited(field_declaration, ",") "}"
        { `Scoped{!eval($0[0]), !MakeNode{$0[1], $2}} }

statement ::= struct_declaration
postfix_expr ::= struct_creation

}
