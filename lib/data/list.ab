# Copyright (C) 2012 nineties
#
# $Id: list.ab 2012-11-21 16:55:54 nineties $

module std {
    head: car
    tail: cdr

    add(list1@List, list2@List, _): append(list1, list2)
    concat(list@List): foldl(list, [], append)
    concatMap(list@List, fun@Function): concat(map(list, fun))

    delete([], _): []
    delete([v, vs...], x): cons(v, delete(vs, x))
    delete([v, vs...], x) where x == v : delete(vs, x)

    uniq([]): []
    uniq([v, vs...]): cons(v, uniq(delete(v, vs)))

    intersperse([l, ls...], d): l.cons(d).cons(intersperse(ls, d))
    intersperse([a], _): [a]
    intersperse([], _): []
        
    each(list@List): {
        () -> {
            if (list == []) return undefined
            v: car(list)
            list = cdr(list)
            v
        }
    }
}
