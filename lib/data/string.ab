# Copyright (C) 2010 nineties
#
# $Id: string.ab 2012-12-06 16:56:15 nineties $

module std {
    ### Format string
    
    format_string_element
        ::= "%s"    { \String }
          | "%S"    { \Symbol }
          | "%d"    { \Decimal }
          | "%x"    { \Hexadecimal }
          | "%o"    { \Octal }
          | "%b"    { \Binary }
          | "%" .   { throw `SyntaxError{!LOCATION,
                        "Invalid format string", !($0 + $1)}
                    }
          | nospace( [^%\""]+ ) { $input.unescape }
    
    format_string
        ::= nospace( '"' format_string_element* '"' ) { $0[1] }
    
    module String {
        compile_printf io fmt args:
            loop: [] [] ls
                    -> `Block{!ls.reverse}
                | [f@String, fs...] args ls
                    -> loop fs args (cons `(print !io !f) ls)
                | [\String, fs...] [s, ss...] ls
                    -> loop fs ss (cons `(print !io !s) ls)
                | [\Symbol, fs...] [s, ss...] ls
                    -> loop fs ss (cons `(print !io !s) ls)
                | [\Decimal, fs...] [s, ss...] ls
                    -> loop fs ss (cons `(print !io !s) ls)
            loop fmt args []

        compile_format fmt args:
            `{
                io: StringIO::new()
                !(compile_printf \io fmt args)
                io.to_s
             }
    }
    
    # XXX: Not good implementation (should not define new syntax)
    postfix_expr
        ::= "printf" format_string quote_expr* 
            { String::compile_printf \stdout $1 $2 }
          | "printf" quote_expr format_string quote_expr*
            { String::compile_printf $1 $2 $3 }
          | "format" format_string quote_expr*
            { String::compile_format $1 $2 }
}
