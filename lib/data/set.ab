# Copyright (C) 2012 nineties
#
# $Id: set.ab 2012-11-23 13:24:17 nineties $

# XXX: Temporary implementation (not fast)

module std {
    struct Set {
        elems: []
    }

    module Set {
        new(): Set{}
        from_list(ls@List): {
            s: new()
            for (v: ls) s.push(v)
            s
        }
    }

    size(s@Set):  s.elems.size
    at(s@Set, i): s.elems[i]
    push(s@Set, v): {
        if (not s.elems.contain(v))
            s.elems = cons(v, s.elems)
        s
    }
    delete(s@Set, v): {
        s.elems = s.elems.delete(v)
        s
    }
    union(s1@Set, s2@Set): {
        s: Set::new()
        for(v: s1) s.push(v)
        for(v: s2) s.push(v)
        s
    }
    each(set@Set): {
        i: 0
        n: set.size
        () -> {
            if (i >= n) return undef
            v: set[i]
            i += 1
            v
        }
    }

    # Macro
    Set{elems...} => `Set::from_list(!elems)
}
