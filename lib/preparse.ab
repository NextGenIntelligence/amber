# Copyright (C) 2014 nineties
# $Id: preparse.ab 2014-04-24 21:31:59 nineties $

import sys

if ARGV.empty? {
    # Pre-parse standard libraries.
    stderr.puts("Generating pre-parsed standard libraries...")

    FILES := ["boot.ab", "compile.ab", "interpret.ab", "base.ab",
              "object_system.ab", "module.ab", "symbol.ab", "parser.ab",
              "numeric.ab", "numeric/algorithm.ab", "numeric/bit.ab",
              "numeric/random.ab", "string.ab", "string/ascii.ab",
              "iterable.ab", "tuple.ab", "list.ab", "math.ab", "table.ab",
              "array.ab", "io.ab", "sys.ab", "function.ab", "template.ab",
              "pretty_print.ab", "interactive.ab", "syntax/parse.ab",
              "syntax/print.ab", "symbolic/analysis.ab",
              "symbolic/basic.ab", "symbolic/simpl.ab", "algebra.ab",
              "algebra/data.ab", "algebra/euclid.ab",
              "algebra/rational.ab", "algebra/linalg.ab",
              "algebra/syntax.ab", "CAST.ab", "CAST/syntax.ab"]

    for f in FILES {
        new_f := f ++ "c"
        if sys::mtime(new_f) > sys::mtime(f)
            continue
        inp  := io::open_in(f)
        outp := io::open_out(new_f)
        try {
            stderr.puts(f ++ " => " ++ f ++ "c")
            p := Parser.new(inp, amber::syntax)
            while syntax::toplevel(p)
                outp.puts(fullform(p.tree))
            if not p.eof?
                throw `SyntaxError{!p.error_string}
            tree := parser::parse(amber, inp)
        } catch e -> {
            inp.close()
            outp.close()
            throw e
        }
        inp.close()
        outp.close()
    }
}
