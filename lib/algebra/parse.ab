# Copyright (C) 2014 nineties
# $Id: algebra/parse.ab 2014-04-04 02:51:33 nineties $

#= Parser for computer algebra system =

syntax: syntax.new() with {
    .add_reserved_word "not", "and", "or", "mod"

    .variable ::= identifier
    .constant ::= float
                | decimal
    .primary_expr
        ::= variable
          | constant
          | "(" expr ")"   { $1 }
          | "[" delimited(expr, ",") "]"   { $1 }

    .postfix_expr
        ::= postfix_expr "(" delimited(expr, ",") ")"
            { node('Apply, $0, $2) }
          | postfix_expr "[" delimited(expr, ",") "]"
            { node('Subscript, $0, $2) }
          | postfix_expr "!"
            { node('Apply, 'factorial, [$0]) }
          | primary_expr "^" postfix_expr
            { node('Power, $0, $2) }
          | primary_expr

    .prefix_expr
        ::= "+" postfix_expr          { `UnaryPlus{!$1} }
          | "-" !decimal postfix_expr { `UnaryMinus{!$2} }
          | 'not postfix_expr         { `Not{!$1} }
          | postfix_expr

    .multiplicative_expr
        ::= multiplicative_expr "*" prefix_expr  { `Mul{!$0, !$2} }
          | multiplicative_expr "/" prefix_expr  { `Quo{!$0, !$2} }
          # Non-commutative multiplication
          | multiplicative_expr "." prefix_expr  { `NcMul{!$0, !$2} }
          | multiplicative_expr 'mod prefix_expr { `Mod{!$0, !$2} }
          | prefix_expr

    .additive_expr
        ::= additive_expr "+" multiplicative_expr   { `Add{!$0, !$2} }
          | additive_expr "-" multiplicative_expr   { `Sub{!$0, !$2} }
          | multiplicative_expr

    .relational_expr
        ::= relational_expr "<"  additive_expr { `Lt{!$0, !$2} }
          | relational_expr ">"  additive_expr { `Gt{!$0, !$2} }
          | relational_expr "<=" additive_expr { `Le{!$0, !$2} }
          | relational_expr ">=" additive_expr { `Ge{!$0, !$2} }
          | relational_expr "="  additive_expr { `Eq{!$0, !$2} }
          | relational_expr "/=" additive_expr { `Ne{!$0, !$2} }
          | additive_expr

    .and_expr ::= relational_expr 'and and_expr { `And{!$0, !$2} }
                | relational_expr

    .or_expr ::= relational_expr 'or or_expr { `Or{!$0, !$2} }
               | and_expr

    .expr ::= or_expr

    .stmt ::= variable ":" assign_expr
              { `DefVar{!$0, !$2} }
            | variable "(" delimited(variable, ",") ")" ":=" assign_expr
              { `DefFun{!$0, !$2} }
}
