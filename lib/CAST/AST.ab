# Copyright (C) 2014 nineties
# $Id: CAST/AST.ab 2014-03-16 08:44:55 nineties $

import Numeric.Bit as Bit

#= Abstract syntax tree for CAST =

#== Types ==
#=== Primitive types ===
# A primitive type is just a symbol. We consulted primitive types of
# D language (http://dlang.org/type).

PRIM_TYPES: [
    'void,      # no type

    'char,      # unsigned 8-bit character
    'wchar,     # unsigned 16-bit character
    'dchar,     # unsigned 32-bit character

    'bool,      # boolean type
    'byte,      # signed 8-bit integer
    'ubyte,     # unsigned 8-bit integer
    'short,     # signed 16-bit integer
    'ushort,    # unsigned 16-bit integer
    'int,       # signed 32-bit integer
    'uint,      # unsigned 32-bit integer
    'long,      # signed 64-bit integer
    'ulong,     # unsigned 64-bit integer
    'float,     # 32-bit floating point number
    'double,    # 64-bit floating point number
    'real       # largest floating point number implemented in hardware
]

#== Derived types ==
# * PointerType{base_type}
#
# * EnumType{name, fields}
# Where `fields` is a list of `EnumField{name, value}`. The `value` must
# be a constant literal.
#
# * ArrayType{elment_type, length}
# Where `length` is a constant natural number represents the number of
# elements. We restrict the length of an array to a constant number.
#
# * FunctionType{return_type, params, spec}
# Where `params` is a list of `Param{type, name}`, `spec` contains
# bit-flags `FUNC_SPEC.inline` and `FUNC_SPEC.const`.

FUNC_SPEC: Bit.flags('inline, 'const)

#== Aggregate types ==
# * StructType{name}
# * UnionType{name}

#== Qualifiers ==
# * QualifiedType{base, qual}
# Where `qual` contains bit-flags `QUALIFIER.const` and `QUALIFIER.volatile`.
QUALIFIER: Bit.flags('const, 'volatile)
