# Copyright (C) 2010 nineties
# $Id: module.ab 2014-07-20 17:49:56 nineties $

#= Module system =
#== Basics ==
# Amber provides very simple module management system that is
# a module is just a usual object and a module-variable is just a slot
# of the module-object. The hierarchy of modules can be realized by means
# of `parent` slot. For example, when objects `A` and `B` are modules
# and `B.parent == A`, we can think `B` as a direct submodule of `A`.
# If `A` has a slot `x`, i.e. a module-variable, and `B` doesn't, `B.x`
# is equal to `A.x`.
#
# The hierarchy of modules reflects the hierarchy of directories where
# scripts are putted in. Here, Amber treats directories specified by the
# variable `LOAD_PATH` as the root of directories.
# The root of the module hierarchy is the module named `Amber`, and for a
# script 'A/B/C.ab' a module `Amber.A.B.C` is assigned.
#
# All along the lines of execution of Amber programs, one module-object
# is specified as a global-module. And global variables are actually
# module-variables of the global module. When you execute a script `AAA.ab`
# in a shell by `$ amber AAA.ab`, the global-module in the script is
# `Amber.AAA`.
#
#== Import Module ==
# Amber executes a statement `import A.B.C` by following steps:
#   1. Lookup a file 'A/B/C.ab'. If it does not exist, throw a `NotFound`
#     exception.
#   2. When the file is already loaded, goto 6.
#   3. Switch global-module to `A.B.C`.
#   4. Execute the script.
#   5. Switch global-module to the former.
#   6. Copy designated variables from `A.B.C` to the global-module.
#
# In the step 6, any variable will not be copied by default.
# That is, when you import module `A` by `import A`, you have to specify
# `A` explicitly to access variables of `A`, e.g. `A.x`.
#
# You can specify variables to be copied in the following syntax.
#   * `import A`: Do not copy any variables.
#   * `import A (x,y,z)`: Copy `A.x`, `A.y` and `A.z`.
#   * `import A hiding (x,y,z)`: Copy every variables but `x`, `y` and `z`.
#   * `import A (*)`: Copy every variables which is visible in `A`.

module := enter_module('module, true)

copy_table(dst, src) := {
    prim.copy_slots(dst, src, false)
    dst
}

clear_table(tbl) := {
    o := tbl._owner_
    prim.remove_slots(tbl, false)
    tbl._owner_ = o
    nil
}

copy_variables(mod, 'All)
    := prim.each_slots(mod.variables,
        (_, x, v) -> {
            if (x != 'parent and x != '_owner_)
                prim.define_variable(x, v)
        },
        false
        )

copy_variables(mod, Hiding{vars})
    := prim.each_slots(mod.variables,
        (_, x, v) -> {
            if (x != 'parent and x != '_owner_ and
                    not prim.list_include?(x, vars))
                prim.define_variable(x, v)
        },
        false
        )

copy_variables(mod, vars @ List)
    := prim.list_foreach(x -> prim.define_variable(x,
        prim.get_slot(mod.variables, x, true, false, true)), vars)

expand_import([], _, _) := nil
expand_import([M,rest...], path, rec) := {
    if (not prim.equal?(path, ""))
        path = prim.string_add(path, "/")
    path = prim.string_add(path, prim.symbol_to_string(M))
    file := prim.string_add(path, ".ab")

    loadstmt := case rest of
          [] -> `load(!file)
        | _  -> `( if prim.loadable?(!file) load(!file) )

    `seq {
        enter_module('!M, !rec)
        !loadstmt
        !expand_import(rest, path, false)
        exit_module()
    }
}

buildpath(mods) := prim.string_add(
    prim.string_join(prim.list_map(prim.symbol_to_string, mods), "/"),
    ".ab")

exit_module()

class Module{name} with {
    .defined?(x @ Symbol) := prim.has_slot?(self.variables, x, true)

    .get(x)    := self.variables.get(x)
    .set(x, v) := self.variables.set(x, v)
    .delete(vars...) := {
        tbl := self.variables
        prim.list_map(x -> prim.remove_slot(tbl, x, true), vars)
        nil
    }

    .import_vars(from, vars...) := {
        to := self
        prim.list_map(x -> to.set(x, from.get(x)), vars)
        nil
    }

    .push() := {
        tbl := node('VariableTable)
        module::copy_table(tbl, self.variables)
        self.variables.parent = tbl
        nil
    }

    .pop() := {
        tbl := self.variables.parent
        if tbl._owner_ != self
            throw 'Error{"mismatch of push and pop"}
        self.variables = self.variables.parent
        nil
    }

    .clear() := {
        module::clear_table(self.variables)
        nil
    }
}

# Set parents of already created modules manually.
amber.parent = Module

macro(e @ Import{mods, asname, option}) := {
    mod := prim.list_foldl1((l, r) -> `Var{!l, !r}, mods)
    import_stmt := case option of
          Some{option}
            -> `seq {
                    !module::expand_import(mods, "", true)
                    module::copy_variables(!mod, '!option)
                    !mod
                }
        | nil
            -> `seq {
                    !module::expand_import(mods, "", true)
                    !mod
                }
        | _
            -> { throw `UnknownExpression{!e} }

    case asname of
        Some{name}  -> `Define{!name, !import_stmt}
        | nil       -> import_stmt
}

macro(Import{mods}) := macro(`Import{!mods, nil, nil})
