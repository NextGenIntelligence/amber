# Copyright (C) 2014 nineties
# $Id: random.ab 2014-04-26 19:53:27 nineties $

import math

# Initialize random seed.
srand() := prim.srand()

# Initialize random seed by `seed`.
srand(seed) := prim.srand_with_value(seed)

# Return random floating number in range [0,1).
rand() := prim.rand_uniform()

# Return random floating number in range [0,v).
rand(v @ Float) := prim.rand_float(v)

# Return random integer in range [0,n).
rand(n @ Int) := prim.rand_int(n)

# Return random integer in range [a,b)
rand(a @ Int, b @ Int) := a + rand(b-a)

# Choice one element from `sequence` randomlly.
choice(sequence) := sequence[rand(sequence.length)]

# Sampling from uniform distribution over range [a, b)
uniform(a, b) := a + rand() * (b-a)
uniform()     := rand()

# Sampling from standard normal distribution N(0, 1)
# by Box-Muller's method.
normal() := {
    x := rand()
    y := rand()
    math::sqrt(-2*math::log(x))*math::cos(2*math::pi*y)
}

# Sampling from normal distribution N(mu, sigma^2)
normal(mu, sigma) := mu + sigma * normal()

# Sampling from discrete distribution [p1,p2,...,pn]
discrete(dist) := {
    r := rand()
    i := 0
    s := 0
    for v in dist {
        s += v
        return i if r <= s
        i += 1
    }
    i-1
}
