# Copyright (C) 2014 nineties
# $Id: String.ab 2014-02-26 16:09:45 nineties $

#= Strings. =
# The representation of strings are internally null-terminated sequence
# of 8-bit ascii characters. Multibyte characters are not supported.
# Amber does not have any specific type of objects for 'characters'.
# We treat a characters as a string of length one.
#
# Amber's string objects are immutable. So several operations such as
# concatenation of many strings are not efficient. Use `StringIO` module
# for such operations.

typecast(a, 'String) = a.to_s()
typejoin(a, 'String) = 'String
typejoin(b, 'String) = 'String

# Concatination of two strings.
# ----
# > "Hello" + " " + "World"     # => "Hello World"
# ----

add = Prim.string_add | add

trait String {
    # Number of characters.
    # ----
    # > "Hello World".length    # => 21
    # ----
    .length: alias(() -> Prim.string_length(self))
    .size:   alias(() -> Prim.string_length(self))

    # `i`-th character.
    .at(i): Prim.string_at(self, i)

    # `true` when the string contains `s` as a substring.
    .contain?(s): Prim.string_contain?(self, s)

    # Convert special ascii characters to escape-sequences.
    # ----
    # "Hello World\n".escape()      # => "Hello World\\n"
    # ----
    .escape(): Prim.string_escape(self)

    # Convert escape-sequences to corresponding characters.
    # ----
    # "Hello World\\n".unescape()   # => "Hello World\n"
    # ----
    .unescape(): Prim.string_unescape(self)

    # Split the string by delimiter string `d` and return a list.
    # ----
    # "Hello World".split("o")      # => ["Hell", " W", "rld"]
    # ----
    .split(d): Prim.string_split(self, d)

    .to_code(): Prim.char_to_code(self)
    .to_s(): self
    .to_i(): Prim.string_to_int(self)
    .to_f(): Prim.string_to_float(self)
}

Trait.Int.to_char(): Prim.code_to_char(self)

Prim.set_builtin_parent('String, Trait.String)
