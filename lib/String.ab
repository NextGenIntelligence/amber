# Copyright (C) 2014 nineties
# $Id: String.ab 2014-02-15 21:16:29 nineties $

import Numeric
import Trait

Numeric.join_numeric_type(a, b @ String): \String
Numeric.join_numeric_type(a @ String, b): \String
upcast(a, \String): a.to_s()

add    = Prim.string_add | add
equal? = Prim.string_equal? | equal?
hash   = Prim.string_hash | hash

trait String {
    length:      alias(() -> Prim.string_length(self))
    size:        alias(() -> Prim.string_length(self))
    at(i):       Prim.string_at(self, i)
    contain?(s): Prim.string_contain?(self, s)
    unescape():  Prim.unescape(self)
    split(sep):  Prim.split(self, sep)
    to_code():   Prim.char_to_code(self)
    to_s():      self
    to_i():      Prim.string_to_int(self)
    to_f():      Prim.string_to_float(self)
}

Trait.Int.to_char(): Prim.code_to_char(self)

Prim.set_parents(\String, Trait.String)

export add equal?
