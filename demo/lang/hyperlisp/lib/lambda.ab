# Copyright (C) 2012 nineties
#
# $Id: hyperlisp/symbol.ab 2013-01-28 03:32:25 nineties $

# Reference
#   Masahiko Sato and Masami Hagiya: HyperLisp, Algorithmic Languages
#   (J.W. de Bakker and J.C. van Vliet eds.), North-Holland, 1981,
#   pp.251-269.

import core

module HyperLisp {
    # Metaliteral
    hl_metaliteral ::= nospace( ([A-Z][A-Za-z0-9]*) )
                       { `Meta{!$input.to_sym} }

    # pprint(io, Meta{x}): pprint(io, x)

    hl_simple_expr ::= hl_metaliteral
    hl_expr ::= hl_simple_expr "=" hl_simple_expr
            { `Eq{!$0, !$2} }
          | "." hl_expr
            { `Whole{!$1} }

    # Rename variables to avoid name conflict.
    rename(sym): ("hyperlisp_" + sym).to_sym

    # Create sexp which represents the position of metaliteral X
    point: (X, X)      -> one
         | (Y@Meta, X) -> zero
         | (z, X) where z == zero -> zero
         | (Eq{x, y}, X) -> {
               px: point(x, X)
               py: point(y, X)
               if (px == zero) return py
               if (py == zero) return px
               throw `DuplicatedParameter{!X}
           }
         | (x, X) where Head{x.car} == \Whole -> { # [.x] or (.x)
               point(x.car[0], X)
           }
         | (x, X) -> { # [x,y,z] or (x,y,z)
               px:  point(x.car, X)
               pxs: point(x.cdr, X)
               if (px != zero and pxs != zero)
                   throw `DuplicatedParameter{!X}
               cons(px, pxs)
           }

    compile_as_sexp
        : (p, z) where z == zero -> (zero, zero)
        | (p, X@Meta) -> {
              pos: point(p, X)
              if (pos == zero) return (zero, X)
              (snoc(pos, zero), zero)
          }
        | (p, x) where atom(x) -> {
              (p1, b1): compile_as_sexp(p, x.car)
              (p2, b2): compile_as_sexp(p, x.cdr)
              (cons(p1, p2), snoc(b1, b2))
          }
        | (p, x) -> {
              (p1, b1): compile_as_sexp(p, x.car)
              (p2, b2): compile_as_sexp(p, x.cdr)
              (cons(p1, p2), cons(b1, b2))
          }

    compile_arg: (p, x) where p == zero -> zero
               | (p, x) where p == one  -> x
               | (p, x) -> {
                     p1: compile_arg(p.car, `(!x).car)
                     if (p1 != zero) return p1
                     return compile_arg(p.cdr, `(!x).cdr)
                 }

    compile_eval
        : (p, x) where atom(p) -> compile_arg(p.car, \x)
        | (p, x@Meta)   -> `\!x[0]
        | (p, x@Symbol) -> `\!x
        | (p, x) where x.car == \cond
            -> compile_cond(p.cdr, x.cdr)
        | (p, x) -> compile_apply(p, x, atom(x))

    compile_evlis
        : (p, x) where atom(p) -> compile_arg(p.car, \x)
        | (p, x) where x == zero -> `\!zero
        | (p, x) -> `cons(!compile_eval(p.car, x.car),
                          !compile_evlis(p.cdr, x.cdr))

    compile_apply(p, x, \true):
        `(!compile_obj(p.car, x.car))(!compile_obj(p.cdr, x.cdr))
    compile_apply(p, x, \false):
        `(!compile_obj(p.car, x.car))(!compile_evlis(p.cdr, x.cdr))
    compile_apply(p, x, f) where x.car == \cons: {
        a: compile_(p.cdr.car, x.cdr.car, f)
        b: compile_(p.cdr.cdr.car, x.cdr.cdr.car, f)
        `cons(!a,!b)
    }
    compile_apply(p, x, f) where x.car == \snoc: {
        a: compile_(p.cdr.car, x.cdr.car, f)
        b: compile_(p.cdr.cdr.car, x.cdr.cdr.car, f)
        `snoc(!a, !b)
    }
    compile_apply(p, x, f) where x.car == \car: {
        a: compile_(p.cdr.car, x.cdr.car, f)
        `at(!a, 0)
    }
    compile_apply(p, x, f) where x.car == \cdr: {
        a: compile_(p.cdr.car, x.cdr.car, f)
        `at(!a, 1)
    }
    compile_apply(p, x, f) where x.car == \eq: {
        a: compile_(p.cdr.car, x.cdr.car, f)
        b: compile_(p.cdr.cdr.car, x.cdr.cdr.car, f)
        `((!a == !b) ? \!one : \!zero)
    }
    compile_apply(p, x, f) where x.car == \null: {
        a: compile_(p.cdr.car, x.cdr.car, f)
        `((!a == !zero) ? \!one : \!zero)
    }
    compile_apply(p, x, f) where x.car == \atom: {
        a: compile_(p.cdr.car, x.cdr.car, f)
        `(atom(!a) ? \!one : \!zero)
        }
    compile_apply(p, x, f) where x.car == \puts: {
        a: compile_(p.cdr.car, x.cdr.car, f)
        `puts(!a)
    }
    compile_apply(p, x, f) where x.car == \exit: 
        exit(0)
    compile_apply(p, x, f) where x.car == one:
        compile_(p.cdr.car, x.cdr.car, f)
    compile_apply(p, x, f) where x.car == zero: `\!zero

    compile_cond(p, x): {
        condition: compile_condition(p.car.car, x.car.car)
        body1: compile_eval(p.car.cdr.car, x.car.cdr.car)
        body2: compile_cond(p.cdr, x.cdr)
        if (condition == \true)
            body1
        else
            `IfElse{!condition, !body1, !body2}
    }
    compile_cond(p, x) where x == zero: `\!zero

    compile_condition(p, x): `atom(!compile_eval(p, x))
    compile_condition(p, x) where x.car == \eq: {
        a: compile_(p.cdr.car, x.cdr.car, atom(x))
        b: compile_(p.cdr.cdr.car, x.cdr.cdr.car, atom(x))
        `(!a == !b)
    }
    compile_condition(p, x) where x.car == \null: {
        a: compile_(p.cdr.car, x.cdr.car, atom(x))
        `(!a == \!zero)
    }
    compile_condition(p, x) where x.car == \atom: {
        a: compile_(p.cdr.car, x.cdr.car, atom(x))
        `atom(!a)
    }
    compile_condition(p, x) where x == snoc(one, snoc(one, zero)): \true

    compile_(p, x, \true): compile_obj(p, x)
    compile_(p, x, \false): compile_eval(p, x)
    compile_obj
        : (p, x) where atom(p) -> compile_arg(p.car, \x)
        | (p, x@Meta)   -> rename(x[0])
        | (p, x@Symbol) -> rename(x)
        | (p, x) where x == zero -> `\!zero
        | (p, x@Cons) -> {
            a: compile_obj(p.car, x.car)
            b: compile_obj(p.cdr, x.cdr)
            if (Head{a} == \Quote and Head{b} == \Quote)
                return `\!cons(a[0], b[0])
            `cons(!a, !b)
          }
        | (p, x@Snoc) -> {
            a: compile_obj(p.car, x.car)
            b: compile_obj(p.cdr, x.cdr)
            if (Head{a} == \Quote and Head{b} == \Quote)
                return `\!snoc(a[0], b[0])
            `snoc(!a, !b)
          }

    params(x): x.cdr.car
    body(x)  : x.cdr.cdr.car

    # compile lambda-abstraction as a sexp.
    compile_lambda(x):
        (p, b): compile_as_sexp(params(x), body(x))
        cons_list([\lambda, p, b])

    # compile lambda-abstraction as a native function of Amber.
    compile_lambda_jit(x):
        amber::compile(`Lambda{x, !compile_eval(params(x), body(x))})

    # compile label-expression as a sexp.
    compile_label(x):
        (p, b): compile_as_sexp(params(x), body(x))
        cons_list([\label, p, b])

    # compile label-expression as a native function of Amber.
    replace_label: (n, p, b) where p == zero -> b
                 | (n, p, b) where atom(p)   -> n
                 | (n, p, b@Cons)
                   -> cons(replace_label(n, p.car, b.car),
                           replace_label(n, p.cdr, b.cdr))
                 | (n, p, b@Snoc)
                   -> snoc(replace_label(n, p.car, b.car),
                           replace_label(n, p.cdr, b.cdr))

    compile_label_jit(x):
        # Remove heads "Meta" and compile as a usual lambda.
        name: gensym("lbl")
        lam:  replace_label(name, params(x), body(x))
        fun : compile_eval(params(lam), body(lam))
        # register compiled function to the function table.
        function[name] = amber::compile(`Lambda{x, !fun})

    ## Function definition

    # The symbol '#' is used for start symbol of comments in
    # Amber's default syntax. 
    hl_comment ::= C_style_comment

    hl_expr ::= [multiline]
                "#" hl_literal hl_simple_expr "=" hl_expr ";"
                { cons_list([\Meta{Delta}, $1,
                      cons_list([\Meta{Lambda}, $2, $4])]) }

    # Extend eval and apply
    eval_define(x): {
        sym: x.cdr.car
        lam: x.cdr.cdr.car
        fun: compile_lambda_jit(lam)
        amber::define_global_variable(rename(sym), fun)
        sym
    }
    eval_(x) where x.car == \Meta{Delta}: eval_define(x)
    eval_(x@Meta): throw `UndefinedMetaLiteral{!x}

    # lambda-abstraction and label-expression is just a syntax sugar.
    # Therefore, they should be translated to sexp before evaluation.
    parse_old_hl_expr: parse_hl_expr
    hl_expr_macro ::= old_hl_expr { macro($0) }
    ReplaceSyntax{hl_expr, hl_expr_macro}

    macro: x@Cons where x.car == \Meta{Lambda} -> compile_lambda(x)
         | x@Cons where x.car == \Meta{Label}  -> compile_label(x)
         | x where x == zero -> zero
         | x@Cons -> cons(macro(x.car), macro(x.cdr))
         | x@Snoc -> snoc(macro(x.car), macro(x.cdr))
         | x -> x
}
