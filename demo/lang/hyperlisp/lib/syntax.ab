# Copyright (C) 2012 nineties
#
# $Id: hyperlisp/syntax.ab 2012-12-10 09:34:13 nineties $

# Reference
#   Masahiko Sato and Masami Hagiya: HyperLisp, Algorithmic Languages
#   (J.W. de Bakker and J.C. van Vliet eds.), North-Holland, 1981,
#   pp.251-269.

import core

module HyperLisp {
    # Basic syntax
    hl_simple_expr
        ::= "(" hl_expr "." hl_expr ")"      { cons($1, $3)  }
          | "[" hl_expr "." hl_expr "]"      { snoc($1, $3)  }
          | "(" delimited(hl_expr, [,;]) ")" { cons_list($1) }
          | "[" delimited(hl_expr, [,;]) "]" { snoc_list($1) }
          | "(" ")"                          { zero }
          | "[" "]"                          { zero }
          | "0"                              { zero }
          | "1"                              { one  }

    hl_primary_expr
        ::= "'" hl_primary_expr { snoc(one, snoc($1, zero)) }
          | hl_simple_expr

    hl_secondary_expr
        ::= hl_secondary_expr "(" delimited(hl_expr, [,;]) ")"
            { cons_list(std::cons($0, $2)) }
          | hl_secondary_expr "[" delimited(hl_expr, [,;]) "]"
            { snoc_list(std::cons($0, $2)) }
          | hl_primary_expr

    hl_expr
        ::= hl_secondary_expr ":" hl_secondary_expr
            { cons_list([$0, $2]) }
          | hl_secondary_expr

    # Pretty printing
    is_cons_list 
        : x where x == zero -> true
        | Cons{_, y, _}     -> is_cons_list(y)
        | _                 -> false
    is_snoc_list
        : x where x == zero -> true
        | Snoc{_, y, _}     -> is_snoc_list(y)
        | _                 -> false

    pprint
        : (io, x) where x == zero -> pprint(io, "0")
        | (io, x) where x == one  -> pprint(io, "1")
        | (io, e@Cons) where is_cons_list(e)
            -> pprint(io, "("); pprint_cons_list(io, e); pprint(io, ")")
        | (io, e@Snoc) where is_snoc_list(e)
            -> pprint(io, "["); pprint_cons_list(io, e); pprint(io, "]")
        | (io, Cons{x, y, _}) -> printf(io, "(%p . %p)", x, y)
        | (io, Snoc{x, y, _}) -> printf(io, "[%p . %p]", x, y)

    pprint_cons_list
        : (io, x) where x == zero  -> nil
        | (io, Cons{x, y, _}) where y == zero -> pprint(io, x)
        | (io, Snoc{x, y, _}) where y == zero -> pprint(io, x)
        | (io, Cons{x, y, _})
          -> pprint(io, x); pprint(io, ", "); pprint_cons_list(io, y)
        | (io, Snoc{x, y, _})
          -> pprint(io, x); pprint(io, ", "); pprint_cons_list(io, y)
}
