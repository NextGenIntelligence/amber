include "dev/HIL/C.ab"

nbody_simulation_default_setting: [
    ("method", \newton),
    ("output", nil)
]

statement ::= [multiline]
    "Nbody_simulation" "{"
        aligned(nbody_simulation_component)
    "}"
    {
        `Nbody_simulation{
            !Table::from_list(nbody_simulation_default_setting + $2)
        }
    }

nbody_simulation_component
    ::= "initial" ":" aligned(statement)    { `("initial", !$2) }
      | "final" ":" expr                    { `("final", !$2) }
      | "equation" ":" aligned(differential_equation)
        { `("equation", !$2) }
      | "method" ":" symbol                 { `("method", !$2) }
      | "output" ":" aligned(statement)     { `("output", !$2) }

differential_equation
    ::= "d" symbol "/" "d" symbol "=" expr
        { `DiffEqn{!$1, !$4, !$6} }

# Add differential_equation to pattern so as to make
# writing translators easy.

rel_expr ::= differential_equation

Nbody_simulation{tbl} => `{
    compile(stdout, "C") {

        Seq{!tbl["initial"]}

        while (not !tbl["final"]) {

            !discretize(tbl["method"], tbl["equation"])
        }
    }
}

#=== Euler method ===
# equations:
#   d y1/d x1 = e1
#   d y2/d x2 = e2
#   ...
#
# code:
#   t1: e1 * dx1
#   t2: e2 * dx2
#   ...
#   y1 += t1
#   y2 += t2
#   ...
#   xi += dxi
#   ...

discretize(\newton, eqns): {
    n: eqns.length

    # create temporary variables
    ts: List::create(n, i -> newSymbol())

    compute_e: map2(ts, eqns, (t, d y/d x = e) -> `(!t : !e * !("d" + x).to_sym))
    update_y : map2(ts, eqns, (t, d y/d x = e) -> `(!y += !t))

    # collect independent variables
    xs: eqns.map((d _/d x = _) -> x).uniq
    update_x : xs.map(x -> `(!x += !("d" + x).to_sym))

    `Seq{!(compute_e + update_y + update_x)}
}
