;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl.rlc 2010-07-08 18:31:51 nineties $
;

(import "rowl-compile")

; Regular expressions
;
; spaces     : [\n\r\t ]
; letter     : [A-Za-z_]
; deciaml    : -?[1-9][0-9]*
; octal      : 0[0-7]*
; hex        : ("0x"|"0X")[0-9a-fA-F]+
; escape     : \\['"\\abfnrtv0]
; character  : \'({escape}|[^\\\'\n])\'
; string     : \"({escape}|[^\\\"\n]*\"
; opchar     : [!#$%&=-^|@+*:/?<>.,]
; identifier : {letter}({letter}|[0-9_])*

; character group
(var CH_EOF         0)  ; [\0]
(var CH_INVALID     1)
(var CH_SPACES      2)  ; [\t\r ]
(var CH_NL          3)  ; [\n]
(var CH_ZERO        4)  ; [0]
(var CH_1_7         5)  ; [1-7]
(var CH_8_9         6)  ; [89]
(var CH_abf         7)  ; [abf]
(var CH_rtv         8)  ; [rtv]
(var CH_xX          9)  ; [xX]
(var CH_n           10) ; [n]
(var CH_HEX         11) ; [A-Fa-f]/[abf]
(var CH_OTHER       12)
(var CH_SQUOTE      13) ; [\']
(var CH_DQUOTE      14) ; [\"]
(var CH_SLASH       15) ; [/]
(var CH_BACKSLASH   16) ; [\\]
(var CH_SEMI        17) ; [;]
(var CH_MINUS       18) ; [-]
(var CH_SYMBOL      19) ; [!#$%&=-^|@+*:/?<>.,`]

; === state transition diagram ===
;
;    spaces
;   +---+-----------------------------+
;   v   |                             |
; +---+ |   EOF +---+                 |
; | 0 +-+------>|@1 | (end)           |
; +---+ |       +---+                 |
;       | /     +---+ /     +---+     |
;       +------>|@2 +------>| 3 +-+---+ (comment)
;               +---+       +---+ |
;              (operator/)    ^   | [^\n]
;                             +---+
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;       |       +---+                         (hexadecimal integer)
;       | 0     +---+ xX      +---+ hexdigit +---+
;       +------>|@4 +-------->| 5 +--------->|@6 +--+
;       |       +-+-+         +---+          +---+  | hexdigit
;       |         |[0-7]                       ^    |
;       |         v                            +----+
;       |       +---+ (octal integer)
;       |       |@7 |--+
;       |       +-+-+  |[0-7]
;       |         ^    |
;       |         +----+
;       | [1-9] +---+ (decimal integer)
;       +------>|@8 +--+
;       |       +---+  |[0-9]
;       |         ^    |
;       |         +----+
;       | -     +---+ [1-9]  +---+ (negative decimal integer)
;       +------>|@9 +------->|@10+-+
;       |       +---+        +---+ |[0-9]
;       |  (operator -)        ^   |
;       |                      +---+
;       |'        +---+ [^\\\n]    +---+ '     +---+
;       +-------->| 11+----------->| 12+------>|@13|
;       |         +-+-+            +---+       +---+
;       |           |\   +---+['"\\abfnrtv0] +---+'   +---+
;       |           +--->| 14+-------------->| 15+--->|@16|
;       |                +---+               +---+    +---+
;       |"        +---+   "          +---+
;       +-------->| 17+--+---------->|@19|
;       |         +---+  |           +---+
;       |           ^    |[^\\\"\n]
;       |           +----+
;       |           |    |\
;       |           |    v
;       |           |  +---+
;       |           +--+ 18|
;       |['"\\abfnrtv0]+---+
;       |
;       |        +---+
;       +------->|@20+-+
;                +---+ |^({spaces}|[;)
;                  ^   |
;                  +---+
;
; error state:
;   e1: invalid character
;   e2: junk letters after integer
;   e3: octal digit is expected
;   e4: hexadecimal digit is expected
;   e5: invalid escape sequence
;   e6: unterminated character literal
;   e7: unterminated string literal
;   e8: invalid symbol character
;

;============================================================
;                        macros
;============================================================

; character vector
(define CVECTOR (buf size capa) `(tuple 1 @buf @size @capa))
(define CVEC_BUF  (vec)  `(field_get @vec 0))
(define CVEC_SIZE (vec)  `(field_get @vec 1))
(define CVEC_CAPA (vec)  `(field_get @vec 2))
(define CVEC_BUF=  (vec val)  `(field_set @vec 0 @val))
(define CVEC_SIZE= (vec val)  `(field_set @vec 1 @val))
(define CVEC_CAPA= (vec val)  `(field_set @vec 2 @val))

;============================================================
;                    rowl1 compiler
;============================================================

(compile `(

(fun main () (
    (var vec (make_cvector 0))
    (cvector_pushback vec 0)
    (cvector_pushback vec 1)
    (cvector_pushback vec 2)
    (cvector_pushback vec 3)
    (cvector_pushback vec 4)
    (cvector_pushback vec 5)
    (exit (cvector_at vec 3))
    ))

;============================================================
;                        utilities
;============================================================

; vector of characters
(fun make_cvector_with_capa (size capa) (
    (var buf (array char capa))
    (memset buf 0 capa)
    (return @(CVECTOR buf size capa))
    ))

(fun make_cvector (size) (
    (if (!= size 0)
        (return (make_cvector_with_capa size size))
        (return (make_cvector_with_capa 0 10))
        )
    ))

(fun cvector_at (vec idx) (
    (return (array_get char @(CVEC_BUF vec) idx))
    ))

(fun cvector_put (vec idx val) (
    (array_set char @(CVEC_BUF vec) idx val)
    return
    ))

(fun cvector_reserve (vec capa) (
    (if (< @(CVEC_CAPA vec) capa) (do
        (var new_buf (array char capa))
        (memcpy new_buf @(CVEC_BUF vec) @(CVEC_SIZE vec))
        @(CVEC_BUF= vec new_buf)
        @(CVEC_CAPA= vec capa)
        ))
    return
    ))

(fun cvector_resize (vec new_size) (
    (if (> new_size @(CVEC_CAPA vec)) (cvector_reserve vec new_size))
    @(CVEC_SIZE= vec new_size)
    return
    ))

(fun cvector_pushback (vec value) (
    (if (== @(CVEC_SIZE vec) @(CVEC_CAPA vec))
        (cvector_reserve vec (* 2 @(CVEC_CAPA vec)))
        )
    (var sz @(CVEC_SIZE vec))
    (cvector_put vec sz value)
    @(CVEC_SIZE= vec `(+ sz 1))
    return
    ))

;============================================================
;                          lexer
;============================================================
(array char chgroup (
     0  1  1  1  1  1  1  1  1  2  3  1  1  2  1  1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     2 19 14 19 19 19 19 13 17 18 19 19 19 19 19 15
     4  5  5  5  5  5  5  5  6  6 19 19 19 19 19 19
    19 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12
    12 12 12 12 12 12 12 12  9 12 12 19 16 19 19 12
    19  7  7  9  9  9  9 12 12 12 12 12 12 12 10 12
    12 12  8 12  8 12  8 12  9 12 12 19 19 19 19 1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
     1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
    ))

;                     C  C  C  C  C  C  C  C  C  C  C  C  C  C  C  C  C  C  C  C
;                     H  H  H  H  H  H  H  H  H  H  H  H  H  H  H  H  H  H  H  H
;                     _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
;                     E  I  S  N  Z  1  8  a  r  x  n  H  O  S  D  S  B  S  M  S
;                     O  N  P  L  E  _  _  b  t  X  :  E  T  Q  Q  L  A  E  I  Y
;                     F  V  A  :  R  7  9  f  v  :  :  X  H  U  U  A  C  M  N  M
;                     :  A  C  :  O  :  :  :  :  :  :  :  E  O  O  S  K  I  U  B
;                     :  L  E  :  :  :  :  :  :  :  :  :  R  T  T  H  S  :  S  O
;                     :  I  S  :  :  :  :  :  :  :  :  :  :  E  E  :  L  :  :  L
;                     :  D  :  :  :  :  :  :  :  :  :  :  :  :  :  :  A  :  :  :
;                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  S  :  :  :
;                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  H  :  :  :
;                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
;(array char s0next  ( 1 90  1  1 90 90 90 90 90 90 90 90 90 90 90  2 90 90 90 90))
;
;(fun lookahead () (
;    (return (array_get char chgroup (nextc)))
;    ))
;
;(fun lex () (
;    (var state 0)
;    (var ch 0)
;    (label lex_loop)
;    (tswitch state (
;        (0 . (do
;            (= state (array_get char s0next (lookahead)))
;            (goto lex_loop)
;            ))
;        (1 . (return 11))
;        ))
;    (return ch)
;    ))

    ))
