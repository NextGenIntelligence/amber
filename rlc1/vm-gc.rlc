;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-gc.rlc 2010-07-24 18:19:24 nineties $
;

(import "stdlib")
(import "vm-compile")

(var SYS_MUNMAP  91)
(var SYS_MMAP2   192)

; mmap options
(var PROT_READ  0x1)
(var PROT_WRITE 0x2)
(var PROT_EXEC  0x4)
(var PROT_SEM   0x8)
(var PROT_NONE  0x0)
(var MAP_SHARED    0x1)
(var MAP_PRIVATE   0x2)
(var MAP_TYPE      0xf)
(var MAP_FIXED     0x10)
(var MAP_ANONYMOUS 0x20)

(var WORD_SHIFT 2)
(var WORD_SIZE  4)

; block and page management
;
; |<----------------------- 1 Mbyte ---------------------->|
; |..padding..|pd0|pd1|....|pdN-1|page0|page1|.....|pageN-1|

; structure of page descriptor. It's size must be 4-word.
;
; 1 bit : joined flag (1 if the page is joined with previous page)
; 31 bit : generation (ID number of generation to which this page belongs)
; 32 bit : void *next (Pointer to the next page in the page queue)

(define pdescr->joined      (addr)  `(& ([] @addr 0) 1))
(define pdescr->generation  (addr)  `(>> ([] @addr 0) 1))
(define pdescr->next        (addr)  `([] @addr 1))

(define pdescr->joined=1    (addr)  `([]= @addr 0 (| ([] @addr 0) 1)))
(define pdescr->joined=0    (addr)  `([]= @addr 0 (& ([] @addr 0) @(~ 1))))
(define pdescr->generation= (addr val) `([]= @addr 0 (| (<< @val 1) ([] @addr 0))))
(define pdescr->next=       (addr val)  `([]= @addr 1 @val))

; structure of block descriptor.
; 32 bit : void *next  (Pointer to the next block)
; 32 bit : void *first (Pointer to the beginning of the block)

(define bdescr->next    (addr)      `([] @addr 0))
(define bdescr->next=   (addr val)  `([]= @addr 0 @val))
(define bdescr->first   (addr)      `([] @addr 1))
(define bdescr->first=  (addr val)  `([]= @addr 1 @val))

(var PDESCR_SIZE    8)
(var PDESCR_SHIFT   3)  ; PDESCR_SIZE = 2^PDESCR_SHIFT
(var BDESCR_SIZE    8)
(var BDESCR_SHIFT   3)  ; BDESCR_SIZE = 2^BDESCR_SHIFT

(var BLOCK_MASK (- BLOCK_SIZE 1))

; required constraints: 2*PAGE_SHIFT <= BLOCK_SHIFT
(var PAGE_SHIFT 9)      ; 512B
(var PAGE_SIZE (<< 1 PAGE_SHIFT))
(var PAGE_WORDS_SHIFT (- PAGE_SHIFT WORD_SHIFT))
(var PAGE_WORDS       (<< 1 PAGE_WORDS_SHIFT))
(var PAGE_MASK (- PAGE_SIZE 1))

(var GENERATION_SHIFT 31)
(var GENERATION_MASK (- (<< 1 GENERATION_SHIFT) 1))
(define ADVANCE_GENERATION (old) `(& (+ @old 1) @GENERATION_MASK))

(var PAGES_PER_BLOCK (>> (* (- PAGE_SIZE PDESCR_SIZE) BLOCK_SIZE) (* 2 PAGE_SHIFT)))

; object address to page index
(define ADDR2BLOCK (addr) `(& @addr @(~ BLOCK_MASK)))
(define ADDR2PAGE   (obj)  `(& @addr @(~ PAGE_MASK)))
(define ADDR2PDESCR (obj)
    `(| @(ADDR2BLOCK obj)
        (>> (& @obj @(& BLOCK_MASK (~ PAGE_MASK))) @(- PAGE_SHIFT PDESCR_SHIFT))
        ))
(define PDESCR2PAGE (pd)
    `(| @(ADDR2BLOCK pd)
        (<< (& @pd @BLOCK_MASK) @(- PAGE_SHIFT PDESCR_SHIFT))
        ))

(var FIRST_PAGE_OFF   (>> BLOCK_SIZE (- PAGE_SHIFT PDESCR_SHIFT)))
(var FIRST_PDESCR_OFF (>> FIRST_PAGE_OFF (- PAGE_SHIFT PDESCR_SHIFT)))
(var END_PDESCR_OFF   FIRST_PAGE_OFF)

(define FIRST_PAGE   (block) `(+ @block @FIRST_PAGE_OFF))
(define FIRST_PDESCR (block) `(+ @block @FIRST_PDESCR_OFF))
(define END_PDESCR   (block) (FIRST_PAGE block))

(define IS_FIRST_PDESCR (pd) `(== (& @pd @BLOCK_MASK) @FIRST_PDESCR_OFF))
(define IS_END_PDESCR   (pd) `(== (& @pd @BLOCK_MASK) @END_PDESCR_OFF))

(var MAX_BLOCKS 4096) ; 4096 is enough for 32-bit machine
(define BLOCK2BIDX  (addr)  `(>> @addr @BLOCK_SHIFT))
(define BIDX2BLOCK  (idx)   `(<< @idx @BLOCK_SHIFT))
(define IS_POINTER_TO_HEAP  (addr)  `(!= @(blockmap->first (BLOCK2BIDX addr)) 0))

(define BDESCR2BLOCK (bdescr) `(<< (- @bdescr block_map) @(- BLOCK_SHIFT BDESCR_SHIFT)))

(define blockmap[] (idx)    `(+ block_map (* @BDESCR_SIZE @idx)))
(define blockmap->next  (idx)       `([] block_map (* @BDESCR_SIZE @idx)))
(define blockmap->first (idx)       `([] block_map (+ (* @BDESCR_SIZE @idx) 1)))
(define blockmap->next=  (idx val)  `([]= block_map (* @BDESCR_SIZE @idx) @val))
(define blockmap->first= (idx val)  `([]= block_map (+ (* @BDESCR_SIZE @idx) 1) @val))

; structure of header field
; MSB <- | 3 (object tag) | 1 (copyed flag) | 8 (# of boxed fieids) | 20 (object words) |

; object tag:
; 000 : padding
; 001 : plain type
; 010 : cons-cell
; 011 : array of boexed elements
; 100 : tuple
; 101 : variant

(var OBJECT_WORDS_BITS 20)
(var BOXED_FIELD_SIZE_BITS 8)
(var BOXED_FIELD_SIZE_OFF OBJECT_WORDS_BITS)
(var OBJECT_COPYED_OFF (+ OBJECT_WORDS_BITS BOXED_FIELD_SIZE_BITS))
(var OBJECT_TAG_BITS 3)
(var OBJECT_TAG_OFF (+ OBJECT_WORDS_BITS BOXED_FIELD_SIZE_BITS 1))

; !!! DO NOT CHANGE THE ORDER TAGS !!!
(var TAG_PADDING 0)
(var TAG_PLAIN   1)
(var TAG_CONS    2)
(var TAG_ARRAY   3)
(var TAG_TUPLE   4)
(var TAG_VARIANT 5)

(define OBJECT_WORDS (addr)  `(& ([] @addr 0) @(- (<< 1 OBJECT_WORDS_BITS) 1)))
(define OBJECT_TAG (addr)    `(>> ([] @addr 0) @OBJECT_TAG_OFF))

(define OBJECT_COPYED (addr) `(& (>> ([] @addr 0) @OBJECT_COPYED_OFF) 1))
(define OBJECT_SETCOPYED (addr) `([]= @addr 0 (| ([] @addr 0) @(<< 1 OBJECT_TAG_OFF))))

(define BOXED_FIELD_SIZE (addr)
    `(& (>> ([] @addr 0) @BOXED_FIELD_SIZE_OFF) @(- (<< 1 BOXED_FIELD_SIZE_BITS) 1)))

(define HEADER (tag nboxed objsz)
    `(| (<< @tag @OBJECT_TAG_OFF)
     (| (<< @nboxed @BOXED_FIELD_SIZE_OFF)
        @objsz)))

(define SET_HEADER (addr tag nboxed objsz) `([]= @addr 0 @(HEADER tag nboxed objsz)))

(define FORWARD_ADDR (obj) `([] @obj @WORD_SIZE))
(define SET_FORWARD_ADDR (obj addr) `([]= @obj @WORD_SIZE @addr))

(var IN_GC `(!= current_gen next_gen))

(var vm-gc-code `(

(extern void* stack)
(extern int stack_size)

(byte[] @(* BDESCR_SIZE MAX_BLOCKS) block_map)
(int stack_base)    ; address of stack bottom
(int current_gen)   ; current generation ID
(int next_gen)      ; next generation ID (used during GC)
(int num_block)     ; number of allocated blocks
(void* next_addr 0)
(int[] @MAX_BLOCKS block_used)
(void* current_block)   ; bdescr of curret block
(void* page_queue_head) ; page queue for breadth first scanning
(void* page_queue_tail) ; page queue for breadth first scanning
(void* freepage)        ; pdescr of current free page
(void* freep)    ; pointer to free memory in current free page
(int free_words) ; size of free area in current page (in words)

(void*[] @MAX_STATICS statics)
(int num_static)

(export register_static)
(fun register_static (addr) (
    (if (>= num_static @MAX_STATICS) ((error "ERROR: too many static objects.\n")))
    ([]= statics num_static addr)
    (incr num_static)
    ))

(fun mmap2 (addr size) (
    (void* ptr (syscall @SYS_MMAP2 addr size
        @(| PROT_READ PROT_WRITE PROT_EXEC) @(| MAP_ANONYMOUS MAP_PRIVATE) -1 0))
    (if (&& (<= -128 ptr) (< ptr 0))  ((error "ERROR: mmap2 failed\n")))
    (return ptr)
    ))

(fun munmap (addr size) (
    (syscall @SYS_MUNMAP addr size)
    ))

; `size` must be a multiple of BLOCK_SIZE
(export alloc_block)
(fun alloc_block (size) (
    (+= size @BLOCK_SIZE)
    (void* ptr (mmap2 0 size))
    (void* slop (& ptr @BLOCK_MASK))
    (if (< (munmap ptr (- @BLOCK_SIZE slop)) 0) ((error "ERROR: munmap failed\n")))
    (if (&& (> slop 0) (< (munmap (- (+ ptr size) slop) slop) 0))
        ((error "ERROR: munmap failed\n")))
    (= ptr (- (+ ptr @BLOCK_SIZE) slop))
    ([]= block_used (>> ptr @BLOCK_SHIFT) (>> size @BLOCK_SHIFT))
    (return ptr)
    ))


(fun alloc_new_block () (
    (void* addr)
    (if (> (+ num_block 1) @MAX_BLOCKS) ((error "ERROR: too many blocks\n")))
    (if (== next_addr 0)
        ((= addr (alloc_block @BLOCK_SIZE)))
        (
            (= addr (mmap2 next_addr @BLOCK_SIZE))
            (if (!= (& addr @BLOCK_MASK) 0)
                (
                    (if (< (munmap addr @BLOCK_SIZE) 0) ((error "ERROR: munmap failed\n")))
                    (= addr (alloc_block @BLOCK_SIZE))
                )
                (
                    ([]= block_used (/ addr @BLOCK_SIZE) 1)
                )
            )
        ))
    (= next_addr (+ addr @BLOCK_SIZE))
    (init_pdescrs addr)
    (void* blk @(blockmap[] (BLOCK2BIDX addr)))
    (if (== current_block 0) ((= current_block blk)))
    @(bdescr->first= blk addr)
    @(bdescr->next= blk (bdescr->next current_block))
    @(bdescr->next= current_block blk)
    (incr num_block)
    ))

(fun enqueue_page (pd) (
    (if page_queue_head
        (@(pdescr->next= page_queue_tail pd))
        ((= page_queue_head pd))
        )
    @(pdescr->next= pd 0)
    (= page_queue_tail pd)
    ))

(fun promote_page (addr) (
    (if (! @(IS_POINTER_TO_HEAP addr)) ((return)))
    (void* pd @(ADDR2PDESCR addr))
    (if (== @(pdescr->generation pd) current_gen) (
        (void* p pd)
        (void* end @(END_PDESCR (ADDR2BLOCK addr)))

        (+= p @PDESCR_SIZE)
        (while (&& (< p end) @(pdescr->joined p)) (
            @(pdescr->generation= p next_gen)
            (+= p @PDESCR_SIZE)
            ))
        (while @(pdescr->joined pd) (
            @(pdescr->generation= pd next_gen)
            (-= p @PDESCR_SIZE)
            ))
        @(pdescr->generation= pd next_gen)
        (enqueue_page pd)
        ))
    ))

(fun scan_machine_stack () (
    (int stack_top)
    (void* p (address stack_top))
    (while (< p stack_base) (
        (promote_page ([] p 0))
        (+= p @WORD_SIZE)
        ))
    ))

(fun scan_vm_stack () (
    (void* p)
    (asm "movl %esi, " p)
    (void* end (+ stack stack_size))
    (while (< p end) (
        (promote_page ([] p 0))
        (+= p @WORD_SIZE)
        ))
    ))

(fun copy_object (dst src words) (
    (while (> words 0) (
        ([]= dst 0 ([] src 0))
        (+= dst @WORD_SIZE)
        (+= src @WORD_SIZE)
        (decr words)
        ))
    ))

(fun move_object (objp) (
    (void* obj ([] objp 0))

    ; nil object
    (if (! obj) ((return)))

    (if (! @(IS_POINTER_TO_HEAP obj)) ((return)))

    ; this object is already in next generation
    (if (== @(pdescr->generation (ADDR2PDESCR obj)) next_gen) ((return)))

    ; this object is already copyed
    (if @(OBJECT_COPYED obj) (
        ([]= objp 0 @(FORWARD_ADDR obj))
        (return)
        ))

    (int words @(OBJECT_WORDS obj))
    (void* new_obj (allocate_object words))
    (copy_object new_obj obj words)

    @(SET_FORWARD_ADDR obj new_obj)
    @(OBJECT_SETCOPYED obj)
    ([]= objp 0 new_obj)
    ))

(fun move_fields (obj) (
    (int tag @(OBJECT_TAG obj))
    (if (<= tag @TAG_PLAIN) ((return)))
    (if (== tag @TAG_CONS) (
        (move_object (+ obj @WORD_SIZE)) ; car
        (move_object (+ obj @(* 2 WORD_SIZE))) ; cons
        (return)
        ))
    (if (== tag @TAG_ARRAY) (
        (int len (- @(OBJECT_WORDS obj) 1)) ; -1 for the header
        (+= obj @WORD_SIZE)
        (while (> len 0) (
            (move_object obj)
            (+= obj @WORD_SIZE)
            ))
        (return)
        ))
    (if (== tag @TAG_TUPLE) (
        (int len @(BOXED_FIELD_SIZE obj))
        (+= obj @WORD_SIZE) ; skip header
        (while (> len 0) (
            (move_object obj)
            (+= obj @WORD_SIZE)
            ))
        (return)
        ))
    (if (== tag @TAG_VARIANT) (
        (int len @(BOXED_FIELD_SIZE obj))
        (+= obj @WORD_SIZE) ; skip header and variant tag
        (while (> len 0) (
            (move_object obj)
            (+= obj @WORD_SIZE)
            ))
        (return)
        ))
    (error "not reachable")
    ))

(fun garbage_collect () (
    (if @IN_GC (
        (alloc_new_block)
        (return)
        ))
    (insert_padding) ; fill residual area in current page
    (= next_gen @(ADVANCE_GENERATION current_gen))
    (= page_queue_head 0)
    (= page_queue_tail 0)

    ; promote all pages which are refered from machine stack and vm-stack
    (scan_machine_stack)
    (scan_vm_stack)

    ; move static objects
    (for i 0 num_static (
        (move_object ([] statics i))
        ))

    ; sweep across promoted pages with breadth-first traversing and copy their consistents.
    (while page_queue_head (
        (void* p @(PDESCR2PAGE page_queue_head))
        (void* end (+ p @PAGE_SIZE))
        (while (&& (< p end) (!= p freep)) (
            (move_fields p)
            (+= p (* @WORD_SIZE @(OBJECT_WORDS p)))
            ))
        (= page_queue_head @(pdescr->next page_queue_head))
        ))

    (insert_padding)

    (= current_gen next_gen) ; switch to next generation
    ))

(fun insert_padding () (
    (if (> free_words 0) (
        @(SET_HEADER freep TAG_PADDING 0 free_words)
        (= free_words 0)
        ))
    ))

(fun nextpage (pd) (
    (+= pd @PDESCR_SIZE)
    (if @(IS_END_PDESCR pd) (
        (= current_block @(bdescr->next current_block))
        (= pd @(FIRST_PDESCR (bdescr->first current_block)))
        ))
    (return pd)
    ))

(fun allocate_page (npages) (
    (int free 0)
    (int allpages (* @PAGES_PER_BLOCK num_block))
    (void* firstpage 0)
    (label retry)
    (while allpages (
        (decr allpages)
        (if (&& (!= @(pdescr->generation freepage) current_gen)
                (!= @(pdescr->generation freepage) next_gen))
            (
            (if (== free 0) ((= firstpage freepage)))
            (incr free)
            (if (== free npages) (
                (= freep @(PDESCR2PAGE firstpage))
                (= free_words (<< npages @PAGE_WORDS_SHIFT))
                (= freepage (nextpage freepage))
                @(pdescr->generation= firstpage next_gen)
                @(pdescr->joined=0 firstpage)
                (if @IN_GC ((enqueue_page firstpage)))
                (decr npages)
                (while npages (
                    (+= firstpage @PDESCR_SIZE)
                    @(pdescr->generation= firstpage next_gen)
                    @(pdescr->joined=1 firstpage)
                    (decr npages)
                    ))
                (return)
                ))
            )
            ((= free 0))
            )
        (= freepage (nextpage freepage))
        (if @(IS_FIRST_PDESCR freepage) ((= free 0)))
        ))
    (garbage_collect)
    (goto retry)
    ))

(fun allocate_object (words) (
    (while (> words free_words) (
        (insert_padding)
        (allocate_page (>> (- (+ words @PAGE_WORDS) 1) @PAGE_WORDS_SHIFT))
        ))
    (void* obj freep)
    (if (< words @PAGE_WORDS) ((-= free_words words)) ((= free_words 0)))
    (+= freep (* @WORD_SIZE words))
    (return obj)
    ))

(export allocate_cons)
(fun allocate_cons () (
    (void* ptr (allocate_object 3))
    @(SET_HEADER ptr TAG_CONS 0 3)
    (return (+ ptr @WORD_SIZE))
    ))

(export allocate_plain)
(fun allocate_plain (bytes) (
    (int words (/ (+ bytes 3) 4))
    (incr words)
    (void* ptr (allocate_object words))
    @(SET_HEADER ptr TAG_PLAIN 0 words)
    (return (+ ptr @WORD_SIZE))
    ))

(export allocate_tuple)
(fun allocate_tuple (nelem nboxed) (
    (int words (+ nelem 1))
    (void* ptr (allocate_object words))
    @(SET_HEADER ptr TAG_TUPLE nboxed words)
    (return (+ ptr @WORD_SIZE))
    ))

(export allocate_tuple_with_values)
(fun allocate_tuple_with_values (nelem nboxed values) (
    (void* ptr (allocate_tuple nelem nboxed))
    (for i 0 nelem (
        ([]= ptr i ([] values i))
        ))
    (return ptr)
    ))

(export allocate_array)
(fun allocate_array (nelem) (
    (incr nelem)
    (void* ptr (allocate_object nelem))
    (memset ptr 0 (* 4 nelem))
    @(SET_HEADER ptr TAG_ARRAY 0 nelem)
    (+= ptr @WORD_SIZE)
    (return ptr)
    ))

(fun init_pdescrs (block_addr) (
    (void* page @(FIRST_PAGE block_addr))
    (void* pdf  @(FIRST_PDESCR block_addr))
    (void* pde  @(END_PDESCR block_addr))
    (while (< pdf pde) (
        @(pdescr->generation= pdf 0)
        @(pdescr->next=       pdf 0)
        (+= pdf @PDESCR_SIZE)
        (+= page @PAGE_SIZE)
        ))
    ))

(export init_gc)
(fun init_gc (stack_base_) (
    (int x)
    (if (! stack_base_) ((= stack_base_ (address x))))
    (= stack_base stack_base_)
    (memset block_map 0 @(* BDESCR_SIZE MAX_BLOCKS))
    (= current_gen 1)
    (= next_gen 1)
    (= num_block 0)
    (alloc_new_block)
    (= page_queue_head 0)
    (= page_queue_tail 0)
    (= freepage @(FIRST_PDESCR (bdescr->first current_block)))
    ))

(export finish_gc)
(fun finish_gc () (
    (for i 0 @MAX_BLOCKS (
        (if ([] block_used i) (
            (munmap 0 @BLOCK_SIZE)
            ))
        ))
    ))
))

(vtable_push)
(compile vm-gc-code)
(vtable_pop)
