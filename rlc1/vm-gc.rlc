;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-gc.rlc 2010-06-13 12:14:34 nineties $
;

; structure of page descriptor. It's size must be 4-word.
;
; 32 bit : joined flag   (1 if the page is joined with previous page)
; 32 bit : generation    (ID number of generation whic this page belongs to)
; 32 bit : void *first   (Address of the beginning of the page)
; 32 bit : void *next    (Pointer to the next page in the page queue)

; structure of block descriptor.
; 32 bit : void *next    (Pointer to the next block)
; 32 bit : void *first   (Address of the beginning of the block)

(var SYS_MUNMAP  91)
(var SYS_MMAP2   192)

; mmap options
(var PROT_READ  0x1)
(var PROT_WRITE 0x2)
(var PROT_EXEC  0x4)
(var PROT_SEM   0x8)
(var PROT_NONE  0x0)
(var MAP_SHARED     0x1)
(var MAP_PRIVATE    0x2)
(var MAP_TYPE       0xf)
(var MAP_FIXED      0x10)
(var MAP_ANONYMOUS  0x20)

(var BLOCK_SIZE (* 1024 1024)) ; 1MB
(var BLOCK_MASK (- BLOCK_SIZE 1))
(var MAX_BLOCKS 4096) ; 4096 is enough for 32-bit machine

(var PDESCR_SIZE    4)
(var BDESCR_SIZE    2)

(var vm-gc-code `(

(fun mmap2 (addr size) (
    (void* ptr (syscall @SYS_MMAP2 addr size
        @(| PROT_READ PROT_WRITE PROT_EXEC) @(| MAP_ANONYMOUS MAP_PRIVATE) -1 0))
    (if (&& (<= -128 ptr) (< ptr 0))  ((error "ERROR: mmap2 failed\n")))
    (return ptr)
    ))

(fun munmap (addr size) (
    (syscall @SYS_MUNMAP addr size)
    ))

(int   num_block 0)
(void* next_addr 0)
(void* free_first 0)
(void* free_last 0)
(int[] @MAX_BLOCKS block_used)

; `size` must be a multiple of BLOCK_SIZE
(fun alloc_block (size) (
    (+= size @BLOCK_SIZE)
    (void* ptr (mmap2 0 size))
    (void* slop (& ptr @BLOCK_MASK))
    (if (< (munmap ptr (- @BLOCK_SIZE slop)) 0) ((error "ERROR: munmap failed\n")))
    (if (&& (> slop 0) (< (munmap (- (+ ptr size) slop) slop) 0))
        ((error "ERROR: munmap failed\n")))
    (= ptr (- (+ ptr @BLOCK_SIZE) slop))
    ([]= block_used (/ ptr @BLOCK_SIZE) (/ size @BLOCK_SIZE))
    (return ptr)
    ))


(fun alloc_block_fast () (
    (void* addr)
    (if (> (+ num_block 1) @MAX_BLOCKS) ((error "ERROR: too many blocks\n")))
    (if (== next_addr 0)
        ((= addr (alloc_block @BLOCK_SIZE)))
        (
            (= addr (mmap2 next_addr @BLOCK_SIZE))
            (if (!= (& addr @BLOCK_MASK) 0)
                (
                    (if (< (munmap addr @BLOCK_SIZE) 0) ((error "ERROR: munmap failed\n")))
                    (= addr (alloc_block @BLOCK_SIZE))
                )
                (
                    ([]= block_used (/ addr @BLOCK_SIZE) 1)
                )
            )
        ))
    (= next_addr (+ addr @BLOCK_SIZE))
    (= free_first addr)
    (= free_last  next_addr)
    ))


(fun cleanup_blocks () (
    (for i 0 @MAX_BLOCKS (
        (if ([] block_used i) (
            (munmap 0 @BLOCK_SIZE)
            ))
        ))
    ))

(int[] @(* BDESCR_SIZE MAX_BLOCKS) block_map)

))
