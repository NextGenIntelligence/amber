;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: disasm.rlc 2010-08-12 16:46:29 nineties $
;

(import "config")
(import "rowl-compile")
(import "vm-prim-inc")
(import "vm-insn")

(var insn_name_values ())
(var insn_len_values ())
(foreach i vm_instructions (do
    (var name (symbol2s (car i)))
    (var len  (cadr i))
    (push insn_name_values name)
    (push insn_len_values  len)
    ))
(set insn_name_values (reverse insn_name_values))
(set insn_len_values  (reverse insn_len_values))

(compile `executable `(

(array string insn_names @insn_name_values)
(array char insn_lens @insn_len_values)

(var output_file null)

(fun main (argc argv) (
    (parse_option (address argc) argv)

    (if (< argc 2) (do
        (usage (array_get string argv 0))
        (return 1)
        ))

    (disasm (array_get string argv 1))

    (return 0)
    ))

(fun usage (prog) (
    (print_string "USAGE: rowl ")
    (print_string prog)
    (print_string " [-o OUTPUT] FILE\n")
    ))

(fun parse_option (argcp argv) (
    (var argc (get argcp))
    (var new_argc argc)
    (var i 1)
    (var j 1)
    (while (< j argc) (do
        (var arg (array_get string argv j))
        (if (streq arg "-o")
            (do
                (= output_file (array_get string argv (+ j 1)))
                (-= new_argc 2)
                (+= j 2)
            )
            (do
                (array_set string argv i arg)
                (incr i)
                (incr j)
            ))
        ))
    (set argcp new_argc)
    ))

(fun read_byte_check (ichan) (
    (var val 0)
    (if (< (input_char (address val) ichan) 0)
        (error "ERROR: load failed\n"))
    (return val)
    ))

(fun read_int_check (ichan) (
    (var val 0)
    (if (< (input_int (address val) ichan) 0)
        (error "ERROR: load failed\n"))
    (return val)
    ))

(fun read_bytes_check (ichan ptr size) (
    (if (< (input_bytes ichan ptr size) 0)
        (error "ERROR: load failed\n"))
    ))

(fun disasm (file) (
    (var ic (open_in file))
    (var oc 0)
    (if (== output_file 0)
        (= oc (get_stdout))
        (= oc (open_out file))
        )

    (var magic (read_int_check ic))
    (if (== magic @OBJ_MAGIC)
        (disasm_obj oc ic file)
    (if (== magic @EXE_MAGIC)
        (disasm_exe oc ic file)
        (error "ERROR: invalid file format\n")
        ))

    (close_in ic)
    (if (!= output_file 0)
        (close_out oc)
        )
    ))

(fun newline (oc) (
    (output_char oc '\n')
    ))

(fun output_head (oc file) (
    (output_string oc "==== disasm result of \"")
    (output_string oc file)
    (output_string oc "\" ====\n")
    ))

(fun output_nref (oc ic) (
    (var nref (read_int_check ic))
    (output_string oc "- number of global objects = ")
    (output_int oc nref)
    (newline oc)
    ))

(fun output_values (oc ic) (
    (var vsize (read_int_check ic))
    (output_string oc "- static values = ")
    (output_int oc vsize)
    (output_string oc " bytes\n")

    (var v (array char vsize))
    (read_bytes_check ic v vsize)

    (var i 0)
    (while (< i (- vsize 16)) (do
        (output_hex oc i 8)
        (output_string oc ":")
        (var j i)
        (while (< j (+ i 16)) (do
            (output_char oc ' ')
            (output_hex oc (array_get char v j) 2)
            (+= j 1)
            ))
        (newline oc)
        (+= i 16)
        ))
    (if (< i vsize) (do
        (output_hex oc i 8)
        (output_string oc ":")
        (while (< i vsize) (do
            (output_char oc ' ')
            (output_hex oc (array_get char v i) 2)
            (+= i 1)
            ))
        (newline oc)
        ))
    ))

(fun output_code (oc ic) (
    (var codelen (read_int_check ic))
    (output_string oc "- instructions = ")
    (output_int oc codelen)
    (output_string oc " bytes\n")

    (var code (array char codelen))
    (read_bytes_check ic code codelen)

;    (var i 0)
;    (while (< i codelen) (do
;        (var code (read_bytes_check ic))
;        (output_int oc i)
;        (output_string oc "\t: ")
;        (newline oc)
;        ))

    ))

(fun disasm_obj (oc ic file) (
    (output_head oc file)
    (output_nref oc ic)
    (output_values oc ic)
    (output_code oc ic)
    ))

(fun disasm_exe (oc ic file) (
    (output_head oc file)
    (output_nref oc ic)
    (output_values oc ic)
    (output_code oc ic)
    ))

    ))
