;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl-compile.rlc 2010-07-24 13:33:42 nineties $
;

(import "stdlib")
(import "rowl-assemble")
(import "vm-prim-inc")

(var vtable ()) ; variable table
(define vtable_push () (set vtable (cons () vtable)))
(define vtable_pop  () (set vtable (cdr vtable)))
(define lookup_var_helper (sym) (do
    (define loop (sym tab)
        (if (nil? tab) nil (do
            (var v (assoc sym (car tab)))
            (if v v (loop sym (cdr tab)))
            )))
    (loop sym vtable)
    ))

(define unboxed_type? (type) (member? type `(char int)))
(define unboxed_type_size (type) (assoc type `((char . 1) (int . 4))))

(define lookup_var (sym) (do
    (var v (lookup_var_helper sym))
    (if v v (do (eprintln "undefined variable : " sym) (exit 1)))
    ))

(define add_var (name opd) (setcar vtable (cons `(@name . @opd) (car vtable))))

(var label_id 0)
(define mklabel () (do
    (incr label_id)
    (tosym (++ "label." label_id))
    ))

(var break_labels ())
(define push_break_label () (do
    (var lbl (mklabel))
    (push break_labels lbl)
    ))
(define pop_break_label () (do
    (var lbl (car break_labels))
    (set break_labels (cdr break_labels))
    (emit_insn `(label @lbl))
    ))

(var num_local_var 0)
(define register_local_var (name) (do
    (var idx num_local_var)
    (add_var name `(local @idx))
    (incr num_local_var)
    idx
    ))

(var insn_seq ())
(define reset_insn_seq () (set insn_seq ()))
(define get_insn_seq () (reverse insn_seq))
(define emit_insn (insn) (push insn_seq insn))

(var init_code ())
(define push_init_code (code) (set init_code (append code init_code)))

(define gen_init_func () (do
    (reset_insn_seq)
    (compile_expr `(exit (main (cmd_argc) (cmd_argv))))
    (var call_main (get_insn_seq))
    `(fun __startup__ @(append init_code call_main))
    ))

(define arg_insn (idx)
    (cond
        ((== idx 0) `arg0)
        ((== idx 1) `arg1)
        ((== idx 2) `arg2)
        ((== idx 3) `arg3)
        ((== idx 4) `arg4)
        (otherwise `(@loadl (byte @(arg_offs idx))))
        ))

(define compile_var (sym) (do
    (var loc (lookup_var sym))
    (cond
        ((nil? loc) (error "undefined variable: " sym))
        ((== `arg (car loc)) (emit_insn (arg_insn (cadr loc))))
        ((== `local (car loc)) (compile_local_var loc))
        ((== `value (car loc)) (compile_value loc))
        ((== `object (car loc)) (compile_object loc))
        (otherwise (error "compile_var: not implemented" loc))
        )
    true
    ))

(define compile_value ((_ type name))
    (cond
        ((== `char type)    (emit_insn `(loadbv (value @name))))
        ((== `int type)     (emit_insn `(loadv (value @name))))
        ((== `void* type)   (emit_insn `(loadav (value @name))))
        ((== `string type)  (emit_insn `(loadav (value @name))))
        (otherwise (error "compile_value: not implemented"))
        ))

(define compile_object ((_ name)) (do
    (emit_insn `(loado (object @name)))
    ))

(define compile_local_var ((_ idx))
    (cond
        ((== idx 0) (emit_insn `loadl0))
        ((== idx 1) (emit_insn `loadl1))
        ((== idx 2) (emit_insn `loadl2))
        ((== idx 3) (emit_insn `loadl3))
        ((== idx 4) (emit_insn `loadl4))
        ((== idx 5) (emit_insn `loadl5))
        ((< idx 256) (emit_insn `(loadl (byte @(local_offs idx)))))
        (otherwise (error "too many local variables"))
        ))

(define compile_int_lit (val) (do
    (cond
        ((== val 0)  (emit_insn `imm_i0))
        ((== val 1)  (emit_insn `imm_i1))
        ((== val 2)  (emit_insn `imm_i2))
        ((== val 3)  (emit_insn `imm_i3))
        ((== val 4)  (emit_insn `imm_i4))
        ((== val 5)  (emit_insn `imm_i5))
        ((== val -1) (emit_insn `imm_im1))
        ((and (<= val 32768) (> val -32769)) (emit_insn `(imm_int16 (short @val))))
        (otherwise (emit_insn `(imm_int32 (long @val))))
        )
    true
    ))

(var string_decls ())
(define compile_string_lit (str) (do
    (var strlbl (mklabel))
    (add_var strlbl `(value string @strlbl))
    (push string_decls `(string @strlbl @str))
    (emit_insn `(loadav (value @strlbl)))
    true
    ))

(define compile_exit (expr) (do
    (compile_expr (cadr expr))
    (emit_insn `exit)
    nil
    ))

(define compile_return (expr) (do
    (compile_expr (cadr expr))
    (emit_insn `ireturn)
    nil
    ))

(define compile_local_incrdecr (op (_ idx)) (do
    (if (< idx 6)
        (do
            (var insn (tosym (++ op 'l' idx)))
            (emit_insn insn)
        )
        (do
            (var insn (tosym (++ op 'l')))
            (emit_insn `(@insn (byte @idx)))
        )
        )
    nil
    ))

(define compile_incrdecr ((op v)) (do
    (var loc (lookup_var v))
    (cond
        ((== `local (car loc)) (compile_local_incrdecr op loc))
        ((== `incr op) (compile_expr `(+= @v 1)))
        ((== `decr op) (compile_expr `(-= @v 1)))
        )
    ))

(var binary_operator
    `((+ . iadd) (- . isub) (* . imul) (/ . idiv) (% . imod) (cons . cons))
    )
(var unary_operator `((- . ineg) (car . get0) (cdr . get1) ))
(var assignment_operator `((= . nop) (+= . iadd) (-= . isub) (*= . imul)
    (/= . idiv) (%= . imod)))

(define binary_operator? (op) (assoc op binary_operator))
(define unary_operator? (op) (assoc op unary_operator))
(define assignment_operator? (op) (assoc op assignment_operator))

(define compile_binexpr (expr) (do
    (var insn (assoc (car expr) binary_operator))
    (var lhs (cadr expr))
    (var rhs (caddr expr))
    (compile_expr lhs)
    (compile_expr rhs)
    (emit_insn insn)
    true
    ))

(define compile_unexpr (expr) (do
    (var insn (assoc (car expr) unary_operator))
    (var arg (cadr expr))
    (compile_expr arg)
    (emit_insn insn)
    true
    ))

(define arg_offs (idx) (* 4 (+ 2 idx)))
(define local_offs (idx) (* -4 (+ 1 idx)))

(define compile_local_assign (insn loc rhs) (do
    (if (!= `nop insn)
        (do
            (compile_local_var loc)
            (compile_expr rhs)
            (emit_insn insn)
        )
        (do
            (compile_expr rhs)
        )
        )
    (var idx (cadr loc))
    (cond
        ((== idx 0) (emit_insn `storel0))
        ((== idx 1) (emit_insn `storel1))
        ((== idx 2) (emit_insn `storel2))
        ((== idx 3) (emit_insn `storel3))
        ((== idx 4) (emit_insn `storel4))
        ((== idx 5) (emit_insn `storel5))
        ((< idx 256) (emit_insn `(storel (byte @(local_offs idx)))))
        (otherwise (error "too many local variables"))
        )
    ))

(define compile_value_assign (insn (_ type name) rhs) (do
    (var load_store_op (assoc type `((char . (loadbv storebv)) (int . (loadv storewv)))))
    (if (!= `nop insn)
        (do
            (emit_insn `(@(car load_store_op) (value @name)))
            (compile_expr rhs)
            (emit_insn insn)
            (emit_insn `(@(cadr load_store_op) (value @name)))
        )
        (do
            (compile_expr rhs)
            (emit_insn `(@(cadr load_store_op) (value @name)))
        )
        )
    ))

(define compile_object_assign (insn (_ name) rhs) (do
    (if (!= `nop insn)
        (do
            (emit_insn `(loado (object @name)))
            (compile_expr rhs)
            (emit_insn insn)
            (emit_insn `(storeo (object @name)))
        )
        (do
            (compile_expr rhs)
            (emit_insn `(storeo (object @name)))
        ))
    ))

(define compile_assign (expr) (do
    (var insn (assoc (car expr) assignment_operator))
    (var lhs (cadr expr))
    (var rhs (caddr expr))
    (var loc (lookup_var lhs))
    (cond
        ((nil? loc) (error "undefined variable: " sym))
        ((== `local (car loc)) (compile_local_assign insn loc rhs))
        ((== `value (car loc)) (compile_value_assign insn loc rhs))
        ((== `object (car loc)) (compile_object_assign insn loc rhs))
        (otherwise (error "compile_assign: not implemented"))
        )
    nil
    ))

(define compile_call (expr) (do
    (var fun (car expr))
    (var prim (assoc fun prim_table)) ; (index name)
    (if prim
        (compile_extcall (car prim) (cdr expr))
        (do
            (var args (cdr expr))
            (var narg (length args))
            (foreach a (reverse args) (compile_expr a))
            (emit_insn `(call (local @fun) (byte @(* 4 narg))))
            true
        ))
    ))

(define compile_extcall (prim_idx argv) (do
    (var narg (length argv))
    (foreach a (reverse argv) (compile_expr a))
    (emit_insn `(extcall (short @prim_idx) (byte @(* 4 narg))))
    true
    ))

(var comparison_operator
    `((< . if_ge) (> . if_le) (<= . if_gt) (>= . if_lt) (== . if_ne) (!= . if_eq)))
(define comparison_expr? (expr) (and (cons? expr) (assoc (car expr) comparison_operator)))

(define compile_comp_if (expr) (do
    (var condexpr (cadr expr))
    (var insn (assoc (car condexpr) comparison_operator))
    (var lhs (cadr condexpr))
    (var rhs (caddr condexpr))
    (var ifthen (caddr expr))
    (var ifelse (if (cdddr expr) (cadddr expr) `nop))
    (var ifelse_label (mklabel))
    (var end_label (mklabel))
    (compile_expr lhs)
    (compile_expr rhs)
    (emit_insn `(@insn (local @ifelse_label)))
    (if (compile_expr ifthen) (emit_insn `drop))
    (emit_insn `(goto (local @end_label)))
    (emit_insn `(label @ifelse_label))
    (if (compile_expr ifelse) (emit_insn `drop))
    (emit_insn `(label @end_label))
    nil
    ))

(define compile_unless (expr ifthen ifelse) (do
    (compile_expr `(if @expr @ifelse @ifthen))
    ))

(define compile_seqand_if (lhs rhs ifthen ifelse) (do
    (var ifend_label (mklabel))
    (compile_expr `(if @lhs (if @rhs (do @ifthen (goto @ifend_label)))))
    (compile_expr ifelse)
    (emit_insn `(label @ifend_label))
    nil
    ))

(define compile_seqor_if (lhs rhs ifthen ifelse) (do
    (compile_expr `(if (&& (! @lhs) (! @rhs)) @ifelse @ifthen))
    ))

(define compile_if (expr) (do
    (var e (cadr expr))
    (var ifthen (caddr expr))
    (var ifelse (if (cdddr expr) (cadddr expr) `nop))
    (cond
        ((and (cons? e) (== `! (car e))) (compile_unless (cadr e) ifthen ifelse))
        ((and (cons? e) (== `&& (car e))) (compile_seqand_if (cadr e) (caddr e) ifthen ifelse))
        ((and (cons? e) (== `|| (car e))) (compile_seqor_if (cadr e) (caddr e) ifthen ifelse))
        ((comparison_expr? e) (compile_comp_if expr))
        (otherwise  (do
            (var ifelse_label (mklabel))
            (var end_label (mklabel))
            (compile_expr e)
            (emit_insn `(if_zero (local @ifelse_label)))
            (if (compile_expr ifthen) (emit_insn `drop))
            (emit_insn `(goto (local @end_label)))
            (emit_insn `(label @ifelse_label))
            (if (compile_expr ifelse) (emit_insn `drop))
            (emit_insn `(label @end_label))
            nil
            ))
        )))

; while (e1) e2
;
; is equal to
;
; if (e1) {
; loop:
;     e2;
;     if (e1) goto loop;
; }

(define compile_while ((_ expr body)) (do
    (var loop_label (mklabel))
    (push_break_label)
    (compile_if `(if @expr (do (label @loop_label) @body (if @expr (goto @loop_label)))))
    (pop_break_label)
    nil
    ))

; for v low high body
;
; is equal to
;
; v = low;
; e = high;
; if (v < e) {
; loop:
;     body;
;     incr v;
;     if (v < e) goto loop;
; }

(define compile_for ((_ it low high body)) (do
    (var loop_label (mklabel))
    (push_break_label)
    (compile_block `(
        (var @it @low)
        (var end @high)
        (if (< @it end) (do
            (label @loop_label)
            @body
            (incr @it)
            (if (< @it end) (goto @loop_label))
            ))
        ))
    (pop_break_label)
    nil
    ))

(define compile_tswitch ((_ e cases)) (do
    (var ncase (length cases))
    (var idx 0)
    (var labels ())
    (foreach c cases (do
        (if (and last? (!= (car c) `default)) (error "default case is missing"))
        (if (and (not last?) (!= (car c) idx)) (error "case " idx " is missing"))
        (push labels (mklabel))
        (incr idx)
        ))
    (set labels (reverse labels))

    (compile_expr e)

    (push_break_label)
    (emit_insn `(tswitch (short @(- ncase 1))))
    (foreach l labels (do
        (emit_insn `(tswitch_ent (local @l)))
        ))
    (foreach c cases (do
        (emit_insn `(label @(car labels)))
        (if (compile_expr (cdr c)) (emit_insn `drop))
        (set labels (cdr labels))
        ))
    (pop_break_label)
    nil
    ))

(define compile_label ((_ name)) (do
    (emit_insn `(label @name))
    nil
    ))

(define compile_goto ((_ name)) (do
    (emit_insn `(goto (local @name)))
    nil
    ))

(define compile_break (_) (do
    (var break_label (car break_labels))
    (emit_insn `(goto (local @break_label)))
    nil
    ))

(define compile_local_vardecl ((_ name val)) (do
    (var idx (register_local_var name))
    (compile_expr val)
    (cond
        ((== idx 0) (emit_insn `storel0))
        ((== idx 1) (emit_insn `storel1))
        ((== idx 2) (emit_insn `storel2))
        ((== idx 3) (emit_insn `storel3))
        ((== idx 4) (emit_insn `storel4))
        ((== idx 5) (emit_insn `storel5))
        ((< idx 256) (emit_insn `(storel (byte @(local_offs idx)))))
        (otherwise (error "too many local variables"))
        )
    nil
    ))

(define compile_arg_addressof   ((_ idx)) (emit_insn `(addrl (byte @(arg_offs idx)))))
(define compile_local_addressof ((_ idx)) (emit_insn `(addrl (byte @(local_offs idx)))))

(define compile_addressof ((_ sym)) (do
    (var loc (lookup_var sym))
    (cond
        ((nil? loc) (error "undefined variable: " sym))
        ((== `arg (car loc)) (compile_arg_addressof loc))
        ((== `local (car loc)) (compile_local_addressof loc))
        (otherwise (error "compile_var: not implemented" loc))
        )
    true
    ))

(define compile_unboxed_array (type len) (do
    (var elem_sz (unboxed_type_size type))
    (compile_expr `(* @elem_sz @len))
    (emit_insn `plain)
    true
    ))

(define compile_boxed_array (type len) (do
    (error "compile_boxed_array: not implemented")
    ))

(define compile_array ((_ type len))
    (if (unboxed_type? type)
        (compile_unboxed_array type len)
        (compile_boxed_array type len)
        )
    )

(define compile_array_get ((_ type ary idx)) (do
    (var insn (assoc type `((char . array_get8) (int . array_get32) (string . array_get32))))
    (compile_expr ary)
    (compile_expr idx)
    (emit_insn insn)
    true
    ))

(define compile_array_set ((_ type ary idx val)) (do
    (var insn (assoc type `((int . array_set32) (char . array_set8))))
    (compile_expr ary)
    (compile_expr idx)
    (compile_expr val)
    (emit_insn insn)
    nil
    ))

(define compile_tuple ((_ nboxed . args)) (do
    (var nelem (length args))
    (set args (reverse args))
    (foreach a args (compile_expr a))
    (emit_insn `(tuple (byte @nelem) (byte @nboxed)))
    true
    ))

(define compile_field_get ((_ tup idx)) (do
    (compile_expr tup)
    (emit_insn (cond
        ((== idx 0) `field_get0)
        ((== idx 1) `field_get1)
        ((== idx 2) `field_get2)
        ((== idx 3) `field_get3)
        ((== idx 4) `field_get4)
        ((== idx 5) `field_get5)
        (otherwise  `(field_get (byte @idx)))
        ))
    true
    ))

(define compile_field_set ((_ tup idx val)) (do
    (compile_expr tup)
    (compile_expr val)
    (emit_insn (cond
        ((== idx 0) `field_set0)
        ((== idx 1) `field_set1)
        ((== idx 2) `field_set2)
        ((== idx 3) `field_set3)
        ((== idx 4) `field_set4)
        ((== idx 5) `field_set5)
        (otherwise  `(field_set (byte @idx)))
        ))
    nil
    ))


(define compile_expr (expr) (do
    (cond
        ((== `nop expr) nil)
        ((== `null expr)   (do (emit_insn `imm_i0) true))
        ((== `return expr) (do (emit_insn `return) nil))
        ((== `break expr) (compile_break expr))
        ((char? expr) (compile_int_lit (char2int expr)))
        ((int? expr) (compile_int_lit expr))
        ((string? expr) (compile_string_lit expr))
        ((symbol? expr) (compile_var expr))
        ((== `var (car expr)) (compile_local_vardecl expr))
        ((== `address (car expr)) (compile_addressof expr))
        ((== `if (car expr)) (compile_if expr))
        ((== `while (car expr)) (compile_while expr))
        ((== `for (car expr)) (compile_for expr))
        ((== `tswitch (car expr)) (compile_tswitch expr))
        ((== `label (car expr)) (compile_label expr))
        ((== `goto (car expr)) (compile_goto expr))
        ((== `do (car expr)) (compile_block (cdr expr)))
        ((== `exit (car expr)) (compile_exit expr))
        ((== `return (car expr)) (compile_return expr))
        ((== `incr (car expr)) (compile_incrdecr expr))
        ((== `decr (car expr)) (compile_incrdecr expr))
        ((== `array (car expr)) (compile_array expr))
        ((== `array_get (car expr)) (compile_array_get expr))
        ((== `array_set (car expr)) (compile_array_set expr))
        ((== `tuple (car expr)) (compile_tuple expr))
        ((== `field_get (car expr)) (compile_field_get expr))
        ((== `field_set (car expr)) (compile_field_set expr))
        ((and (== 3 (length expr)) (binary_operator? (car expr)))
            (compile_binexpr expr))
        ((and (== 2 (length expr)) (unary_operator? (car expr)))
            (compile_unexpr expr))
        ((and (== 3 (length expr)) (assignment_operator? (car expr)))
            (compile_assign expr))
        (otherwise (compile_call expr))
        )))

(define compile_block (block) (do
    (vtable_push)
    (foreach e block
        (if (compile_expr e) (emit_insn `drop))
        )
    (vtable_pop)
    nil
    ))

(define compile_fundecl ((_ name params body)) (do
    (vtable_push)
    (reset_insn_seq)
    (set num_local_var 0)
    (var pidx 0) ; parameter index
    (foreach p params (do
        (add_var p `(arg @pidx))
        (incr pidx)
        ))
    (compile_block body)
    (var insn_seq (get_insn_seq))
    (if (> num_local_var 0)
        (set insn_seq (cons `(allocate (byte @num_local_var)) insn_seq)))
    (vtable_pop)
    `(fun @name @insn_seq)
    ))

(define compile_object_decl (name value) (do
    (add_var name `(object @name))
    (reset_insn_seq)
    (compile_expr value)
    (emit_insn `(storeo (object @name)))
    (var insn_seq (get_insn_seq))
    (push_init_code insn_seq)
    `(object @name)
    ))

(define compile_value_decl (name value) (do
    (var type (cond
        ((char? value) `char)
        ((int? value) `int)
        ((string? value) `string)
        (otherwise (error "compile_value_decl: not implemented"))
        ))
    (add_var name `(value @type @name))
    `(@type @name @value)
    ))

(define is_object (value)
    (cond
        ((== `null value) true)
        ((cons? value) true)
        (otherwise nil)
        ))

(define compile_vardecl ((_ name value))
    (if (is_object value)
        (compile_object_decl name value)
        (compile_value_decl name value)
    ))

; (array type name length)
; (array type name length value_list)
; (array type name value_list)
(define compile_arraydecl ((_ type name . args)) (do
    (var length (if (int? (car args)) (car args) (length (car args))))
    (var value_list (if (cons? (car args)) (car args) (cadr args)))
    (add_var name `(value void* @name))
    `((array @type @length) @name @value_list)
    ))

(define compile_decl (decl)
    (cond
        ((== `fun (car decl)) (compile_fundecl decl))
        ((== `array (car decl)) (compile_arraydecl decl))
        (otherwise (compile_vardecl decl))
        ))

(define compile_main (code) (do
    (var asm_code ())
    (vtable_push)
    (foreach decl code (do
        (var asm (compile_decl decl))
        (if asm (push asm_code asm))
        ))
    (vtable_pop)
    (append string_decls (reverse asm_code))
    ))

(define compile (mode code) (do
    (var asm_code (compile_main code))
    (var init_func (gen_init_func))
    (assemble mode (cons init_func asm_code))
    ))
