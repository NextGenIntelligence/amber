;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl-compile.rlc 2010-06-28 22:34:18 nineties $
;

(import "stdlib")
(import "vm-prim")
(import "rowl-assemble")

(var vtable ()) ; variable table
(define vtable_push () (set vtable (cons () vtable)))
(define vtable_pop  () (set vtable (cdr vtable)))
(define lookup_var_helper (sym) (do
    (define loop (sym tab)
        (if (nil? tab) nil (do
            (var v (assoc sym (car tab)))
            (if v v (loop sym (cdr tab)))
            )))
    (loop sym vtable)
    ))

(define lookup_var (sym) (do
    (var v (lookup_var_helper sym))
    (if v v (do (eprintln "undefined variable : " sym) (exit 1)))
    ))

(define add_var (name opd) (setcar vtable (cons `(@name . @opd) (car vtable))))

(var label_id 0)
(define mklabel () (do
    (incl label_id)
    (tosym (++ "label." label_id))
    ))

(var num_local_var 0)
(define register_local_var (name) (do
    (var idx num_local_var)
    (add_var name `(local @idx))
    (incl num_local_var)
    idx
    ))

(var insn_seq ())
(define reset_insn_seq () (set insn_seq ()))
(define get_insn_seq () (reverse insn_seq))
(define emit_insn (insn) (push insn_seq insn))

(define arg_insn (idx)
    (cond
        ((== idx 0) `arg0)
        ((== idx 1) `arg1)
        ((== idx 2) `arg2)
        ((== idx 3) `arg3)
        ((== idx 4) `arg4)
        (otherwise `(@arg @idx))
        ))

(define compile_var (sym) (do
    (var loc (lookup_var sym))
    (cond
        ((nil? loc) (error "undefined variable: " sym))
        ((== `arg (car loc)) (emit_insn (arg_insn (cadr loc))))
        ((== `global (car loc)) (compile_global_var loc))
        ((== `local (car loc)) (compile_local_var loc))
        (otherwise (error "compile_var: not implemented"))
        )
    true
    ))

(define compile_global_var ((_ type name))
    (cond
        ((== `char type)    (emit_insn `(loadbv @name)))
        ((== `int type)     (emit_insn `(loadwv @name)))
        ((== `string type)  (emit_insn `(loadav @name)))
        (otherwise (error "compile_global_var: not implemented"))
        ))

(define compile_local_var ((_ idx))
    (cond
        ((== idx 0) (emit_insn `loadwl0))
        ((== idx 1) (emit_insn `loadwl1))
        ((== idx 2) (emit_insn `loadwl2))
        ((== idx 3) (emit_insn `loadwl3))
        ((== idx 4) (emit_insn `loadwl4))
        ((== idx 5) (emit_insn `loadwl5))
        ((< idx 256) (emit_insn `(loadwl @idx)))
        (otherwise (error "too many local variables"))
        ))

(define compile_int_lit (val) (do
    (cond
        ((== val 0)  (emit_insn `imm_i0))
        ((== val 1)  (emit_insn `imm_i1))
        ((== val 2)  (emit_insn `imm_i2))
        ((== val 3)  (emit_insn `imm_i3))
        ((== val 4)  (emit_insn `imm_i4))
        ((== val 5)  (emit_insn `imm_i5))
        ((== val -1) (emit_insn `imm_im1))
        ((and (<= val 32768) (> val -32769)) (emit_insn `(imm_int @val))) ; 16bit signed integer
        (otherwise (error "compile_int_lit: not implemented"))
        )
    true
    ))

(var string_decls ())
(define compile_string_lit (str) (do
    (var strlbl (mklabel))
    (add_var strlbl `(global string @strlbl))
    (push string_decls `(string @strlbl @str))
    (emit_insn `(loadav @strlbl))
    true
    ))

(define compile_exit (expr) (do
    (compile_expr (cadr expr))
    (emit_insn `exit)
    nil
    ))

(define compile_return (expr) (do
    (compile_expr (cadr expr))
    (emit_insn `ireturn)
    nil
    ))

(var binary_operator
    `((+ . iadd) (- . isub) (* . imul) (/ . idiv) (% . imod) (cons . cons))
    )
(var unary_operator `((- . ineg) (car . get0) (cdr . get1) ))
(var assignment_operator `((= . nop) (+= . iadd) (-= . isub) (*= . imul)
    (/= . idiv) (%= . imod)))

(define binary_operator? (op) (assoc op binary_operator))
(define unary_operator? (op) (assoc op unary_operator))
(define assignment_operator? (op) (assoc op assignment_operator))

(define compile_binexpr (expr) (do
    (var insn (assoc (car expr) binary_operator))
    (var lhs (cadr expr))
    (var rhs (caddr expr))
    (compile_expr lhs)
    (compile_expr rhs)
    (emit_insn insn)
    true
    ))

(define compile_unexpr (expr) (do
    (var insn (assoc (car expr) unary_operator))
    (var arg (cadr expr))
    (compile_expr arg)
    (emit_insn insn)
    true
    ))

(define compile_global_assign (insn (_ type name) rhs) (do
    (var load_store_op (assoc type `((char . (loadbv storebv)) (int . (loadwv storewv)))))
    (if (!= `nop insn)
        (do
            (emit_insn `(@(car load_store_op) @name))
            (compile_expr rhs)
            (emit_insn insn)
            (emit_insn `(@(cadr load_store_op) @name))
        )
        (do
            (compile_expr rhs)
            (emit_insn `(@(cadr load_store_op) @name))
        )
        )
    ))

(define compile_local_assign (insn loc rhs) (do
    (if (!= `nop insn)
        (do
            (compile_local_var loc)
            (compile_expr rhs)
            (emit_insn insn)
        )
        (do
            (compile_expr rhs)
        )
        )
    (var idx (cadr loc))
    (cond
        ((== idx 0) (emit_insn `storewl0))
        ((== idx 1) (emit_insn `storewl1))
        ((== idx 2) (emit_insn `storewl2))
        ((== idx 3) (emit_insn `storewl3))
        ((== idx 4) (emit_insn `storewl4))
        ((== idx 5) (emit_insn `storewl5))
        ((< idx 256) (emit_insn `(storewl @idx)))
        (otherwise (error "too many local variables"))
        )
    ))
(define compile_assign (expr) (do
    (var insn (assoc (car expr) assignment_operator))
    (var lhs (cadr expr))
    (var rhs (caddr expr))
    (var loc (lookup_var lhs))
    (cond
        ((nil? loc) (error "undefined variable: " sym))
        ((== `global (car loc)) (compile_global_assign insn loc rhs))
        ((== `local (car loc)) (compile_local_assign insn loc rhs))
        (otherwise (error "compile_assign: not implemented"))
        )
    nil
    ))

(define compile_call (expr) (do
    (var fun (car expr))
    (var prim (assoc fun prim_table)) ; (index name)
    (if prim
        (compile_extcall (car prim) (cdr expr))
        (do
            (var args (cdr expr))
            (var narg (length args))
            (foreach a (reverse args) (compile_expr a))
            (emit_insn `(call @fun @(* 4 narg)))
            true
        ))
    ))

(define compile_extcall (prim_idx args) (do
    (var narg (length args))
    (foreach a (reverse args) (compile_expr a))
    (emit_insn `(extcall @prim_idx @narg))
    true
    ))

(var comparison_operator
    `((< . if_ge) (> . if_le) (<= . if_g) (>= . if_l) (== . if_ne) (!= . if_e)))
(define comparison_expr? (expr) (and (cons? expr) (assoc (car expr) comparison_operator)))

(define compile_comp_if (expr) (do
    (var condexpr (cadr expr))
    (var insn (assoc (car condexpr) comparison_operator))
    (var lhs (cadr condexpr))
    (var rhs (caddr condexpr))
    (var ifthen (caddr expr))
    (var ifelse (if (cdddr expr) (cadddr expr) `nop))
    (var ifelse_label (mklabel))
    (var end_label (mklabel))
    (compile_expr lhs)
    (compile_expr rhs)
    (emit_insn `(@insn @ifelse_label))
    (if (compile_expr ifthen) (emit_insn `drop))
    (emit_insn `(goto @end_label))
    (emit_insn `(label @ifelse_label))
    (if (compile_expr ifelse) (emit_insn `drop))
    (emit_insn `(label @end_label))
    nil
    ))

(define compile_if (expr)
    (if (comparison_expr? (cadr expr))
        (compile_comp_if expr)
        (do
            (var condition (cadr expr))
            (var ifthen (caddr expr))
            (var ifelse (if (cdddr expr) (cadddr expr) `nop))
            (var ifelse_label (mklabel))
            (var end_label (mklabel))
            (compile_expr condition)
            (emit_insn `(if_zero @ifelse_label))
            (if (compile_expr ifthen) (emit_insn `drop))
            (emit_insn `(goto @end_label))
            (emit_insn `(label @ifelse_label))
            (if (compile_expr ifelse) (emit_insn `drop))
            (emit_insn `(label @end_label))
            nil
        )
        )
    )

; while (e1) e2
;
; is equal to
;
; if (e1) {
; loop:
;     e2;
;     if (e1) goto loop;
; }

(define compile_while ((_ expr body)) (do
    (var loop_label (mklabel))
    (compile_if `(if @expr (do (label @loop_label) @body (if @expr (goto @loop_label)))))
    ))

; for v low high body
;
; is equal to
;
; v = low;
; e = high;
; if (v < e) {
; loop:
;     body;
;     incl v;
;     if (v < e) goto loop;
; }

(define compile_for ((_ it low high body)) (do
    (var loop_label (mklabel))
    (compile_block `(
        (var @it @low)
        (var end @high)
        (if (< @it end) (do
            (label @loop_label)
            @body
            (+= @it 1)
            (if (< @it end) (goto @loop_label))
            ))
        ))
    ))

(define compile_label ((_ name)) (do
    (emit_insn `(label @name))
    nil
    ))

(define compile_goto ((_ name)) (do
    (emit_insn `(goto @name))
    nil
    ))

(define compile_local_vardecl ((_ name val)) (do
    (var idx (register_local_var name))
    (compile_expr val)
    (cond
        ((== idx 0) (emit_insn `storewl0))
        ((== idx 1) (emit_insn `storewl1))
        ((== idx 2) (emit_insn `storewl2))
        ((== idx 3) (emit_insn `storewl3))
        ((== idx 4) (emit_insn `storewl4))
        ((== idx 5) (emit_insn `storewl5))
        ((< idx 256) (emit_insn `(storewl @idx)))
        (otherwise (error "too many local variables"))
        )
    nil
    ))

(define compile_expr (expr)
    (cond
        ((== `nop expr) nil)
        ((char? expr) (compile_int_lit (char2int expr)))
        ((int? expr) (compile_int_lit expr))
        ((string? expr) (compile_string_lit expr))
        ((symbol? expr) (compile_var expr))
        ((== `var (car expr)) (compile_local_vardecl expr))
        ((== `if (car expr)) (compile_if expr))
        ((== `while (car expr)) (compile_while expr))
        ((== `for (car expr)) (compile_for expr))
        ((== `label (car expr)) (compile_label expr))
        ((== `goto (car expr)) (compile_goto expr))
        ((== `do (car expr)) (compile_block (cdr expr)))
        ((== `exit (car expr)) (compile_exit expr))
        ((== `return (car expr)) (compile_return expr))
        ((and (== 3 (length expr)) (binary_operator? (car expr)))
            (compile_binexpr expr))
        ((and (== 2 (length expr)) (unary_operator? (car expr)))
            (compile_unexpr expr))
        ((and (== 3 (length expr)) (assignment_operator? (car expr)))
            (compile_assign expr))
        (otherwise (compile_call expr))
        ))

(define compile_block (block) (do
    (vtable_push)
    (foreach e block
        (if (compile_expr e) (emit_insn `drop))
        )
    (vtable_pop)
    nil
    ))

(define compile_fundecl ((_ name params body)) (do
    (vtable_push)
    (reset_insn_seq)
    (set num_local_var 0)
    (var pidx 0) ; parameter index
    (foreach p params (do
        (add_var p `(arg @pidx))
        (incl pidx)
        ))
    (compile_block body)
    (var insn_seq (get_insn_seq))
    (if (> num_local_var 0)
        (set insn_seq (cons `(allocate @num_local_var) insn_seq)))
    (vtable_pop)
    `(fun @name @insn_seq)
    ))

(define compile_heap_object_decl (name value)
    (error "compile_heap_object_decl: not implemented"))

(define compile_value_object_decl (name value) (do
    (var type (cond
        ((char? value) `char)
        ((int? value) `int)
        ((string? value) `string)
        (otherwise (error "compile_value_object_decl: not implemented"))
        ))
    (add_var name `(global @type @name))
    `(@type @name @value)
    ))

(define is_heap_object (value)
    (cond
        ((nil? value) true)
        ((cons? value) true)
        (otherwise nil)
        ))

(define compile_vardecl ((_ name value))
    (if (is_heap_object value)
        (compile_heap_object_decl name value)
        (compile_value_object_decl name value)
    ))

(define compile_decl (decl)
    (cond
        ((== `fun (car decl)) (compile_fundecl decl))
        (otherwise (compile_vardecl decl))
        ))

(define compile_main (code) (do
    (var asm_code ())
    (vtable_push)
    (foreach decl code (push asm_code (compile_decl decl)))
    (vtable_pop)
    (append string_decls (reverse asm_code))
    ))

(define compile (code) (do
    (var asm_code (compile_main code))
    (eprintln "asm_code:" asm_code)
    (assemble asm_code)
    ))

; test code
(compile `(

(fun main () (
    (for i 0 100 (do
        (print_string "Hello World\n")
        ))
    (exit 0)
    ))

(fun fib (n) (
    (if (< n 3)
        (return 1)
        (return (+ (fib (- n 1)) (fib (- n 2)))))
    ))

    ))
