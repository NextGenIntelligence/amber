;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-insn.rlc 2010-06-21 00:16:18 nineties $
;

(define gen_comparison (cmovname) `(
    (asm "movl $2, %eax")
    (vmsword 1 %ebx)
    (asm "cmpl %edx, (%esi)")
    (asm @cmovname " %ebx, %eax")
    (vmsucc %eax)
    (vmfetch)))

(var vm_instructions `(
    (nop        1 @true ())
    (exit       1 @true ((vmpop %eax) (break)))
    (imm_i0     1 @true ((vmpush %edx)))
    (imm_i1     1 @true ((vmpush $1)))
    (imm_i2     1 @true ((vmpush $2)))
    (imm_i3     1 @true ((vmpush $3)))
    (imm_i4     1 @true ((vmpush $4)))
    (imm_i5     1 @true ((vmpush $5)))
    (imm_im1    1 @true ((vmpush $-1)))
    (imm_int    3 @true ((vmsword 1 %eax) (vmpush %eax)))
    (iadd       1 @true ((vmbin "addl")))
    (isub       1 @true ((vmbin "subl")))
    (imul       1 @true ((vmpop %eax) (asm "imul (%esi), %eax") (asm "movl %eax, (%esi)")))
    (idiv       1 @true (
        (vmpop %ebx)
        (vmpop %eax)
        (asm "idiv %ebx")
        (vmpush %eax)
        (asm "xorl %edx, %edx") ; re-clear zero register
        ))
    (imod       1 @true (
        (vmpop %ebx)
        (vmpop %eax)
        (asm "idiv %ebx")
        (vmpush %edx)
        (asm "xorl %edx, %edx") ; re-clear zero register
        ))
    (goto       3 @nil  ((vmsword 1 %eax) (asm "addl %eax, %ecx") (vmfetch)))
    (if_zero    3 @nil  @(gen_comparison "cmovz"))
    (if_nonzero 3 @nil  @(gen_comparison "cmovnz"))
    (if_gt      3 @nil  @(gen_comparison "cmovg"))
    (if_ge      3 @nil  @(gen_comparison "cmovge"))
    (if_lt      3 @nil  @(gen_comparison "cmovl"))
    (if_le      3 @nil  @(gen_comparison "cmovle"))
    (drop       1 @true ((asm "addl $4, %esi")))
    (drop2      1 @true ((asm "addl $8, %esi")))
    (dup        1 @true ((asm "movl (%esi), %eax") (vmpush %eax)))
    (call       4 @nil  (
        (asm "movl %ecx, %eax")
        (asm "addl $4, %eax")
        (vmpush %eax) ; store return point
        (vmpush %edi) ; store base pointer
        (vmsword 1 %eax) ; offset of address of the function
        (asm "movl %esi, %edi") ; set base pointer
        (asm "addl %eax, %ecx")
        (vmfetch)
        ))
    (ireturn    1 @nil  (
        (asm "movl (%esi), %ebx") ; return value
        (asm "movl %edi, %esi")
        (vmpop %edi) ; base pointer
        (vmpop %ecx) ; return address
        (asm "movzbl -1(%ecx), %eax") ; total size of arguments
        (asm "addl %eax, %esi")
        (vmpush %ebx) ; push return value
        (vmfetch)
        ))
    (arg0       1 @true ((vmarg 0 %eax) (vmpush %eax)))
    (arg1       1 @true ((vmarg 1 %eax) (vmpush %eax)))
    (arg2       1 @true ((vmarg 2 %eax) (vmpush %eax)))
    (arg3       1 @true ((vmarg 3 %eax) (vmpush %eax)))
    (arg4       1 @true ((vmarg 4 %eax) (vmpush %eax)))
    (arg        2 @true (
        (vmubyte 1 %eax)
        (asm "addl $2, %eax")
        (asm "sall $2, %eax")
        (asm "addl %edi, %eax")
        (asm "movl (%eax), %eax")
        (vmpush %eax)
        ))
    (cons       1 @true (
        (vmsave)
        (call allocate_cons)
        (vmrestore)
        (vmpop %ebx)
        (asm "movl %ebx, 4(%eax)")
        (asm "movl (%esi), %ebx")
        (asm "movl %ebx, (%eax)")
        (asm "movl %eax, (%esi)")
        ))
    (car        1 @true (
        (asm "movl (%esi), %eax")
        (asm "movl (%eax), %eax")
        (asm "movl %eax, (%esi)")
        ))
    (cdr        1 @true (
        (asm "movl (%esi), %eax")
        (asm "movl 4(%eax), %eax")
        (asm "movl %eax, (%esi)")
        ))
    ))
