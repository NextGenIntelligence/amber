;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-insn.rlc 2010-08-22 16:32:38 nineties $
;

(define gen_comparison1 (cmovname) `(
    (vmpop %eax)
    (asm "cmpl %edx, %eax")
    (asm "movl $3, %eax")
    (vmsshort 1 %ebx)
    (asm @cmovname " %ebx, %eax")
    (vmsucc %eax)
    (vmfetch)))

(define gen_comparison2 (cmovname) `(
    (vmpop %eax)
    (vmpop %ebx)
    (asm "cmpl %eax, %ebx")
    (asm "movl $3, %eax")
    (vmsshort 1 %ebx)
    (asm @cmovname " %ebx, %eax")
    (vmsucc %eax)
    (vmfetch)))

(define gen_field_get (idx) `(
    (asm "movl (%esi), %eax")
    (asm "movl " @(* 4 idx) "(%eax), %eax")
    (asm "movl %eax, (%esi)")
    ))

(define gen_field_set (idx) `(
    (vmpop %ebx) ; value
    (vmpop %eax) ; ptr
    (asm "movl %ebx, " @(* 4 idx) "(%eax)")
    ))

(define operand_len (opd) (assoc opd `((byte . 1) (short . 2) (int . 4) (prim . 2))))
(define insn_length (operands) (do
    (var len 1) ; 1 for instruction code
    (foreach o operands (+= len (operand_len o)))
    len
    ))

(var vm_instructions `(
    (nop       () @true ())
    (imm_i0    () @true ((vmpush %edx))) ; also used for 'nil'
    (imm_i1    () @true ((vmpush $1)))
    (imm_i2    () @true ((vmpush $2)))
    (imm_i3    () @true ((vmpush $3)))
    (imm_i4    () @true ((vmpush $4)))
    (imm_i5    () @true ((vmpush $5)))
    (imm_im1   () @true ((vmpush $-1)))
    (imm_int16 (short) @true ((vmsshort 1 %eax) (vmpush %eax)))
    (imm_int32 (int) @true ((vmint 1 %eax) (vmpush %eax)))
    (iadd      () @true ((vmbin "addl")))
    (isub      () @true ((vmbin "subl")))
    (imul      () @true ((vmpop %eax) (asm "imul (%esi), %eax") (asm "movl %eax, (%esi)")))
    (idiv      () @true (
        (vmpop %ebx)
        (vmpop %eax)
        (asm "idiv %ebx")
        (vmpush %eax)
        (asm "xorl %edx, %edx") ; clear zero register
        ))
    (imod       () @true (
        (vmpop %ebx)
        (vmpop %eax)
        (asm "idiv %ebx")
        (vmpush %edx)
        (asm "xorl %edx, %edx") ; clear zero register
        ))
    (iadd1 () @true ((asm "incl (%esi)")))
    (isub1 () @true ((asm "decl (%esi)")))
    (drop  () @true ((asm "addl $4, %esi")))
    (drop2 () @true ((asm "addl $8, %esi")))
    (dup   () @true ((asm "movl (%esi), %eax") (vmpush %eax)))
    ; allocate cons object
    ; arg0 = car object
    ; arg1 = cdr object
    (cons () @true (
        (vmsave)
        (call allocate_cons)
        (vmrestore)
        (vmpop %ebx)
        (asm "movl %ebx, 4(%eax)")
        (asm "movl (%esi), %ebx")
        (asm "movl %ebx, (%eax)")
        (asm "movl %eax, (%esi)")
        ))
    ; allocate plain object
    ; arg0 = size (in bytes)
    ; NB: allocated memory is not be zero-cleared
    (plain () @true (
        (asm "movl (%esi), %eax")
        (vmsave)
        (asm "pushl %eax")
        (call allocate_plain)
        (asm "addl $4, %esp")
        (vmrestore)
        (asm "movl %eax, (%esi)")
        ))
    ; allocate tuple object
    ; opd0 = # of elements (8bit)
    ; opd1 = # of boxed elements (8bit)
    ; NB:
    ;  - allocated memory is not be zero-cleared
    ;  - all boxed elements must be placed first
    (tuple (byte byte) @true (
        (vmsave)
        (asm "pushl %esi")
        (vmubyte 2 %eax) ; # of boxed elements
        (asm "pushl %eax")
        (vmubyte 1 %eax) ; # of elements
        (asm "pushl %eax")
        (asm "sall $2, %eax")
        (asm "addl %eax, %esi")
        (call allocate_tuple_with_values)
        (asm "addl $12, %esp")
        (vmrestore)
        (vmpush %eax)
        ))
    (field_get0 () @true @(gen_field_get 0)) ; also used for 'car'
    (field_get1 () @true @(gen_field_get 1)) ; also used for 'cdr'
    (field_get2 () @true @(gen_field_get 2))
    (field_get3 () @true @(gen_field_get 3))
    (field_get4 () @true @(gen_field_get 4))
    (field_get5 () @true @(gen_field_get 5))
    (field_get  (byte) @true (
        (vmubyte 1 %eax)
        (asm "sall $2, %eax")
        (asm "movl (%esi), %ebx")
        (asm "addl %ebx, %eax")
        (asm "movl (%eax), %eax")
        (asm "movl %eax, (%esi)")
        ))
    ; field_set val obj
    (field_set0 () @true @(gen_field_set 0)) ; also used for 'setcar'
    (field_set1 () @true @(gen_field_set 1)) ; also used for 'setcdr'
    (field_set2 () @true @(gen_field_set 2))
    (field_set3 () @true @(gen_field_set 3))
    (field_set4 () @true @(gen_field_set 4))
    (field_set5 () @true @(gen_field_set 5))
    (field_set  (byte) @true (
        (vmubyte 1 %eax) ; index
        (asm "sall $2, %eax")
        (vmpop %ebx) ; obj
        (asm "addl %eax, %ebx")
        (asm "movl (%esi), %eax")
        (asm "movl %eax, (%ebx)")
        ))
    ; array nelem
    (array () @true (
        (asm "movl (%esi), %eax") ; # of elements
        (vmsave)
        (asm "pushl %eax")
        (call allocate_array)
        (asm "addl $4, %esp")
        (vmrestore)
        (asm "movl %eax, (%esi)")
        ))
    ; array_get ary idx
    (array_get8 () @true (
        (vmpop %eax) ; index
        (asm "movl (%esi), %ebx") ; array
        (asm "addl %eax, %ebx")
        (asm "movsbl (%ebx), %eax")
        (asm "movl %eax, (%esi)")
        ))
    (array_get32 () @true (
        (vmpop %eax) ; index
        (asm "sall $2, %eax")
        (asm "movl (%esi), %ebx") ; array
        (asm "addl %eax, %ebx")
        (asm "movl (%ebx), %eax")
        (asm "movl %eax, (%esi)")
        ))
    ; array_set ary idx val
    (array_set8 () @true (
        (asm "movl 4(%esi), %eax") ; index
        (asm "movl 8(%esi), %ebx") ; array
        (asm "addl %eax, %ebx")
        (asm "movl (%esi), %eax")
        (asm "movb %al, (%ebx)")
        (asm "addl $12, %esi")
        ))
    (array_set32 () @true (
        (asm "movl 4(%esi), %eax") ; index
        (asm "sall $2, %eax")
        (asm "movl 8(%esi), %ebx") ; array
        (asm "addl %eax, %ebx")
        (asm "movl (%esi), %eax")
        (asm "movl %eax, (%ebx)")
        (asm "addl $12, %esi")
        ))
    ; allocate stack area for local variables
    (allocate (byte) @true (
        (vmubyte 1 %eax)
        (asm "sall $2, %eax")
        (asm "subl %eax, %esi")
        ))
    ; arguments
    (arg0 () @true ((asm "movl 8(%edi), %eax") (vmpush %eax)))
    (arg1 () @true ((asm "movl 12(%edi), %eax") (vmpush %eax)))
    (arg2 () @true ((asm "movl 16(%edi), %eax") (vmpush %eax)))
    (arg3 () @true ((asm "movl 20(%edi), %eax") (vmpush %eax)))
    (arg4 () @true ((asm "movl 24(%edi), %eax") (vmpush %eax)))
    ; load word from local
    (loadl0 () @true ((asm "movl -4(%edi), %eax") (vmpush %eax)))
    (loadl1 () @true ((asm "movl -8(%edi), %eax") (vmpush %eax)))
    (loadl2 () @true ((asm "movl -12(%edi), %eax") (vmpush %eax)))
    (loadl3 () @true ((asm "movl -16(%edi), %eax") (vmpush %eax)))
    (loadl4 () @true ((asm "movl -20(%edi), %eax") (vmpush %eax)))
    (loadl5 () @true ((asm "movl -24(%edi), %eax") (vmpush %eax)))
    (loadl (byte) @true (
        (vmsbyte 1 %ebx) ; index
        (asm "movl %edi, %eax")
        (asm "addl %ebx, %eax")
        (asm "movl (%eax), %eax")
        (vmpush %eax)
        ))
    ; store word to local
    (storel0 () @true ((vmpop %eax) (asm "movl %eax, -4(%edi)")))
    (storel1 () @true ((vmpop %eax) (asm "movl %eax, -8(%edi)")))
    (storel2 () @true ((vmpop %eax) (asm "movl %eax, -12(%edi)")))
    (storel3 () @true ((vmpop %eax) (asm "movl %eax, -16(%edi)")))
    (storel4 () @true ((vmpop %eax) (asm "movl %eax, -20(%edi)")))
    (storel5 () @true ((vmpop %eax) (asm "movl %eax, -24(%edi)")))
    (storel (byte) @true (
        (vmsbyte 1 %ebx) ; index
        (asm "movl %edi, %eax")
        (asm "addl %ebx, %eax")
        (vmpop %ebx)
        (asm "movl %ebx, (%eax)")
        ))
    (incrl0 () @true ((asm "incl -4(%edi)")))
    (incrl1 () @true ((asm "incl -8(%edi)")))
    (incrl2 () @true ((asm "incl -12(%edi)")))
    (incrl3 () @true ((asm "incl -16(%edi)")))
    (incrl4 () @true ((asm "incl -20(%edi)")))
    (incrl5 () @true ((asm "incl -24(%edi)")))
    (incrl (byte) @true (
        (vmubyte 1 %ebx) ; index
        (asm "movl %edi, %eax")
        (asm "addl %ebx, %eax")
        (asm "incl (%eax)")
        ))
    (decrl0 () @true ((asm "decl -4(%edi)")))
    (decrl1 () @true ((asm "decl -8(%edi)")))
    (decrl2 () @true ((asm "decl -12(%edi)")))
    (decrl3 () @true ((asm "decl -16(%edi)")))
    (decrl4 () @true ((asm "decl -20(%edi)")))
    (decrl5 () @true ((asm "decl -24(%edi)")))
    (decrl (byte) @true (
        (vmubyte 1 %ebx) ; index
        (asm "movl %edi, %eax")
        (asm "addl %ebx, %eax")
        (asm "decl (%eax)")
        ))
    (addrl (byte) @true (
        (vmsbyte 1 %ebx) ; index
        (asm "movl %edi, %eax")
        (asm "addl %ebx, %eax")
        (vmpush %eax)
        ))
    ; load byte from value area
    (loadbv (short) @true (
        (vmushort 1 %eax)
        (asm "addl value_area_base, %eax")
        (asm "movzbl (%eax), %eax")
        (vmpush %eax)
        ))
    ; load word from value area
    (loadv (short) @true (
        (vmushort 1 %eax)
        (asm "addl value_area_base, %eax")
        (asm "movl (%eax), %eax")
        (vmpush %eax)
        ))
    ; load address of array from value area
    (loadav (short) @true (
        (vmushort 1 %eax)
        (asm "addl value_area_base, %eax")
        (vmpush %eax)
        ))
    ; store byte to value area
    (storebv (short) @true (
        (vmushort 1 %eax)
        (asm "addl value_area_base, %eax")
        (vmpop %ebx)
        (asm "movb %bl, (%eax)")
        ))
    ; store word to value area
    (storewv (short) @true (
        (vmushort 1 %eax)
        (asm "addl value_area_base, %eax")
        (vmpop %ebx)
        (asm "movl %ebx, (%eax)")
        ))
    ; load global heap object
    (loado (short) @true (
        (vmushort 1 %eax)
        (asm "shll $2, %eax")
        (asm "addl object_area_base, %eax")
        (asm "movl (%eax), %eax")
        (vmpush %eax)
        ))
    ; store global heap object
    (storeo (short) @true (
        (vmushort 1 %eax)
        (asm "shll $2, %eax")
        (asm "addl object_area_base, %eax")
        (vmpop %ebx)
        (asm "movl %ebx, (%eax)")
        ))
    ; 'fun:1' 'relative address of the function:2'
    (fun (short) @true (
        (vmsshort 1 %eax) ; offset of address of the function
        (asm "addl %ecx, %eax") ; compute absloute address
        (vmpush %eax)
        ))
    ; 'primfun:1' 'index of the external function:2'
    (primfun (short) @true (
        (vmushort 1 %eax) ; index of the function
        (asm "orl  $0x80000000, %eax") ; set flag
        (vmpush %eax)
        ))
    ; 'call:1' 'relative address of the function:2' 'size of arguments:1'
    (call (short byte)  @nil  (
        (asm "movl %ecx, %eax")
        (asm "addl $4, %eax")
        (vmpush %eax) ; store return point
        (vmpush %edi) ; store base pointer
        (vmsshort 1 %eax) ; offset of address of the function
        (asm "movl %esi, %edi") ; set base pointer
        (asm "addl %eax, %ecx")
        (vmfetch)
        ))
    ; 'primcall:1' 'index of the external function:2' 'size of arguments:1'
    (primcall (prim byte)  @true (
        (vmsave)
        (vmushort 1 %eax)
        (vmubyte 3 %ebx)
        (asm "pushl %esi") ; push argv
        (asm "pushl %ebx") ; push argsize
        (asm "pushl %eax") ; push index
        (call vm_primcall)
        (asm "addl $12, %esp")
        (vmrestore)
        (vmubyte 3 %ebx) ; total size of arguments
        (asm "addl %ebx, %esi") ; remove arguments from stack
        (vmpush %eax) ; push return value
        ))
    ; 'dcall:1' 'size of arguments:1'
    (dcall (byte) @true (
        (vmpop %eax) ; function
        (if (& (register %eax) -1) ; check flag
            ( ; external call
                (vmsave)
                (asm "movzwl %ax, %eax") ; function index is 2byte value
                (vmubyte 1 %ebx)
                (asm "pushl %esi") ; push argv
                (asm "pushl %ebx") ; push argsize
                (asm "pushl %eax") ; push index
                (call vm_primcall)
                (asm "addl $12, %esp")
                (vmrestore)
                (vmubyte 3 %ebx) ; total size of arguments
                (asm "addl %ebx, %esi") ; remove arguments from stack
                (vmpush %eax) ; push return value
            )
            ( ; absolute call
                (asm "movl %ecx, %ebx")
                (asm "addl $4, %ebx")
                (vmpush %ebx) ; store return point
                (vmpush %edi) ; store base pointer
                (asm "movl %esi, %edi") ; set base pointer
                (asm "movl %eax, %ecx")
                (vmfetch)
            ))
        ))
    (return () @nil  (
        (asm "movl $0, %ebx") ; return value
        (asm "movl %edi, %esi")
        (vmpop %edi) ; base pointer
        (vmpop %ecx) ; return address
        (asm "movzbl -1(%ecx), %eax") ; total size of arguments
        (asm "addl %eax, %esi")
        (vmpush %ebx) ; push return value
        (vmfetch)
        ))
    (ireturn () @nil  (
        (asm "movl (%esi), %ebx") ; return value
        (asm "movl %edi, %esi")
        (vmpop %edi) ; base pointer
        (vmpop %ecx) ; return address
        (asm "movzbl -1(%ecx), %eax") ; total size of arguments
        (asm "addl %eax, %esi")
        (vmpush %ebx) ; push return value
        (vmfetch)
        ))
    (tswitch (short) @nil (
        (vmpop %eax)
        (vmushort 1 %ebx) ; number of cases
        (asm "cmpl %eax, %ebx")
        (asm "cmovle %ebx, %eax")
        (asm "sall $1, %eax")
        (asm "addl $3, %ecx")
        (asm "addl %eax, %ecx")
        (asm "movzwl (%ecx), %eax")
        (asm "addl %eax, %ecx")
        (vmfetch)
        ))
    (goto       (short) @nil ((vmsshort 1 %eax) (asm "addl %eax, %ecx") (vmfetch)))
    (if_zero    (short) @nil @(gen_comparison1 "cmovz"))
    (if_nonzero (short) @nil @(gen_comparison1 "cmovnz"))
    (if_eq      (short) @nil @(gen_comparison2 "cmove"))
    (if_ne      (short) @nil @(gen_comparison2 "cmovne"))
    (if_gt      (short) @nil @(gen_comparison2 "cmovg"))
    (if_ge      (short) @nil @(gen_comparison2 "cmovge"))
    (if_lt      (short) @nil @(gen_comparison2 "cmovl"))
    (if_le      (short) @nil @(gen_comparison2 "cmovle"))
    (exit () @nil ((vmpop %eax) (break)))
    ))
