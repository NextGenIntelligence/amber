;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-eval.rlc 2010-06-05 20:35:15 nineties $
;

; rowlVM uses machine registers
;   %eax, %ecx : general purpose register
;   %ebx       : program counter
;   %esi       : stack pointer

(var instructions `(
    (fin      1 ((return)))
    (nop      1 ())
    (imm_i0   1 ((vm_push 0)))
    (imm_i1   1 ((vm_push 1)))
    (imm_i2   1 ((vm_push 2)))
    (imm_i3   1 ((vm_push 3)))
    (imm_i4   1 ((vm_push 4)))
    (imm_i5   1 ((vm_push 5)))
    (imm_im1  1 ((vm_push -1)))
    ))

(var insn_entries ())
(do
    (foreach e instructions (do
        (var label (mklabel (car e)))
        (var len (cadr e))
        (var code (caddr e))
        (set code (append code `((vm_succ @len) (vm_fetch))))
        (set insn_entries (cons `(@label @code) insn_entries))
        ))
    (set insn_entries (reverse insn_entries))
)

(define emit_vm_push ((_ val) _ _) (do
    (emit_expr val `%eax nil)
    (emit "subl" 4 `%esi)
    (movl `%eax `(offset %esi 0))
    ))

(define emit_vm_succ ((_ len) _ _) (do
    (emit "addl" len (lookup_var pc))
    ))

(define emit_vm_fetch ((_) _ _) (do
    (emit "movzbl" `(offset pc 0) `%eax)
    (emit "sall" `%eax)
    (movl `(offset %eax insn_table) `%eax)
    (emit "jmp" `*%eax)
    ))

(add_new_expr `vm_push  emit_vm_push)
(add_new_expr `vm_succ  emit_vm_succ)
(add_new_expr `vm_fetch emit_vm_fetch)

(var vm-eval-code `(

(int    stack_size) ; in words
(int*   stack)

(fun vm_init (stsize) (
    (+= stsize @BLOCK_SIZE)
    (&= stsize @BLOCK_MASK)
    (= stack (alloc_block stsize))
    (= stack_size stsize)
    ))

(fun vm_eval (insn) (
    (asm (movl stack %esi))
    ;(asm (movl stack_size %eax))
    ;(asm (emit "sall" 2 %eax))
    ;(asm (emit "addl" %eax %esi))
    ;(asm (movl insn %ebx))
    ;(tswitch insn_table (load8 %ebx) @insn_entries)
    ))

))
