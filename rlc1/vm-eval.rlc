;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-eval.rlc 2010-06-08 14:49:18 nineties $
;

; rowlVM register usage
;   %eax, %ecx : general purpose register
;   %ebx       : program counter
;   %esi       : stack pointer

(import "vm-insn")

(var insn_entries ())
(do
    (foreach e vm_instructions (do
        (var label (mklabel (car e)))
        (var len (cadr e))
        (var code (caddr e))
        (set code (append code `((vm_succ @len) (vm_fetch))))
        (set insn_entries (cons `(@label @code) insn_entries))
        ))
    (set insn_entries (reverse insn_entries))
)

(define emit_vm_push ((_ val) _ _) (do
    (emit "subl" 4 `%esi)
    (movl val `(deref %esi 0))
    ))

(define emit_vm_pop ((_ reg) _ _) (do
    (movl `(deref %esi 0) reg)
    (emit "addl" 4 `%esi)
    ))

(define emit_vm_succ ((_ len) _ _) (do
    (emit "addl" len `%ebx)
    ))

(define emit_vm_fetch ((_) _ _) (do
    (emit "movzbl" `(deref %ebx 0) `%eax)
    (movl `(offset %eax insn_table 4) `%eax)
    (emit "jmp" `*%eax)
    ))

(define emit_vm_ubyte ((_ offs reg) _ _) (do
    (emit "movzbl" `(deref %ebx @offs) reg)
    ))

(define emit_vm_sbyte ((_ offs reg) _ _) (do
    (emit "movsx" `(deref %ebx @offs) reg)
    ))

; switch implementation using table jump
(define emit_vm_table ((_ tblname body) _ ret) (do
    ; table area
    (change_area `rodata)
    (emit ".align 4")
    (emit ".align 4")
    (print_label tblname)
    (foreach case body (emit ".long" (car case)))

    ; code area
    (push_break_point)
    (change_area `text)
    (foreach case body (do
        (print_label (car case))
        (emit_block (cadr case) nil)
        ))
    (emit_break_point)
    (pop_break_point)

    (if ret (emit_return `(return) nil nil))
    ))

(define emit_vm_bin ((_ asmcode) _ ret) (do
    (emit_expr `(vm_pop %eax) nil nil)
    (emit_expr `(asm @asmcode " %eax, (%esi)") nil ret)
    ))

(add_new_expr `vm_push   emit_vm_push)
(add_new_expr `vm_pop    emit_vm_pop)
(add_new_expr `vm_succ   emit_vm_succ)
(add_new_expr `vm_fetch  emit_vm_fetch)
(add_new_expr `vm_ubyte  emit_vm_ubyte)
(add_new_expr `vm_sbyte  emit_vm_sbyte)
(add_new_expr `vm_table  emit_vm_table)
(add_new_expr `vm_bin    emit_vm_bin)

(var vm-eval-code `(

(int    stack_size) ; in words
(int*   stack)

(fun vm_init (stsize) (
    (= stack (alloc_block stsize))
    (= stack_size stsize)
    ))

(fun vm_eval (insn) (
    (asm "pushl %ebx")
    (asm "pushl %esi")
    (asm "movl stack, %esi")
    (asm "movl stack_size, %eax")
    (asm "addl %eax, %esi")
    (asm "movl 8(%ebp), %ebx")
    (vm_fetch)
    (vm_table insn_table @insn_entries)
    (asm "popl %esi")
    (asm "popl %ebx")
    ))
))
