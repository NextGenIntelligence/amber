;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm.rlc 2010-05-29 15:22:23 nineties $
;

; generate assembly code of virtual machine

(import "stdlib")

; === utilities ==
(define not_reachable args (do (println "not reachable here") (exit 1)))
(define not_implemented msgs (print "not implemented '" (car msgs) "' : " . (cdr msgs)))

(define dispatch (dispatcher default code) (do
    (if (cons? code)
        (do
            (var head (car code))
            (var fun (assoc head dispatcher))
            (fun code)
        )
        (default code)
    )))

(define emit_operand (val)
    (cond
        ((int? val)     (print '$' val))
        ((char? val)    (print "$'" val))
        ((== `top val)  (print "(%esp)"))
        ((symbol? val)  (print val))
        (true (not_implemented "emit_operand" val))
        ))

(define emit args (do
    (print '\t' (car args))
    (set args (cdr args))
    (if args (print ' '))
    (while args (do
        (emit_operand (car args))
        (if (cdr args) (print ", "))
        (set args (cdr args)))
        )
    (print '\n')))

(define pushl (val) (emit "pushl" val))
(define pushb (val) (emit "pushb" val))
(define popl  (reg) (emit "popl" reg))
(define popb  (reg) (emit "popb" reg))

; === compilation of expressions ==

(var insn_table `((+ . "addl") (- . "subl") (* . "imul")))
(define lookup_insn (op) (assoc op insn_table))

(define transl_return (code) (do
    (set code (cdr code)) ; skip 'return'
    (if code (transl_expr (car code)))
    (emit "leave")
    (emit "ret")
    ))

(define transl_binexpr (code) (do
    (var insn (lookup_insn (car code)))
    (transl_expr (cadr code))
    (transl_expr (caddr code))
    (popl `%eax)
    (emit insn `%eax `top)
    ))

(define transl_value (val)
    (cond
        ((int? val)  (pushl val))
        ((char? val) (pushb val))
        (true (not_implemented "transl_value" val))
        ))

(var expr_dispatcher `(
    (return . @transl_return)
    (+ . @transl_binexpr)
    (- . @transl_binexpr)
    (* . @transl_binexpr)
    ))

(define transl_expr (expr) (dispatch expr_dispatcher transl_value expr))

; === compilation of external declarations ===

(define transl_fun (name params body) (
    ))

(define transl_static_int (code) (do
    (set code (cdr code)) ; skip 'int'
    (print (car code) ": .long ")
    (if (nil? (cdr code))
        (println 0)
        (println (cadr code))
        )
    ))

(var extdecl_dispatcher `(
    (int . @transl_static_int)
    (int* . @transl_static_int)
    (fun . @transl_fun)
    ))

(define compile (prog)
    (while prog (do
        (dispatch extdecl_dispatcher not_reachable (car prog))
        (set prog (cdr prog))
        )
    ))

; === program of virtual machine ===
(var vmcode `(
    (int stack_size 0)
    (int stack_top 0)
))

(transl_expr `(return))
(transl_expr `(return 'a'))
(transl_expr `(+ 1 2))
(transl_expr `(* 2 3))
