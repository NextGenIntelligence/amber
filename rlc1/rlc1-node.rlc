;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rlc1-node.rlc 2010-10-17 10:53:58 nineties $
;

(import "rowl-compile")
(import "rlc1-types")

(compile `object `(

(import "rlc1-util")

(var symbol_table (make_idtable))

(export fun make_symbol (name) (
    (var sym (idtable_find symbol_table name))
    (if sym (return sym))
    (= name (strdup name))
    (= sym (variant @Symbol 1 name))
    (idtable_add symbol_table name sym)
    (return sym)
    ))

(export fun make_float_from_string (str) (
    (var mantissa 0)
    (var exponent 0)
    (var idx 0)
    (var c '\0')
    (while (!= (= c (array_get char str idx)) '.') (do
        (= mantissa (+ (* 10 mantissa) (- c '0')))
        (if (>= mantissa 10) (+= exponent 1))
        (+= idx 1)
        ))
    (+= idx 1)
    (while (&& (= c (array_get char str idx)) (!= c 'e')) (do
        (= mantissa (+ (* 10 mantissa) (- c '0')))
        (+= idx 1)
        ))

    ; remove unnecessary trailing zeros
    (while (== (% mantissa 10) 0) (/= mantissa 10))

    (if (== c 'e') (do
        (var sign 1)
        (+= idx 1)
        (= c (array_get char str idx))
        (if (== c '+') (+= idx 1)
        (if (== c '-') (do (+= idx 1) (= sign -1))
            ))
        (var e 0)
        (while (= c (array_get char str idx)) (do
            (= e (+ (* 10 e) (- c '0')))
            (+= idx 1)
            ))
        (if (< sign 0) (*= e -1))
        (+= exponent e)
        ))

    (return (variant @Float 0 0 mantissa exponent))
    ))

; builtin symbols
(export var NilSym (make_symbol "nil"))
(export var TrueSym (make_symbol "true"))
(export var FalseSym (make_symbol "false"))

; Pretty Printing
(var indent_depth 0)
(var indent_width 4)
(export fun pp_prog (ochan prog) (
    (= indent_depth 0)
    (pp_cons_seq ochan prog)
    ))

(export fun pp_expr (ochan node) (
    (var tag (field_get node 0))
    ; XXX: use tswitch
    (if (== tag @Symbol) (pp_symbol ochan node)
    (if (== tag @Char) (pp_char ochan node)
    (if (== tag @Int) (pp_int ochan node)
    (if (== tag @Float) (pp_float ochan node)
    (if (== tag @String) (pp_string ochan node)
    (if (== tag @Cons) (pp_cons ochan node)
    (if (== tag @Tuple) (pp_tuple ochan node)
    (if (== tag @Array) (pp_array ochan node)
    (if (== tag @Node) (pp_node ochan node)
    (if (== tag @Prefix) (pp_prefix ochan node)
    (if (== tag @Postfix) (pp_postfix ochan node)
    (if (== tag @Infix) (pp_infix ochan node)
    (if (== tag @Call) (pp_call ochan node)
    (if (== tag @Subscr) (pp_subscr ochan node)
        ))))))))))))))
    ))

(fun pp_symbol (ochan node) (
    (var name (field_get node 1))
    (output_string ochan name)
    ))

(fun pp_char (ochan node) (
    (var code (field_get node 1))
    (output_char ochan ''')
    (output_char_escape ochan code)
    (output_char ochan ''')
    ))

(fun pp_int (ochan node) (
    (var value (field_get node 1))
    (output_int ochan value)
    ))

(array char pp_float_digits 10)
(fun pp_float (ochan node) (
    (var sign (field_get node 1))
    (if sign (output_char ochan '-'))
    (var man  (field_get node 2))
    (array_set char pp_float_digits 0 (+ (% man 10) '0'))
    (/= man 10)
    (var i 0)
    (while (!= man 0) (do
        (incr i)
        (array_set char pp_float_digits i (+ (% man 10) '0'))
        (/= man 10)
        ))
    (output_char ochan (array_get char pp_float_digits i))
    (output_char ochan '.')
    (decr i)
    (if (< i 0)
        (output_char ochan '0')
        (while (>= i 0) (do
            (output_char ochan (array_get char pp_float_digits i))
            (decr i)
            ))
        )
    (var exp  (field_get node 3))
    (if (!= exp 0) (do
        (output_char ochan 'e')
        (output_int ochan exp)
        ))
    ))

(fun pp_string (ochan node) (
    (var str (field_get node 1))
    (var len (strlen str))
    (output_char ochan '"')
    (for i 0 len (do
        (output_char_escape ochan (array_get char str i))
        ))
    (output_char ochan '"')
    ))

(fun put_indent (ochan) (
    (for i 0 (* indent_width indent_depth) (output_char ochan ' '))
    ))

(fun pp_cons (ochan node) (
    (output_string ochan "{\n")
    (incr indent_depth)
    (pp_cons_seq ochan node)
    (decr indent_depth)
    (output_string ochan "}")
    ))

(fun pp_cons_seq (ochan node) (
    (while (!= node NilSym) (do
        (put_indent ochan)
        (pp_expr ochan (field_get node 1))
        (output_char ochan '\n')
        (= node (field_get node 2))
        ))
    ))

(fun pp_tuple (ochan node) (
    (var nelem (field_get node 2))
    (var elems (field_get node 1))
    (output_char ochan '(')
    (for i 0 nelem (do
        (pp_expr ochan (car elems))
        (= elems (cdr elems))
        (if elems (output_string ochan ", "))
        ))
    (output_char ochan ')')
    ))

(fun pp_array (ochan node) (
    (var nelem (field_get node 2))
    (var elems (field_get node 1))
    (output_char ochan '[')
    (for i 0 nelem (do
        (pp_expr ochan (car elems))
        (= elems (cdr elems))
        (if elems (output_string ochan ", "))
        ))
    (output_char ochan ']')
    ))

(fun pp_node (ochan node) (
    (var sym (field_get node 1))
    (var size (variant_size node))
    (output_char ochan '(')
    (pp_symbol ochan sym)
    (for i 2 size (do
        (output_char ochan ' ')
        (pp_expr ochan (load object node i))
        ))
    (output_char ochan ')')
    ))

(fun pp_prefix (ochan node) (
    (var op (field_get node 1))
    (var arg (field_get node 2))
    ; XXX: temporal implementation
    (output_char ochan '(')
    (pp_symbol ochan op)
    (pp_expr ochan arg)
    (output_char ochan ')')
    ))

(fun pp_postfix (ochan node) (
    (var op (field_get node 1))
    (var arg (field_get node 2))
    ; XXX: temporal implementation
    (output_char ochan '(')
    (pp_expr ochan arg)
    (pp_symbol ochan op)
    (output_char ochan ')')
    ))

(fun pp_infix (ochan node) (
    (var op (field_get node 1))
    (var lhs (field_get node 2))
    (var rhs (field_get node 3))
    ; XXX: temporal implementation
    (output_char ochan '(')
    (pp_expr ochan lhs)
    (output_char ochan ' ')
    (pp_symbol ochan op)
    (output_char ochan ' ')
    (pp_expr ochan rhs)
    (output_char ochan ')')
    ))

(fun pp_call (ochan node) (
    (var expr (field_get node 1))
    (var args (field_get node 2))
    (pp_expr ochan expr)
    (output_char ochan '(')
    (while args (do
        (pp_expr ochan (car args))
        (= args (cdr args))
        (if args (output_string ochan ", "))
        ))
    (output_char ochan ')')
    ))

(fun pp_subscr (ochan node) (
    (var expr (field_get node 1))
    (var args (field_get node 2))
    (pp_expr ochan expr)
    (output_char ochan '[')
    (while args (do
        (pp_expr ochan (car args))
        (= args (cdr args))
        (if args (output_string ochan ", "))
        ))
    (output_char ochan ']')
    ))

    ))
