;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-prim-io.rlc 2010-07-23 15:27:23 nineties $
;

; primitive functions

(import "stdlib")
(import "vm-compile")

(var SYS_READ 3)
(var SYS_WRITE 4)
(var SYS_OPEN 5)
(var SYS_CLOSE 6)

(var O_RDONLY 0)
(var O_WRONLY 1)
(var O_RDWR   2)
(var O_CREAT  64)
(var O_TRUNC  512)
(var O_APPEND 1024)

(var STDIN_FD 0)
(var STDOUT_FD 1)
(var STDERR_FD 2)

(var RDBUFSZ 512) ; read buffer size
(var WRBUFSZ 512) ; write buffer size
(var EOF -1)

(var vm-prim-code `(

(extern void* make_array)
(extern void* make_tuple3)
(extern void* make_tuple4)

(fun strlen (str) (
    (int len 0)
    (while (!= (*8 str) '\0') (
        (incr str)
        (incr len)
        ))
    (return len)
    ))

; I/O functions
(void* ichan_list 0) ; list of opened ichan
(void* ochan_list 0) ; list of opened ochan
(void* stdin)
(void* stdout)
(void* stderr)

(export prim_get_stdin)
(export prim_get_stdout)
(export prim_get_stderr)
(fun prim_get_stdin  () ((return stdin)))
(fun prim_get_stdout () ((return stdout)))
(fun prim_get_stderr () ((return stderr)))

; ichan = (buf, fd, beg, end)
(fun make_ichan (fd) (
    (void* chan (make_tuple4 1 (make_array @RDBUFSZ) fd 0 0))
    (= ichan_list (make_cons chan ichan_list))
    (return chan)
    ))

; ochan = (buf, fd, pos)
(fun make_ochan (fd) (
    (void* chan (make_tuple3 1 (make_array @WRBUFSZ) fd 0))
    (= ochan_list (make_cons chan ochan_list))
    (return chan)
    ))

(export prim_open_in)
(fun prim_open_in (path) (
    (int fd (syscall @SYS_OPEN path @O_RDONLY))
    (if (< fd 0) ((error "ERROR: open failed\n")))
    (return (make_ichan fd))
    ))

(export prim_close_in)
(fun prim_close_in (ichan) (
    (= ichan_list (remove_from_list ichan_list ichan))
    (syscall @SYS_CLOSE (get ichan 1))
    ))

(export prim_open_out)
(fun prim_open_out (path) (
    (int fd (syscall @SYS_OPEN path @(| O_WRONLY O_CREAT O_TRUNC) 0644))
    (if (< fd 0) ((error "ERROR: open failed\n")))
    (return (make_ochan fd))
    ))

(export prim_flush)
(fun prim_flush (ochan) (
    (if (> (get ochan 2) 0) (
        (syscall @SYS_WRITE (get ochan 1) (get ochan 0) (get ochan 2))
        (set ochan 2 0)
        ))
    ))

(export prim_close_out)
(fun prim_close_out (ochan) (
    (prim_flush ochan)
    (= ochan_list (remove_from_list ochan_list ochan))
    (syscall @SYS_CLOSE (get ochan 1))
    ))

(fun fill_ichan (ichan) (
    (if (!= (get ichan 2) (get ichan 3)) (
        (return))
        )
    ; here input buffer is empty
    (int sz (syscall @SYS_READ (get ichan 1) (get ichan 0) @RDBUFSZ))
    (set ichan 2 0)
    (set ichan 3 sz)
    ))

(export prim_input_bytes)
(fun prim_input_bytes (ichan ptr size) (
    (void* chanp (get ichan 0))
    (int beg (get ichan 2))
    (int end (get ichan 3))
    (int bufsz (- end beg))
    (if (<= size bufsz)
        (
            (prim_memcpy ptr chanp size)
            (set ichan 2 (+ beg size))
            (return 0)
        )
        (
            (prim_memcpy ptr chanp bufsz)
            (set ichan 2 end)
            (-= size bufsz)
            (int r (syscall @SYS_READ (get ichan 1) (+ ptr bufsz) size))
            (if (< r size) ((return -1)))
            (return 0)
        ))
    ))

(export prim_input_char)
(fun prim_input_char (ichan) (
    (fill_ichan ichan)
    (if (== (get ichan 2) (get ichan 3)) (
        (return -1) ; EOF
        ))
    (int c (get8 (get ichan 0) (get ichan 2)))
    (set ichan 2 (+ (get ichan 2) 1))
    (return c)
    ))

(export prim_input_int)
(fun prim_input_int (addr ichan) (
    (fill_ichan ichan)
    (if (< (- (get ichan 3) (get ichan 2)) 4) (
        (return -1) ; EOF
        ))
    (int c (get (+ (get ichan 0) (get ichan 2)) 0))
    (set addr 0 c)
    (set ichan 2 (+ (get ichan 2) 4))
    (return 0)
    ))

(export prim_output_bytes)
(fun prim_output_bytes (ochan ptr size) (
    (if (== (get ochan 1) @STDERR_FD) (
        ; Do not buffer outputs to stderr
        (syscall @SYS_WRITE @STDERR_FD ptr size)
        (return)
        ))
    (while (> size 0) (
        (prim_output_char ochan (*8 ptr))
        (incr ptr)
        (decr size)
        ))
    ))

(export prim_output_char)
(fun prim_output_char (ochan c) (
    (if (== (get ochan 1) @STDERR_FD) (
        ; Do not buffer outputs to stderr
        (syscall @SYS_WRITE @STDERR_FD (address c) 1)
        (return)
        ))
    (set8 (get ochan 0) (get ochan 2) c)
    (set ochan 2 (+ (get ochan 2) 1))
    (if (|| (== c '\n') (== (get ochan 2) @WRBUFSZ)) (
        (prim_flush ochan)
        (return)
        ))
    ))

(export prim_output_string)
(fun prim_output_string (ochan str) (
    (if (== (get ochan 1) @STDERR_FD) (
        ; Do not buffer outputs to stderr
        (syscall @SYS_WRITE @STDERR_FD str (strlen str))
        (return)
        ))
    (while (!= (*8 str) '\0') (
        (prim_output_char ochan (*8 str))
        (incr str)
        ))
    ))

(char[] 10 output_int_digits)
(export prim_output_int)
(fun prim_output_int (ochan num) (
    (if (< num 0) (
        (prim_output_char ochan '-')
        (prim_output_int (neg num))
        (return)
        ))
    (set8 output_int_digits 0 (+ (% num 10) '0'))
    (/= num 10)
    (int i 0)
    (while (!= num 0) (
        (incr i)
        (set8 output_int_digits i (+ (% num 10) '0'))
        (/= num 10)
        ))
    (while (>= i 0) (
        (prim_output_char ochan (get8 output_int_digits i))
        (decr i)
        ))
    ))

(export prim_read_bytes)
(fun prim_read_bytes (ptr size) (
    (return (prim_input_bytes stdin ptr size))
    ))

(export prim_read_char)
(fun prim_read_char () (
    (return (prim_input_char stdin))
    ))

(export prim_read_int)
(fun prim_read_int (addr) (
    (return (prim_input_int addr stdin))
    ))

(export prim_print_bytes)
(fun prim_print_bytes (ptr size) (
    (return (prim_output_bytes stdout ptr size))
    ))

(export prim_print_char)
(fun prim_print_char (c) (
    (return (prim_output_char stdout c))
    ))

(export prim_print_string)
(fun prim_print_string (str) (
    (return (prim_output_string stdout str))
    ))

(export prim_print_int)
(fun prim_print_int (num) (
    (return (prim_output_int stdout num))
    ))

(export prim_error)
(fun prim_error (msg) (
    (error msg)
    ))

(export init_prim_io)
(fun init_prim_io () (
    (= stdin  (make_ichan @STDIN_FD))
    (= stdout (make_ochan @STDOUT_FD))
    (= stderr (make_ochan @STDERR_FD))
    (register_static (address stdin))
    (register_static (address stdout))
    (register_static (address stderr))
    (register_static (address ichan_list))
    (register_static (address ochan_list))
    ))

(export finish_prim_io)
(fun finish_prim_io () (
    ; close unclosed channels
    (while ichan_list (
        (prim_close_in (get ichan_list 0))
        ))
    (while ochan_list (
        (prim_close_out (get ochan_list 0))
        ))
    ))

))

(vtable_push)
(compile vm-prim-code)
(vtable_pop)
