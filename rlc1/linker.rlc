;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: linker.rlc 2010-10-01 13:15:43 nineties $
;

(import "config")
(import "rowl-compile")

(compile `executable `(

(var codes null)
(var code_lens null)
(var total_code_len 0)
(var base_addresses null)

(var values null)
(var value_sizes null)
(var total_vsize 0)
(var total_nref 0)

(var output_file null)

; vector of (symbol, file index, address)
(var relocate_symbols null)
; vector of (symbol, file index, address)
(var exported_symbols null)

(fun main (argc argv) (
    (parse_option (address argc) argv)

    (if (< argc 2) (do
        (usage (array_get string argv 0))
        (return 1)
        ))

    (= codes (make_vector 0))
    (= code_lens (make_ivector 0))
    (= base_addresses (make_ivector 0))
    (= values (make_vector 0))
    (= value_sizes (make_ivector 0))
    (= relocate_symbols (make_vector 0))
    (= exported_symbols (make_vector 0))

    ; load all files
    (for i 1  argc (do
        (var file (array_get string argv i))
        (load_file (- i 1) file)
        ))

    (replace_addresses)
    (output_executable output_file)
    (return 0)
    ))

(fun usage (prog) (
    (print_string "USAGE: rowl ")
    (print_string prog)
    (print_string " [-o OUTPUT] [FILE..]\n")
    ))

(fun parse_option (argcp argv) (
    (var argc (get argcp))
    (var new_argc argc)
    (var i 1)
    (var j 1)
    (while (< j argc) (do
        (var arg (array_get string argv j))
        (if (streq arg "-o")
            (do
                (= output_file (array_get string argv (+ j 1)))
                (-= new_argc 2)
                (+= j 2)
            )
            (do
                (array_set string argv i arg)
                (incr i)
                (incr j)
            ))
        ))
    (if (! output_file) (= output_file "a.rlx"))
    (set argcp new_argc)
    ))

(fun read_int_check (ichan) (
    (var val 0)
    (if (< (input_int (address val) ichan) 0)
        (error "invalid file format\n")
        )
    (return val)
    ))

(fun read_string_check (ichan) (
    (var val 0)
    (if (< (input_string (address val) ichan) 0)
        (error "invalid file format\n")
        )
    (return val)
    ))

(fun load_file (index file) (
    (var ic (open_in file))
    (var magic (read_int_check ic))
    (if (!= magic @OBJ_MAGIC)
        (error "invalid file format (magic number mismatch)\n"))

    (var nref (read_int_check ic))
    (+= total_nref nref)

    (var vsize (read_int_check ic))
    (+= total_vsize vsize)
    (var v (array char vsize))
    (if (< (input_bytes ic v vsize) 0) (error "load failed\n"))
    (vector_pushback values v)
    (ivector_pushback value_sizes vsize)

    ; read byte codes
    (var codelen (read_int_check ic))
    (ivector_pushback base_addresses total_code_len)

    (+= total_code_len codelen)
    (var code (array char codelen))
    (if (< (input_bytes ic code codelen) 0) (error "load failed\n"))
    (vector_pushback codes code)
    (ivector_pushback code_lens codelen)

    (load_import_table index ic)
    (load_export_table index ic)

    (close_in ic)
    ))

(fun load_import_table (index ichan) (
    (var nent (read_int_check ichan))
    (for i 0 nent (do
        (var name (read_string_check ichan))
        (var naddr (read_int_check ichan))
        (for j 0 naddr (do
            (var addr (read_int_check ichan))
            (print_string "import: ")
            (print_string name)
            (print_string " index=")
            (print_int index)
            (print_string " addr=")
            (print_int addr)
            (print_char '\n')
            (vector_pushback relocate_symbols
                (make_tuple3 1 name index addr)
                )
            ))
        ))
    ))

(fun load_export_table (index ichan) (
    (var nent (read_int_check ichan))
    (for i 0 nent (do
        (var name (read_string_check ichan))
        (var addr (read_int_check ichan))
        (print_string "export: ")
        (print_string name)
        (print_string " index=")
        (print_int index)
        (print_string " addr=")
        (print_int addr)
        (print_char '\n')
        (vector_pushback exported_symbols
            (make_tuple3 1 name index addr)
            )
        ))
    ))

(fun output_word (ochan word) (
    (output_bytes ochan (address word) 4)
    ))

; XXX: should use hashtable
(fun lookup_symbol (sym) (
    (for i 0 (vector_size exported_symbols) (do
        (var ent (vector_at exported_symbols i))
        (if (streq sym (tuple_at ent 0)) (return ent))
        ))
    (return 0)
    ))

(fun replace_addresses () (
    (for i 0 (vector_size relocate_symbols) (do
        (var ent (vector_at relocate_symbols i))
        (var sym (tuple_at ent 0))
        (var import_index (tuple_at ent 1))
        (var operand_addr (tuple_at ent 2))

        (var info (lookup_symbol sym))
        (if (! info) (error "undefined symbol"))
        (var export_index (tuple_at info 1))
        (var addr (tuple_at info 2))

        (+= addr (ivector_at base_addresses export_index))
        (var real_operand_addr (+ operand_addr (ivector_at base_addresses import_index)))

        (print_string "addr = ")
        (print_int addr)
        (print_string "\n")

        (print_string "real_operand_addr = ")
        (print_int real_operand_addr)
        (print_string "\n")

        (print_string "offset = ")
        (print_int (- addr real_operand_addr))
        (print_string "\n")

        (array_set
            short
            (+ (vector_at codes import_index) operand_addr)
            0
            (+ (- addr real_operand_addr) 1)
            )
        ))
    ))

(fun output_executable (file) (
    (var oc (open_out file))

    (output_word oc @EXE_MAGIC)

    (output_word oc total_nref)

    (output_word oc total_vsize)
    (for i 0 (vector_size values) (do
        (output_bytes oc (vector_at values i) (ivector_at value_sizes i))
        ))

    (output_word oc total_code_len)
    (for i 0 (vector_size codes) (do
        (output_bytes oc (vector_at codes i) (ivector_at code_lens i))
        ))

    (close_out oc)
    ))

    ))
