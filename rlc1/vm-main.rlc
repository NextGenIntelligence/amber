;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-main.rlc 2010-07-09 11:01:10 nineties $
;

(import "stdlib")
(import "vm-compile")

; system calls
(var SYS_EXIT    1)
(var SYS_FORK    2)
(var SYS_WRITE   4)
(var SYS_WAITPID 7)
(var SYS_UNLINK  10)
(var SYS_EXECVE  11)

; file descriptors
(var STDIN_FD 0)
(var STDOUT_FD 1)
(var STDERR_FD 2)

(var vm-main-code `(

(fun strlen (str) (
    (int len 0)
    (while (!= (*8 str) '\0') (
        (incr str)
        (incr len)
        ))
    (return len)
    ))

(export memset)
(fun memset (ptr val size) (
    (for i 0 size (
        ([]=8 ptr i val)
        (incr i)
        ))
    ))

(export error)
(fun error (msg) (
    (syscall @SYS_WRITE @STDERR_FD msg (strlen msg))
    (vmexit 1)
    ))

(export debug)
(fun debug (msg) (
    (syscall @SYS_WRITE @STDOUT_FD msg (strlen msg))
    ))

(export debugi)
(fun debugi (v) (
    (int x (+ (% (/ v 10000000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 1000000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 100000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 10000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 1000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 100000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 10000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 1000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 100) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 10) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% v 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (debug "\n")
    ))

(export debugx)
(string hexdigits "0123456789abcdef")
(fun debugx (v) (
    (int x (*8 (+ hexdigits (% (>> v 28) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 24) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 20) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 16) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 12) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 8) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 4) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 0) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (debug "\n")
    ))

(export vmexit)
(fun vmexit (status) (
    (prim_flush)
    (cleanup_blocks)
    (syscall @SYS_EXIT status)
    ))

(export _start)
(fun _start (p) (
    (int   argc ([] (- (address p) 4) 0))
    (void* argv (address p))

    (if (< argc 2) ((error "USAGE: ./rlvm FILENAME\n")))

    (int stack_bottom)
    (init_gc (address stack_bottom))
    (init_vmstack @DEFAULT_STACK_SIZE)

    ; load program
    (int nref)
    (void* code (read_program ([] argv 1) (address nref)))

    (-= argc 1)
    (+= argv 4)

    (int ret (vm_eval argc argv code nref))
    (vmexit ret)
    ))

))

(vtable_push)
(compile vm-main-code)
(vtable_pop)
