;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-main.rlc 2010-06-17 21:25:44 nineties $
;

(import "vm-assemble")

(var TRUE  1)
(var FALSE 0)

; system calls
(var SYS_EXIT    1)
(var SYS_FORK    2)
(var SYS_READ    3)
(var SYS_WRITE   4)
(var SYS_OPEN    5)
(var SYS_CLOSE   6)
(var SYS_WAITPID 7)
(var SYS_UNLINK  10)
(var SYS_EXECVE  11)

; file descriptors
(var STDIN_FD 0)
(var STDOUT_FD 1)
(var STDERR_FD 2)

(var DEFAULT_STACK_SIZE (* 2 1024 1024)) ; 2MB

(var vm-main-code `(

(fun strlen (str) (
    (int len 0)
    (while (!= (*8 str) '\0') (
        (incl str)
        (incl len)
        ))
    (return len)
    ))

(fun memset (ptr val size) (
    (for i 0 size (
        ([]=8 ptr i val)
        (incl i)
        ))
    ))

(fun error (msg) (
    (syscall @SYS_WRITE @STDERR_FD msg (strlen msg))
    (vmexit 1)
    ))

(fun debug (msg) (
    (syscall @SYS_WRITE @STDOUT_FD msg (strlen msg))
    ))

(fun debugi (v) (
    (int x (+ (% (/ v 10000000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 1000000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 100000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 10000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 1000000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 100000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 10000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 1000) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 100) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% (/ v 10) 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (+ (% v 10) '0'))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (debug "\n")
    ))

(string hexdigits "0123456789abcdef")
(fun debugx (v) (
    (int x (*8 (+ hexdigits (% (>> v 28) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 24) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 20) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 16) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 12) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 8) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 4) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (= x (*8 (+ hexdigits (% (>> v 0) 0x10))))
    (syscall @SYS_WRITE @STDOUT_FD (address x) 1)
    (debug "\n")
    ))

(fun vmexit (status) (
    (cleanup_gc)
    (cleanup_vmstack)
    (syscall @SYS_EXIT status)
    ))

(byte[] 100 test_code @(assemble `(
    ;(imm_int 36)
    ;(vcall 0 4)
    (vcall 2 0)
    exit
    )))

(byte[] 100 fact @(assemble `(
    arg0
    (if_zero hoge)
    dup
    imm_i1
    isub
    (vcall 0 4)
    imul
    ireturn
    (label hoge)
    imm_i1
    ireturn
    )))

(byte[] 100 fib @(assemble `(
    arg0
    imm_i3
    isub
    (if_lt hoge)
    arg0
    imm_i1
    isub
    (scall -11 4)
    ;(vcall 0 4)
    arg0
    imm_i2
    isub
    (scall -17 4)
    ;(vcall 0 4)
    iadd
    ireturn
    (label hoge)
    imm_i1
    ireturn
    )))

(byte[] 100 cons_test @(assemble `(
    imm_i1
    imm_i2
    cons
    car
    ireturn
    )))

(extern _start)
(fun _start (stack_base) (
    (init_gc (address stack_base))
    (init_vmstack @DEFAULT_STACK_SIZE)
    (vm_register_function 0 fib)
    (vm_register_function 1 fact)
    (vm_register_function 2 cons_test)
    (vmexit (vm_eval test_code))
    ))

))
