;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl-assemble.rlc 2010-06-21 00:14:05 nineties $
;

(import "stdlib")
(import "vm-insn")

; insn-name -> (code len)
(var vm_insn_table (do
    (var code 0)
    (var entries ())
    (foreach i vm_instructions (do
        (var name (car i))
        (var len  (cadr i))
        (push entries `(@name @code @len))
        (incl code)
        ))
    (reverse entries)
    ))

(define insn_head   (insn) (if (cons? insn) (car insn) insn))
(define insn_code   (insn) (car  (assoc (insn_head insn) vm_insn_table)))
(define insn_len    (insn) (cadr (assoc (insn_head insn) vm_insn_table)))

(var addr_table ())
(var addr 0)

(define scan_insn (insn)
    (cond
        ((symbol? insn) (set addr (+ addr (insn_len insn))))
        ((== `label (car insn)) (push addr_table `(@(cadr insn) . @addr)))
        ((== `addr  (car insn)) (set addr (+ addr (insn_len `imm_int))))
        (otherwise (set addr (+ addr (insn_len insn))))
        ))

(define scan_fundecl ((_ name body)) (do
    (push addr_table `(@name . @addr))
    (foreach i body (scan_insn i))
    ))

(define scan_decl (decl)
    (cond
        ((== `fun (car decl)) (scan_fundecl decl))
        (otherwise (eprintln "not implemented"))
        ))

(define relative_address (sym) (- (assoc sym addr_table) addr))

(define assemble_insn (insn)
    (cond
        ((symbol? insn)     (do (put_byte (insn_code insn)) (incl addr)))
        ((== `label (car insn)) ())
        ((== `call (car insn)) (do
            (put_byte (insn_code insn))
            (put_word (relative_address (cadr insn)))
            (put_byte (caddr insn))
            (set addr (+ addr (insn_len insn)))
            ))
        ((symbol? (cadr insn)) (do
            (put_byte (insn_code insn))
            (put_word (relative_address (cadr insn)))
            (set addr (+ addr (insn_len insn)))
            ))
        (otherwise (eprintln "not reachable here"))
        ))
(define assemble_fundecl ((_ name body)) (do
    (foreach i body (assemble_insn i))
    ))

(define assemble_decl (decl)
    (cond
        ((== `fun (car decl)) (assemble_fundecl decl))
        (otherwise (eprintln "not implemented"))
        ))

(define assemble (prog) (do
    (set addr 0)
    (foreach decl prog (scan_decl decl))
    (put_long (+ addr 12))
    (put_long 0)
    (put_long 0)

    (set addr 0)
    (foreach decl prog (assemble_decl decl))
    ))

(assemble `(

(fun main (
    imm_i2
    imm_i3
    (call f 4)
    exit
    ))

(fun f (
    arg0
    arg1
    iadd
    ireturn
    ))

    ))
