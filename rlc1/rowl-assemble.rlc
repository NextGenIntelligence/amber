;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl-assemble.rlc 2010-09-28 14:42:34 nineties $
;

(import "stdlib")
(import "config")
(import "vm-insn")

; insn-name -> (code len)
(var vm_insn_table (do
    (var code 0)
    (var entries ())
    (foreach i vm_instructions (do
        (var name (car i))
        (var len  (insn_length (cadr i)))
        (push entries `(@name @code @len))
        (incr code)
        ))
    (reverse entries)
    ))

(define insn_head (insn) (if (cons? insn) (car insn) insn))
(define insn_info (insn) (do
    (var info (assoc (insn_head insn) vm_insn_table))
    (if (nil? info) (error "undefined instruction: " insn))
    info
    ))
(define insn_code (insn) (car  (insn_info insn)))
(define insn_len  (insn) (cadr (insn_info insn)))

(var assemble_mode nil)
(var current_addr 0)

; used in case of assemble_mode = executable
(var label_addr_table ())
(var align8_table ()) ; list of (type name value)
(var align4_table ()) ; list of (type name value)
(var align1_table ()) ; list of (type name value)
(var value_addr_table ())

(var object_table ())
(var object_index 0)

; used in case of assemble_mode = object
(var import_symbols ())
(var export_symbols ())

(define add_import_symbol (type sym addr) (do
    (var found nil)
    (foreach e import_symbols (do
        (if (== sym (car e)) (do
            (setcdr e (cons (type addr) (cdr e)))
            (set found true)
            ))
        ))
    (if (not found) (do
        (push import_symbols `(@sym . (@type (@addr))))
        ))
    ))

(define add_export_symbol (type sym addr) (do
    (var found nil)
    (foreach e export_symbols (do
        (if (== sym (car e)) (do
            (setcdr e (cons (type addr) (cdr e)))
            (set found true)
            ))
        ))
    (if (not found) (do
        (push export_symbols `(@sym . (@type (@addr))))
        ))
    ))

(define type_length (ty) (assoc ty `((char . 1) (int . 4) (long . 8) (string . 4))))
(define value_length (ent) (do
    (var type (car ent))
    (var value (caddr ent))
    (cond
        ((== `string type) (+ (string_len value) 1))
        ((and (cons? type) (== `array (car type))) (* (type_length (cadr type)) (caddr type)))
        (otherwise (type_length (car ent)))
        ))
    )

(define get_alignment (decl) (do
    (var ty (cond
        ((and (cons? (car decl)) (== `array (caar decl))) (cadr (car decl)))
        (otherwise (car decl))
        ))
    (assoc ty `((char . 1) (int . 4) (long . 8) (string . 1))))
    )

(var value_area_size 0)
(define compute_value_addrs () (do
    (var addr 0)
    (foreach ent align8_table (do
        (push value_addr_table `(@(cadr ent) . @addr))
        (set addr (+ addr (value_length ent)))
        ))
    (foreach ent align4_table (do
        (push value_addr_table `(@(cadr ent) . @addr))
        (set addr (+ addr (value_length ent)))
        ))
    (foreach ent align1_table (do
        (push value_addr_table `(@(cadr ent) . @addr))
        (set addr (+ addr (value_length ent)))
        ))
    (set value_area_size addr)
    ))

(define get_valaddr (addr name) (do
    (if (== assemble_mode `executable)
        (do
            (var addr (assoc name value_addr_table))
            (if (nil? addr) (error "unknown value name " name))
            addr
        )
        (do
            (add_import_symbol `value name addr)
            0
        ))
    ))

(define get_objidx (addr name) (do
    (if (== assemble_mode `executable)
        (do
            (var idx (assoc name object_table))
            (if (nil? idx) (error "unknown object name " name))
            idx
        )
        (do
            (add_import_symbol `object name addr)
            0
        ))
    ))

(define scan_insn (insn) (do
    (cond
        ((symbol? insn) (set current_addr (+ current_addr (insn_len insn))))
        ((== `label (car insn)) (push label_addr_table `(@(cadr insn) . @current_addr)))
        ((== `tswitch_ent (car insn)) (set current_addr (+ current_addr 2)))
        (otherwise (set current_addr (+ current_addr (insn_len insn))))
        ))
    )

(define scan_fundecl ((_ name body)) (do
    (push label_addr_table `(@name . @current_addr))
    (foreach i body (scan_insn i))
    ))

(define scan_value_decl (decl) (do
    (var align (get_alignment decl))
    (cond
        ((== align 1) (push align1_table decl))
        ((== align 4) (push align4_table decl))
        ((== align 8) (push align8_table decl))
        (otherwise (error "invalid declaration: " decl))
        )
    ))

(define scan_object_decl ((_ name)) (do
    (push object_table `(@name . @object_index))
    (incr object_index)
    ))

(define scan_export ((_ name)) (do
    ))

(define scan_decl (decl)
    (cond
        ((== `function (car decl))  (scan_fundecl decl))
        ((== `int (car decl))       (scan_value_decl decl))
        ((== `char (car decl))      (scan_value_decl decl))
        ((== `string (car decl))    (scan_value_decl decl))
        ((== `object (car decl))    (scan_object_decl decl))
        ((== `export (car decl))    (scan_export decl))
        ((and (cons? (car decl)) (== `array (caar decl))) (scan_value_decl decl))
        (otherwise (error "scan_decl: not implemented"))
        ))

(define get_reladdr (addr (type sym)) (do
        (var label_addr (assoc sym label_addr_table))
        (if (nil? label_addr) (error "undefined symbol: " sym))
        (- label_addr current_addr)
    ))

(define put_operand (addr opd)
    (cond
        ((== `byte (car opd))    (do (put_byte (cadr opd)) 1))
        ((== `short (car opd))   (do (put_short (cadr opd)) 2))
        ((== `long (car opd))    (do (put_long (cadr opd)) 4))
        ((== `label (car opd))   (do (put_short (get_reladdr addr opd)) 2))
        ((== `value (car opd))   (do (put_short (get_valaddr addr (cadr opd))) 2))
        ((== `object (car opd))  (do (put_short (get_objidx addr (cadr opd))) 2))
        ((== `extfun (car opd)) (do
            (if (!= assemble_mode `object) (error "undefined symbol: " (cadr opd)))
            (add_import_symbol `fun (cadr opd) (+ current_addr 1))
            (put_short 0)
            2
            ))
        (otherwise (error "unknown operand: " opd))
        ))

(define assemble_insn (insn) (do
    (cond
        ((symbol? insn) (do (put_byte (insn_code insn)) (incr current_addr)))
        ((== `label (car insn)) ())
        ((== `tswitch_ent (car insn)) (do
            (put_operand (+ current_addr 1) (cadr insn))
            (set current_addr (+ current_addr 2))
            ))
        (otherwise (do
            (put_byte (insn_code insn))
            (var opd_addr (+ current_addr 1))
            (foreach opd (cdr insn) (do
                (set opd_addr (+ opd_addr (put_operand opd_addr opd)))
                ))
            (set current_addr (+ current_addr (insn_len insn)))
            ))
        )
        ))

(define assemble_fundecl ((_ name body)) (do
    (foreach i body (assemble_insn i))
    ))

(define assemble_decl (decl)
    (cond
        ((== `function (car decl)) (assemble_fundecl decl))
        (otherwise ())
        ))

(define emit_array ((_ type length) values) (do
    (foreach v values (do
        (emit_value (list type nil v))
        (decr length)
        ))
    (var rem (* (type_length type) length))
    (upto i 1 rem (put_byte 0))
    ))

(define emit_value ((type name value))
    (cond
        ((== `int type) (put_long value))
        ((== `char type) (put_byte (if (char? value) (char2int value) value)))
        ((== `string type) (put_str value))
        ((and (cons? type) (== `array (car type))) (emit_array type value))
        (otherwise (error "emit_value: not implemented"))
        ))

(define emit_exec_header () (do
    (put_long EXE_MAGIC)
    ))

; XXX: stub
(define emit_export_table () (do
    (put_long 0)
    ))

(define emit_import_table () (do
    (put_long (length import_symbols)) ; number of entries
    (foreach ent import_symbols (do
        (var name (symbol2s (car ent)))
        (var addrs (caddr ent))
        (put_str name)
        (put_long (length addrs))
        (foreach addr addrs (put_long addr))
        ))
    ))

(define emit_object_header () (do
    (put_long OBJ_MAGIC)
    ))

(define assemble (mode prog) (do
    (set assemble_mode mode)
    (set current_addr 0)
    (foreach decl prog (scan_decl decl))
    (if (== assemble_mode `executable)
        (emit_exec_header)
        (emit_object_header)
        )
    (put_long object_index) ; # of heap objects
    (compute_value_addrs)
    (put_long value_area_size)
    (foreach v align8_table (error "multi-word values are not supported yet"))
    (foreach v align4_table (emit_value v))
    (foreach v align1_table (emit_value v))

    (put_long current_addr) ; length of byte codes

    (set current_addr 0)
    ; generate functions
    (foreach decl prog (assemble_decl decl))

    (if (== assemble_mode `object) (do
        (emit_import_table)
        (emit_export_table)
        ))

    ))

