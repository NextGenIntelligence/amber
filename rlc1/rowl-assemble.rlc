;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl-assemble.rlc 2010-06-29 16:31:49 nineties $
;

(import "stdlib")
(import "vm-insn")

; insn-name -> (code len)
(var vm_insn_table (do
    (var code 0)
    (var entries ())
    (foreach i vm_instructions (do
        (var name (car i))
        (var len  (cadr i))
        (push entries `(@name @code @len))
        (incl code)
        ))
    (reverse entries)
    ))

(define insn_head (insn) (if (cons? insn) (car insn) insn))
(define insn_info (insn) (do
    (var info (assoc (insn_head insn) vm_insn_table))
    (if (nil? info) (error "undefined instruction: " insn))
    info
    ))
(define insn_code (insn) (car  (insn_info insn)))
(define insn_len  (insn) (cadr (insn_info insn)))

(var label_addr_table ())
(var current_addr 0)
(var align8_table ()) ; list of (type name value)
(var align4_table ()) ; list of (type name value)
(var align1_table ()) ; list of (type name value)
(var value_addr_table ())

(define value_length (val)
    (cond
        ((char? val)    1)
        ((int? val)     4)
        ((string? val)  (+ (string_len val) 1))
        (otherwise (error "value_length: not implemented"))
        ))

(define get_alignment (ty) (assoc ty `((char . 1) (int . 4) (long . 8) (string . 1))))

(var value_area_size 0)
(define compute_value_addrs () (do
    (var addr 0)
    (foreach ent align8_table (do
        (push value_addr_table `(@(cadr ent) . @addr))
        (set addr (+ addr (value_length (caddr ent))))
        ))
    (foreach ent align4_table (do
        (push value_addr_table `(@(cadr ent) . @addr))
        (set addr (+ addr (value_length (caddr ent))))
        ))
    (foreach ent align1_table (do
        (push value_addr_table `(@(cadr ent) . @addr))
        (set addr (+ addr (value_length (caddr ent))))
        ))
    (set value_area_size addr)
    ))

(define get_value_addr (name) (do
    (var addr (assoc name value_addr_table))
    (if (nil? addr) (error "unknown value named " name))
    addr
    ))

(var object_table ()) ; list of name

(define scan_insn (insn)
    (cond
        ((symbol? insn) (set current_addr (+ current_addr (insn_len insn))))
        ((== `label (car insn)) (push label_addr_table `(@(cadr insn) . @current_addr)))
        ((== `addr  (car insn)) (set current_addr (+ current_addr (insn_len `imm_int16))))
        (otherwise (set current_addr (+ current_addr (insn_len insn))))
        ))

(define scan_fundecl ((_ name body)) (do
    (push label_addr_table `(@name . @current_addr))
    (foreach i body (scan_insn i))
    ))

(define scan_value_decl (decl) (do
    (var align (get_alignment (car decl)))
    (cond
        ((== align 1) (push align1_table decl))
        ((== align 4) (push align4_table decl))
        ((== align 8) (push align8_table decl))
        (otherwise (error "invalid type: " (car decl)))
        )))

(define scan_decl (decl)
    (cond
        ((== `fun (car decl))       (scan_fundecl decl))
        ((== `int (car decl))       (scan_value_decl decl))
        ((== `char (car decl))      (scan_value_decl decl))
        ((== `string (car decl))    (scan_value_decl decl))
        (otherwise (error "scan_decl: not implemented"))
        ))

(define relative_address (sym) (do
    (var label_addr (assoc sym label_addr_table))
    (if (nil? label_addr) (error "undefined symbol: " sym))
    (- label_addr current_addr))
    )

;(define is_load_store (head) (member? head `(loadbv loadwv loadl loadav storebv storewv)))
(define put_operand (opd)
    (cond
        ((== `byte (car opd))   (put_byte (cadr opd)))
        ((== `short (car opd))  (put_short (cadr opd)))
        ((== `long (car opd))   (put_long (cadr opd)))
        ((== `address (car opd)) (put_short (relative_address (cadr opd))))
        (otherwise (error "unknown operand: " opd))
        ))

(define assemble_insn (insn)
    (cond
        ((symbol? insn) (do (put_byte (insn_code insn)) (incl current_addr)))
        ((== `label (car insn)) ())
        (otherwise (do
            (put_byte (insn_code insn))
            (foreach opd (cdr insn) (put_operand opd))
            (set current_addr (+ current_addr (insn_len insn)))
            ))
            ))

(define assemble_fundecl ((_ name body)) (do
    (foreach i body (assemble_insn i))
    ))

(define assemble_decl (decl)
    (cond
        ((== `fun (car decl)) (assemble_fundecl decl))
        (otherwise ())
        ))

(define emit_value ((type name value))
    (cond
        ((== `int type) (put_long value))
        ((== `char type) (put_byte (char2int value)))
        ((== `string type) (put_str value))
        (otherwise (error "emit_value: not implemented"))
        ))

(define assemble (prog) (do
    (set current_addr 0)
    (foreach decl prog (scan_decl decl))
    (compute_value_addrs)
    (put_long (+ (+ current_addr 12) value_area_size))
    (put_long 0)
    (put_long value_area_size)
    (foreach v align8_table (error "multi-word values are not supported yet"))
    (foreach v align4_table (emit_value v))
    (foreach v align1_table (emit_value v))
    (set current_addr 0)
    (foreach decl prog (assemble_decl decl))
    ))

