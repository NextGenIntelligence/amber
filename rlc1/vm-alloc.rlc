;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-alloc.rlc 2010-06-02 21:52:52 nineties $
;

(var SYS_MUNMAP  91)
(var SYS_MMAP2   192)

; mmap options
(var PROT_READ  0x1)
(var PROT_WRITE 0x2)
(var PROT_EXEC  0x4)
(var PROT_SEM   0x8)
(var PROT_NONE  0x0)
(var MAP_SHARED     0x1)
(var MAP_PRIVATE    0x2)
(var MAP_TYPE       0xf)
(var MAP_FIXED      0x10)
(var MAP_ANONYMOUS  0x20)

(var BLOCK_SIZE (* 1024 1024)) ; 1MB
(var BLOCK_MASK (- BLOCK_SIZE 1))
(var MAX_BLOCKS 4096) ; 4096 is enough for 32-bit machine

(var vm-alloc-code `(

(fun mmap2 (addr size) (
    (void* ptr (syscall @SYS_MMAP2 addr size
        @(| PROT_READ PROT_WRITE PROT_EXEC) @(| MAP_ANONYMOUS MAP_PRIVATE) -1 0))
    (if (&& (<= -128 ptr) (< ptr 0))  ((error "ERROR: mmap2 failed\n")))
    (return ptr)
    ))

(fun munmap (addr size) (
    (syscall @SYS_MUNMAP addr size)
    ))

(int   num_block 0)
(void* next_addr 0)
(void* free_first 0)
(void* free_last 0)
(int[] @MAX_BLOCKS block_used)

(fun alloc_block (size) (
    (+= size @BLOCK_SIZE)
    (void* ptr (mmap2 0 size))
    (void* slop (& ptr @BLOCK_MASK))
    (if (< (munmap ptr (- @BLOCK_SIZE slop)) 0) ((error "ERROR: munmap failed\n")))
    (if (&& (> slop 0) (< (munmap (- (+ ptr @BLOCK_SIZE) slop) slop) 0))
        ((error "ERROR: munmap failed\n")))
    (= ptr (- (+ ptr size) slop))
    (return ptr)
    ))


(fun alloc_block_fast () (
    (void* addr)
    (if (> (+ num_block 1) @MAX_BLOCKS) ((error "ERROR: too many blocks\n")))
    (if (== next_addr 0)
        ((= addr (alloc_block @BLOCK_SIZE)))
        (
            (= addr (mmap2 @BLOCK_SIZE))
            (if (!= (& addr @BLOCK_MASK) 0) (
                    (if (< (munmap addr @BLOCK_SIZE) 0) ((error "ERROR: munmap failed\n")))
                    (= addr (alloc_block @BLOCK_SIZE))
                ))
        ))
    (= next_addr (+ addr @BLOCK_SIZE))
    (= free_first addr)
    (= free_last  next_addr)
    ([]= block_used (/ addr @BLOCK_SIZE) @TRUE)
    ))


))
