;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: stdlib.rlc 2010-05-31 11:18:25 nineties $
;

(var rewrite (macro (name params body) `(var @name (macro @params @body))))
(rewrite define (name params body) `(var @name (lambda @params @body)))

;=== aliases ===
(var otherwise true)

(var + add)
(var - sub)
(var * mul)
(var & bitand)
(var | bitor)
(var ^ bitxor)
(var == eq)
(var != ne)
(var < lt)
(var > gt)
(var <= le)
(var >= ge)

;=== utility ===
(define nil? (a) (if a nil true))

(rewrite incl (x) `(set @x (+ @x 1)))
(rewrite decl (x) `(set @x (- @x 1)))

(define [] (idx container)
    (cond
        ((string? container) (string_get container idx))
        ((array? container) (array_get container idx))
        (otherwise (eprintln "invalid container for operator [] : " container))
        ))

(rewrite and (lhs rhs) `(if @lhs true @rhs))
(rewrite or  (lhs rhs) `(if @lhs @rhs nil))

;=== loops ===
(rewrite foreach (it list body) `(do
    (var ls @list)
    (while ls (do
        (var @it (car ls))
        @body
        (set ls (cdr ls))
        )
    )
    ))

(rewrite for (it beg end body) `(do
    (var @it @beg)
    (var end_ @end)
    (while (<= @it end_) (do
        @body
        (set @it (+ @it 1))
        )
    )))

;=== list operations ===
(define cadr   (list) (car (cdr list)))
(define caddr  (list) (car (cdr (cdr list))))
(define cadddr (list) (car (cdr (cdr list))))
(define caar   (list) (car (car list)))
(define cddr   (list) (cdr (cdr list)))
(define cdar   (list) (cdr (car list)))
(define nth    (idx list) (if (== idx 0) (car list) (nth (- idx 1) (cdr list))))

(rewrite setcar (list v) `(set @list (cons @v (cdr @list))))
(rewrite setcdr (list v) `(set @list (cons (car @list) @v)))

(define member (val list)
    (cond
        ((nil? list) nil)
        ((== key (car list)) true)
        (otherwise (member val (cdr list)))
        ))

(define assoc (key list)
    (cond
        ((nil? list) nil)
        ((== key (caar list)) (cdar list))
        (otherwise (assoc key (cdr list)))
        )
    )

;=== I/O functions ===

(define println params (do
    (print . params)
    (print '\n')
    ))

(define eprintln params (do
    (eprint . params)
    (eprint '\n')
    ))
