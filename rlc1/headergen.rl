(%
 % rowl - generation 1
 % Copyright (C) 2010 nineties
 %
 % $Id: headergen.rl 2010-04-09 09:09:08 nineties $
 %);

(% automatic header file generation %);

include (stddef, code);
export (headergen);

(% p0: output channel, p1: header filename %);
print_header: (p0, p1) {
    fputs(p0, "(% ");
    fputs(p0, p1);
    fputs(p0, " generated by rlc1 %)\n"); (% TODO: output date %);
};

gen_ident_decl: (p0, p1) {
    if (p1[0] != NODE_IDENTIFIER) {
        fputs(stderr, "ERROR: invalid export declaration\n");
        exit(1);
    };

    fputs(p0, "external ");
    fputs(p0, get_ident_name(p1));
    fputs(p0, " @ ");
    put_type(p0, p1[1]);
};

export_item: (p0, p1) {
    allocate(1);
    x0 = p1[1]; (% exported item %);
    if (x0[0] == NODE_DECL) {
        gen_ident_decl(p0, x0[2]);
        return;
    };
    if (x0[0] == NODE_TYPEDECL) {
        put_item(p0, x0);
        return;
    };
    fputs(stderr, "ERROR: not reachable\n");
    exit(1);
};

imported: NULL;

(% p0: header filename, p1: program %);
headergen: (p0, p1) {
    allocate(3);
    x0 = p1[1]; (% item list %);
    x1 = open_out(p0); (% output channel %);
    imported = mkset(&strhash, &streq, 0);
    print_header(x1, p0);
    while (x0 != NULL) {
        x2 = ls_value(x0);
        if (x2[0] == NODE_IMPORT) {
	    if (set_contains(imported, x2[1]) == FALSE) {
		set_add(imported, x2[1]);
		put_item(x1, x2);
		fputs(x1, ";\n");
	    };
        };
        if (x2[0] == NODE_EXPORT) {
            export_item(x1, x2);
            fputs(x1, ";\n");
        };
        x0 = ls_next(x0);
    };
    close_out(x1);
};
