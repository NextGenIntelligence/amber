;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-prim.rlc 2010-07-10 14:13:11 nineties $
;

; primitive functions

(import "stdlib")
(import "vm-compile")

(var SYS_READ 3)
(var SYS_WRITE 4)
(var SYS_OPEN 5)
(var SYS_CLOSE 6)

(var O_RDONLY 0)
(var O_WRONLY 1)
(var O_RDWR   2)
(var O_CREAT  64)
(var O_TRUNC  512)
(var O_APPEND 1024)

(var STDIN_FD 0)
(var STDOUT_FD 1)
(var STDERR_FD 2)

(var RDBUFSZ 512) ; read buffer size
(var WRBUFSZ 512) ; write buffer size
(var EOF -1)

(var vm-prim-code `(

(fun strlen (str) (
    (int len 0)
    (while (!= (*8 str) '\0') (
        (incr str)
        (incr len)
        ))
    (return len)
    ))

(extern int cmd_argc)
(extern void* cmd_argv)
(export prim_cmd_argc)
(fun prim_cmd_argc () ((return cmd_argc)))
(export prim_cmd_argv)
(fun prim_cmd_argv () ((return cmd_argv)))

(export prim_memset)
(fun prim_memset (ptr val bytes) (
    (for i 0 bytes (
        (set8 ptr i val)
        ))
    ))

(export prim_memcpy)
(fun prim_memcpy (dst src bytes) (
    (for i 0 bytes (
        (set8 dst i (get8 src i))
        ))
    ))

; vector of characters
(fun make_cvector_with_capa (size capa) (
    (void* buf (allocate_plain capa))
    (memset buf 0 capa)
    (void* tup (allocate_tuple 3 1))
    (set tup 0 buf)
    (set tup 1 size)
    (set tup 2 capa)
    (return tup)
    ))

(export prim_make_cvector)
(fun prim_make_cvector (size) (
    (if (!= size 0)
        (return (make_cvector_with_capa size size))
        (return (make_cvector_with_capa 0 10))
        )
    ))

(export prim_cvector_size)
(fun prim_cvector_size (vec) (
    (return (get vec 1))
    ))

(export prim_cvector_at)
(fun prim_cvector_at (vec idx) (
    (return (get8 (get vec 0) idx))
    ))

(export prim_cvector_put)
(fun prim_cvector_put (vec idx val) (
    (set8 (get vec 0) idx val)
    ))

(export prim_cvector_reserve)
(fun prim_cvector_reserve (vec capa) (
    (if (< (get vec 2) capa) (do
        (void* new_buf (allocate_plain capa))
        (prim_memcpy new_buf (get vec 0) (get vec 1))
        (set vec 0 new_buf)
        (set vec 2 capa)
        ))
    ))

(export prim_cvector_resize)
(fun prim_cvector_resize (vec new_size) (
    (if (> new_size (get vec 2)) (prim_cvector_reserve vec new_size))
    (set vec 1 new_size)
    ))

(export prim_cvector_pushback)
(fun prim_cvector_pushback (vec value) (
    (if (== (get vec 1) (get vec 2))
        (prim_cvector_reserve vec (* 2 (get vec 2)))
        )
    (int sz (get vec 1))
    (prim_cvector_put vec sz value)
    (set vec 1 (+ sz 1))
    ))

; containers for internal purpose
(fun make_cons (car cdr) (
    (void* c (allocate_cons))
    (set c 0 car)
    (set c 1 cdr)
    (return c)
    ))

(fun remove_from_list (ls elem) (
    (if (! ls) (return 0))
    (if (== (get ls 0) elem)
        (
            (return (get ls 1))
        )
        (
            (set ls 1 (remove_from_list (get ls 1) elem))
            (return ls)
        )
        )
    ))

(fun make_array (size) (
    (return (allocate_plain size))
    ))

(fun make_tuple1 (nboxed arg0) (
    (void* t (allocate_tuple 1 nboxed))
    (set t 0 arg0)
    (return t)
    ))

(fun make_tuple2 (nboxed arg0 arg1) (
    (void* t (allocate_tuple 2 nboxed))
    (set t 0 arg0)
    (set t 1 arg1)
    (return t)
    ))

(fun make_tuple3 (nboxed arg0 arg1 arg2) (
    (void* t (allocate_tuple 3 nboxed))
    (set t 0 arg0)
    (set t 1 arg1)
    (set t 2 arg2)
    (return t)
    ))

(fun make_tuple4 (nboxed arg0 arg0 arg1 arg2 arg3) (
    (void* t (allocate_tuple 4 nboxed))
    (set t 0 arg0)
    (set t 1 arg1)
    (set t 2 arg2)
    (set t 3 arg3)
    (return t)
    ))

(fun make_tuple5 (nboxed arg0 arg0 arg1 arg2 arg3 arg4) (
    (void* t (allocate_tuple 5 nboxed))
    (set t 0 arg0)
    (set t 1 arg1)
    (set t 2 arg2)
    (set t 3 arg3)
    (set t 4 arg4)
    (return t)
    ))

; I/O functions
(void* ichan_list 0) ; list of opened ichan
(void* ochan_list 0) ; list of opened ochan
(void* stdin)
(void* stdout)
(void* stderr)

(fun make_ichan (fd) (
    (void* chan (make_tuple4 1 (make_array @RDBUFSZ) fd 0 0))
    (= ichan_list (make_cons chan ichan_list))
    (return chan)
    ))

(fun make_ochan (fd) (
    (void* chan (make_tuple3 1 (make_array @WRBUFSZ) fd 0))
    (= ochan_list (make_cons chan ochan_list))
    (return chan)
    ))

(export prim_open_in)
(fun prim_open_in (path) (
    (int fd (syscall @SYS_OPEN path @O_RDONLY))
    (if (< fd 0) ((error "open failed")))
    (return (make_ichan fd))
    ))

(export prim_close_in)
(fun prim_close_in (ichan) (
    (= ichan_list (remove_from_list ichan_list ichan))
    (syscall @SYS_CLOSE (get ichan 1))
    ))

(export prim_open_out)
(fun prim_open_out (path) (
    (int fd (syscall @SYS_OPEN path @(| O_WRONLY O_CREAT O_TRUNC) 0644))
    (if (< fd 0) ((error "open failed")))
    (return (make_ochan fd))
    ))

(export prim_flush)
(fun prim_flush (ochan) (
    (if (> (get ochan 2) 0) (
        (syscall @SYS_WRITE (get ochan 1) (get ochan 0) (get ochan 2))
        (set ochan 2 0)
        ))
    ))

(export prim_close_out)
(fun prim_close_out (ochan) (
    (prim_flush ochan)
    (= ochan_list (remove_from_list ochan_list ochan))
    (syscall @SYS_CLOSE (get ochan 1))
    ))

(fun fill_ichan (ichan) (
    (if (!= (get ichan 2) (get ichan 3)) (
        (return))
        )
    ; here input buffer is empty
    (int sz (syscall @SYS_READ (get ichan 1) (get ichan 0) @RDBUFSZ))
    (set ichan 2 0)
    (set ichan 3 sz)
    ))

(export prim_input_char)
(fun prim_input_char (ichan) (
    (fill_ichan ichan)
    (if (== (get ichan 2) (get ichan 3)) (
        (return -1) ; EOF
        ))
    (int c (get8 (get ichan 0) (get ichan 2)))
    (set ichan 2 (+ (get ichan 2) 1))
    (return c)
    ))

(export prim_read_char)
(fun prim_read_char () (
    (return (prim_input_char stdin))
    ))

(export prim_output_char)
(fun prim_output_char (ochan c) (
    (if (== (get ochan 1) @STDERR_FD) (
        ; Do not buffer outputs to stderr
        (syscall @SYS_WRITE @STDERR_FD (address c) 1)
        (return)
        ))
    (set8 (get ochan 0) (get ochan 2) c)
    (set ochan 2 (+ (get ochan 2) 1))
    (if (|| (== c '\n') (== (get ochan 2) @WRBUFSZ)) (
        (prim_flush ochan)
        (return)
        ))
    ))

(export prim_output_string)
(fun prim_output_string (ochan str) (
    (if (== (get ochan 1) @STDERR_FD) (
        ; Do not buffer outputs to stderr
        (syscall @SYS_WRITE @STDERR_FD str (strlen str))
        (return)
        ))
    (while (!= (*8 str) '\0') (
        (prim_output_char ochan (*8 str))
        (incr str)
        ))
    ))

(char[] 10 output_int_digits)
(export prim_output_int)
(fun prim_output_int (ochan num) (
    (if (< num 0) (
        (prim_output_char ochan '-')
        (prim_output_int (neg num))
        (return)
        ))
    (set8 output_int_digits 0 (+ (% num 10) '0'))
    (/= num 10)
    (int i 0)
    (while (!= num 0) (
        (incr i)
        (set8 output_int_digits i (+ (% num 10) '0'))
        (/= num 10)
        ))
    (while (>= i 0) (
        (prim_output_char ochan (get8 output_int_digits i))
        (decr i)
        ))
    ))

(export prim_print_char)
(fun prim_print_char (c) (
    (return (prim_output_char stdout c))
    ))

(export prim_print_string)
(fun prim_print_string (str) (
    (return (prim_output_string stdout str))
    ))

(export prim_print_int)
(fun prim_print_int (num) (
    (return (prim_output_int stdout num))
    ))

(export prim_error)
(fun prim_error (msg) (
    (error msg)
    ))

(export init_prim)
(fun init_prim () (
    (= stdin  (make_ichan @STDIN_FD))
    (= stdout (make_ochan @STDOUT_FD))
    (= stderr (make_ochan @STDERR_FD))
    (register_static (address stdin))
    (register_static (address stdout))
    (register_static (address stderr))
    (register_static (address ichan_list))
    (register_static (address ochan_list))
    ))

(export finish_prim)
(fun finish_prim () (
    ; close unclosed channels
    (while ichan_list (
        (prim_close_in (get ichan_list 0))
        ))
    (while ochan_list (
        (prim_close_out (get ochan_list 0))
        ))
    ))

))

(vtable_push)
(compile vm-prim-code)
(vtable_pop)
