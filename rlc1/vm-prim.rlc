;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-prim.rlc 2010-07-09 11:12:11 nineties $
;

; primitive functions

(var SYS_READ 3)
(var SYS_WRITE 4)
(var SYS_OPEN 5)
(var SYS_CLOSE 6)

(var O_RDONLY 0)
(var O_WRONLY 1)
(var O_RDWR   2)
(var O_CREAT  64)
(var O_TRUNC  512)
(var O_APPEND 1024)

(var STDIN_FD 0)
(var STDOUT_FD 1)

(var RDBUFSZ 512) ; read buffer size
(var WRBUFSZ 512) ; write buffer size
(var EOF -1)

(define assign_indices (table) (do
    (var idx 0)
    (map (lambda (ent) (do
        (incr idx)
        `(@ent @(- idx 1) @(tosym (++ "prim_" ent)))
        )) table)
    ))

(var prim_table (assign_indices `(
    ; I/O functions
    flush getc nextc putc puti puts error
    ; System operations
    cmd_argc cmd_argv
    ; memory operations
    memset memcpy
    ; vector of characters
    make_cvector cvector_at cvector_put cvector_reserve cvector_resize cvector_pushback
    )))

(var vm-prim-code `(

(fun strlen (str) (
    (int len 0)
    (while (!= (*8 str) '\0') (
        (incr str)
        (incr len)
        ))
    (return len)
    ))

(char[] @RDBUFSZ stdin_buf)
(int stdin_beg 0)
(int stdin_end 0)

(char[] @WRBUFSZ stdout_buf)
(int stdout_pos 0)

; flush stdout
(export prim_flush)
(fun prim_flush () (
    (if (> stdout_pos 0) (
        (syscall @SYS_WRITE @STDOUT_FD stdout_buf stdout_pos)
        (= stdout_pos 0)
        ))
    ))

(fun fill_stdin_buf () (
    (if (== stdin_beg stdin_end) (
        ; input buffer is empty
        (int sz (syscall @SYS_READ @STDIN_FD stdin_buf @RDBUFSZ))
        (= stdin_end sz)
        (= stdin_beg 0)
        ))
    ))

(fun prim_getc () (
    (fill_stdin_buf)
    (if (== stdin_beg stdin_end) ((return @EOF)))
    (int c (*8 (+ stdin_buf stdin_beg)))
    (incr stdin_beg)
    (return c)
    ))

(fun prim_nextc () (
    (fill_stdin_buf)
    (fill_stdin_buf)
    (if (== stdin_beg stdin_end) ((return @EOF)))
    (return (*8 (+ stdin_buf stdin_beg)))
    ))

(fun prim_putc (c) (
    ([]=8 stdout_buf stdout_pos c)
    (incr stdout_pos)
    (if (== stdout_pos @WRBUFSZ) (
        (prim_flush)
        (return)
        ))
    (if (== '\n' c) (
        (prim_flush)
        ))
    ))

(fun prim_puts (str) (
    (char c (*8 str))
    (while c (
        (prim_putc c)
        (incr str)
        (= c (*8 str))
        ))
    ))

(char[] 10 puti_digits)
(fun prim_puti (n) (
    (if (< n 0) (
        (prim_putc '-')
        (= n (neg n))
        ))
    ([]=8 puti_digits 0 (+ (% n 10) '0'))
    (= n (/ n 10))
    (int i 0)
    (while (!= n 0) (
        (incr i)
        ([]=8 puti_digits i (+ (% n 10) '0'))
        (= n (/ n 10))
        ))
    (while (>= i 0) (
        (prim_putc (*8 (+ puti_digits i)))
        (decr i)
        ))
    ))

(fun prim_error (msg) (
    (error msg)
    ))

(fun prim_cmd_argc () ((return cmd_argc)))
(fun prim_cmd_argv () ((return cmd_argv)))

(fun prim_memset (ptr val bytes) (
    (for i 0 bytes (
        ([]=8 ptr i val)
        ))
    ))

(fun prim_memcpy (dst src bytes) (
    (for i 0 bytes (
        ([]=8 dst i ([]8 src i))
        ))
    ))

; vector of characters
(fun make_cvector_with_capa (size capa) (
    (void* buf (allocate_plain capa))
    (memset buf 0 capa)
    (void* tup (allocate_tuple 3 1))
    ([]= tup 0 buf)
    ([]= tup 1 size)
    ([]= tup 2 capa)
    (return tup)
    ))

(fun prim_make_cvector (size) (
    (if (!= size 0)
        (return (make_cvector_with_capa size size))
        (return (make_cvector_with_capa 0 10))
        )
    ))

(fun prim_cvector_at (vec idx) (
    (return ([]8 ([] vec 0) idx))
    ))

(fun prim_cvector_put (vec idx val) (
    ([]=8 ([] vec 0) idx val)
    ))

(fun prim_cvector_reserve (vec capa) (
    (if (< ([] vec 2) capa) (do
        (void* new_buf (allocate_plain capa))
        (prim_memcpy new_buf ([] vec 0) ([] vec 1))
        ([]= vec 0 new_buf)
        ([]= vec 2 capa)
        ))
    ))

(fun prim_cvector_resize (vec new_size) (
    (if (> new_size ([] vec 2)) (prim_cvector_reserve vec new_size))
    ([]= vec 1 new_size)
    ))

(fun prim_cvector_pushback (vec value) (
    (if (== ([] vec 1) ([] vec 2))
        (prim_cvector_reserve vec (* 2 ([] vec 2)))
        )
    (int sz ([] vec 1))
    (prim_cvector_put vec sz value)
    ([]= vec 1 (+ sz 1))
    ))
))

