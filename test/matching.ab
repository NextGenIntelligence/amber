# $Id: matching.ab 2013-03-05 04:37:52 nineties $

import unittest

module Parser {
    test_code
        ::= pattern "matches" pattern
            { `((!$0 -> true)(!$2) == true) }
          | pattern "doesn't" "match" pattern 
            { `((!$0 -> true)(!$3) == undef) }
}

test "pattern-matching engine (positive check)"
    "dontcare pattern":         _                    matches 0
    "variable pattern":         x                    matches 0
    "literal pattern (int)":    0                    matches 0
    "literal pattern (string)": "Hello"              matches "Hello"
    "literal pattern (list)":   [0,1,2,"Hello"]      matches [0,1,2,"Hello"]
    "literal pattern (list2)":  []                   matches []
    "literal pattern (node)":   SomeNode{0,1,2}      matches \SomeNode{0,1,2}
    "ellipsis pattern (list)":  [0,1,2,...]          matches [0,1,2,3,4]
    "ellipsis pattern (node)":  SomeNode{0,1,...}    matches \SomeNode{0,1,2,3}
    "head pattern (Int)":       (x @ Int)            matches 0
    "head pattern (String)":    (x @ String)         matches "Hello"
    "extended domain pattern":  (x @ SomeNode{y, z}) matches \SomeNode{0, 1}

test "pattern-matching engine (negative check)"
    "literal pattern (int)":    0                    doesn't match 1
    "literal pattern (int2)":   0                    doesn't match "Hello"
    "literal pattern (string)": "Hello"              doesn't match "World"
    "literal pattern (list)":   [0,1,2]              doesn't match [0,1,2,3]
    "literal pattern (list2)":  [0,1,2]              doesn't match [0,1]
    "literal pattern (list3)":  [0,1,2]              doesn't match [2,1,0]
    "literal pattern (node)":   SomeNode{0,1,2}      doesn't match \SomeNode{0,1,2,3}
    "literal pattern (node2)":  SomeNode{0,1,2}      doesn't match \SomeNode{2,1,0}
    "ellipsis pattern (list)":  [0,1,2,...]          doesn't match [0,1]
    "ellipsis pattern (list2)": [0,1,2,...]          doesn't match [0,2,1]
    "ellipsis pattern (node)":  SomeNode{0,1,...}    doesn't match \SomeNode{0}
    "ellipsis pattern (node2)": SomeNode{0,1,...}    doesn't match \SomeNode{1,1}
    "head pattern (Int)":       (x @ Int)            doesn't match "Hello"
    "head pattern (String)":    (x @ String)         doesn't match 0
    "extended domain pattern":  (x @ SomeNode{y, z}) doesn't match \SomeNode{0, 1, 2}

test "pattern-matching engine (guard clauses)" {
    "positive check": (x when x > 0 -> true)(1) == true
    "negative check": (x when x > 0 -> false)(0) == undef
}
