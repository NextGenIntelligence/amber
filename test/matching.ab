include "unittest.ab"
import unittest

block
    ::= expr "matches" expr
        { `{ try (!$0 -> true)(!$2) catch (e -> false) } }
      | expr "doesn't" "matches" expr 
        { `{ try (!$0 -> false)(!$3) catch (e -> true) } }

test "pattern-matching engine (positive check)" {
    "dontcare pattern"         _                 matches 0
    "variable pattern"         x                 matches 0
    "literal pattern (int)"    0                 matches 0
    "literal pattern (string)" "Hello"           matches "Hello"
    "literal pattern (list)"   [0,1,2,"Hello"]   matches [0,1,2,"Hello"]
    "literal pattern (node)"   SomeNode{0,1,2}   matches \SomeNode{0,1,2}
    "ellipsis pattern (list)"  [0,1,2,...]       matches [0,1,2,3,4]
    "ellipsis pattern (node)"  SomeNode{0,1,...} matches \SomeNode{0,1,2,3}
    "head pattern (Int)"       (x @ Int)         matches 0
    "head pattern (String)"    (x @ String)      matches "Hello"
}

test "pattern-matching engine (negative check)" {
    "literal pattern (int)"    0                 doesn't matches 1
    "literal pattern (int2)"   0                 doesn't matches "Hello"
    "literal pattern (string)" "Hello"           doesn't matches "World"
    "literal pattern (list)"   [0,1,2]           doesn't matches [0,1,2,3]
    "literal pattern (list2)"  [0,1,2]           doesn't matches [0,1]
    "literal pattern (list3)"  [0,1,2]           doesn't matches [2,1,0]
    "literal pattern (node)"   SomeNode{0,1,2}   doesn't matches \SomeNode{0,1,2,3}
    "literal pattern (node2)"  SomeNode{0,1,2}   doesn't matches \SomeNode{2,1,0}
    "ellipsis pattern (list)"  [0,1,2,...]       doesn't matches [0,1]
    "ellipsis pattern (list2)" [0,1,2,...]       doesn't matches [0,2,1]
    "ellipsis pattern (node)"  SomeNode{0,1,...} doesn't matches \SomeNode{0}
    "ellipsis pattern (node2)" SomeNode{0,1,...} doesn't matches \SomeNode{1,1}
    "head pattern (Int)"       (x @ Int)         doesn't matches "Hello"
    "head pattern (String)"    (x @ String)      doesn't matches 0
}
