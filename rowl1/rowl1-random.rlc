;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-random.rlc 2013-03-16 23:09:10 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-node")
(import "rowl1-compile")
(import "rowl1-util")
(import "rowl1-error")
(import "rowl1-module")
(import "rowl1-numeric")
(import "rowl1-bigint")
(import "rowl1-float")

(extern object current_loc)

(fun srand0 () (
    (srand (field_get (gettimeofday) 0)) ; get second
    (return @C_TRUE)
    ))

(fun srandi (seed) (
    (if (& seed 1) (do
        (if (< seed 0) (goto seed_error))
        (srand (unbox seed))
        (return @C_TRUE)
        ))
    (if (!= (node_type seed) @BigIntE) (goto seed_error))
    (if (bint_is_negative seed) (goto seed_error))

    (srand_array (bint_digits seed) (bint_ndigit seed))
    (return @C_TRUE)

    (label seed_error)
    (throw (invalid_argument current_loc
        (string "Seed must be a non-negative integer")
        seed))
    ))

(var inv4294967295
    (float_from_s "2.32830643708079738e-10")) ; 1.0/4294967295.0
(var inv4294967296
    (float_from_s "2.32830643653869629e-10")) ; 1.0/4294967296.0
(var half (float_from_s "0.5"))
(var one  (float_from_s "1.0"))

; generate random number in [0,1)
(fun randf () (
    (return (fmul (uitof (randui)) inv4294967296))
    ))

(fun randi (n) (
    (= n (unbox n))
    (if (<= n 0) (throw (invalid_argument current_loc
        (string "Upper limit must be positive")
        n
        )))
    (var mask (- (<< 1 (+ (bsr n) 1)) 1))
    (var x (& (randui) mask))
    (while (>= x n) (= x (& (randui) mask)))
    (return (box x))
    ))

(fun randbi (n) (
    (if (bint_is_negative n) (throw (invalid_argument current_loc
        (string "Upper limit must be positive")
        n
        )))
    (var m (- (bint_ndigit n) 1))

    (var x (allocate_bint (+ m 1)))
    (bint_set_ndigit x (+ m 1))

    (var mask (- (<< 1 (+ (bsr (bint_digit n m)) 1)) 1))

    (for i 0 m (bint_set_digit x i (randui)))
    (bint_set_digit x m (& (randui) mask))
    (while (>= (bigcmp x n) 0) (bint_set_digit x m (& (randui) mask)))
    ; compute the length
    (while (&& (>= m 0) (== (bint_digit x m) 0)) (-= m 1))
    (if (< m 0) (= m 0))
    (bint_set_ndigit x (+ m 1))
    (return x)
    ))

(fun randr_int (lopen ropen min max) (do
    (if lopen (= min (add min (box 1))))
    (if ropen (= max (sub max (box 1))))
    (var width (add (sub max min) (box 1)))
    (var v (call1 (to_sym "rand") width))
    (return (add v min))
    ))

(fun randr_float (lopen ropen min max) (do
    (var v (uitof (randui)))
    (fsub max min)
    (fmul v max)
    (if lopen
        (do
            (if ropen
                (fadd v half)
                (fadd v one)
                )
            (fmul v inv4294967296)
            (fadd v min)
        )
        (do
            (if ropen
                (fmul v inv4294967296)
                (fmul v inv4294967295)
                )
            (fadd v min)
        ))
    (return v)
    ))

(fun randr (rng) (
    (var size (node_size rng))
    (if (|| (<= size 1) (<= 4 size)) (goto range_error))
    (var min (node_arg rng 0))
    (var max (node_arg rng 1))
    (var lopen 0)
    (var ropen 0)
    (if (== size 3) (do
        (var option (node_arg rng 2))
        (if (== option (to_sym "Open")) (do (= lopen 1) (= ropen 1))
        (if (== option (to_sym "LeftOpen")) (= lopen 1)
        (if (== option (to_sym "RightOpen")) (= ropen 1)
            (goto range_error)
            )))
        ))

    (if (!= (node_bhead min) (node_bhead max)) (do
        (var r (do_coerce_internal min max))
        (if (== r @C_UNDEF) (goto range_error))
        (= min (car r))
        (= max (cadr r))
        ))

    (var ty (node_type min))
    (if (|| (== ty @IntE) (== ty @BigIntE))
        (return (randr_int lopen ropen min max))
    (if (== ty @FloatE)
        (return (randr_float lopen ropen min max))
        ))

    (label range_error)
    (throw (invalid_argument current_loc
        (string "Invalid range")
        rng))
    ))

(export fun setup_random (std) (
    (srand0)
    (add_function0 std (to_sym "srand") srand0 0)
    (add_function1 std (to_sym "srand") (domainP Int) srandi 0)
    (add_function0 std (to_sym "rand") randf 0)
    (add_function1 std (to_sym "rand") intT randi 0)
    (add_function1 std (to_sym "rand") bintT randbi 0)
    (add_function1 std (to_sym "rand") (domainP Range) randr 0)
    ))

    ))
