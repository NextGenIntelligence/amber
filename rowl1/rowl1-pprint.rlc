;
; rowl - 1st generation
; Copyright (C) 2012 nineties
;
; $Id: rowl1-array.rlc 2012-12-16 02:10:58 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-compile")

; default pretty printer corresponding to lib/amber/syntax.ab

(extern object current_loc)
(extern object current_mod)

(extern fun make_ifstream)
(extern fun make_ofstream)

(extern fun pp_table)
(extern fun pp_module)
(extern fun pp_table)
(extern fun pp_bint)
(extern fun pp_float)
(extern fun print_bytecode)
(extern fun pp_weak)

(export fun pprint_full (ochan obj) (
    (return (pprint ochan obj))
    ))

(export fun pprint (ochan obj) (
    (return (call2 (to_sym "pprint")
        (make_ofstream (string "") ochan) obj))
    ))

(fun pprint_ (io obj) (
    (return (pprint_main (field_get io 2) obj))
    ))

(fun pprint_main (ochan obj) (
    (tswitch (node_type obj) (
        (@SymbolE           . (return (output_symbol ochan obj)))
        (@ExprE             . (return (pp_expr ochan obj)))
        (@ListE             . (return (pp_list ochan obj)))
        (@ArrayE            . (return (pp_array ochan obj)))
        (@TableE            . (return (pp_table ochan obj)))
        (@AssemblerE        . (return (pp_object ochan "Assembler" obj)))
        (@BytecodeE         . (return (pp_object ochan "Bytecode" obj)))
        (@FunctionE         . (return (pp_object ochan "Function" obj)))
        (@BoundFunctionE    . (return (pp_object ochan "Function" obj)))
        (@InputFileStreamE  . (return (pp_object ochan "InputFileStream" obj)))
        (@OutputFileStreamE . (return (pp_object ochan "OutputFileStream" obj)))
        (@ModuleE           . (return (pp_module ochan obj)))
        (@ParserE           . (return (pp_object ochan "Parser" obj)))
        (@StringIOE         . (return (pp_object ochan "StringIO" obj)))
        (@BigIntE           . (return (pp_bint ochan obj)))
        (@LocE              . (return (pp_loc ochan obj)))
        (@WeakRefE          . (return (pp_weak ochan obj)))
        (@TupleE            . (return (pp_tuple ochan obj)))
        (@IntE              . (return (pp_int ochan obj)))
        (@StringE           . (return (pp_string ochan obj)))
        (@FloatE            . (return (pp_float ochan obj)))
        (@BuiltinE          . (return (pp_object ochan "Builtin" obj)))
        (default            . (return (not_reachable "prettify")))
        ))
    ))

(fun pp_list (ochan args) (
    (output_char ochan '[')
    (while args (do
        (pprint ochan (car args))
        (= args (cdr args))
        (if args (output_string ochan ", "))
        ))
    (output_char ochan ']')
    (return nil)
    ))

(fun pp_array (ochan ary) (
    (output_string ochan "Array{")
    (var buf (field_get ary 1))
    (var size (field_get ary 2))
    (for i 0 size (do
        (pprint ochan (array_get object buf i))
        (if (< i (- size 1)) (output_string ochan ", "))
        ))
    (output_char ochan '}')
    (return nil)
    ))

(fun pp_tuple (ochan obj) (
    (var size (seq_size obj))
    (output_char ochan '(')
    (for i 0 size (do
        (pprint ochan (array_get object obj i))
        (if (!= i (- size 1)) (output_string ochan ", "))
        ))
    (output_char ochan ')')
    (return nil)
    ))


(fun pp_object (ochan name obj) (
    (output_string ochan "<#")
    (output_string ochan name)
    (output_string ochan ":0x")
    (output_hex ochan obj 8)
    (output_char ochan '>')
    (return nil)
    ))

(fun pp_int (ochan node) (
    (output_int ochan (unbox node))
    (return nil)
    ))

(fun pp_string (ochan node) (
    (output_string ochan node)
    ;(output_char ochan '"')
    ;(var i 0)
    ;(while (array_get char node i) (do
    ;    (output_char_escape ochan (array_get char node i))
    ;    (incr i)
    ;    ))
    ;(output_char ochan '"')
    (return nil)
    ))

(fun pp_expr (ochan node) (
    (output_symbol ochan (node_head node))
    (output_char ochan '{')
    (var n (node_size node))
    (for i 0 n (do
        (pprint ochan (node_arg node i))
        (if (!= i (- n 1)) (output_string ochan ", "))
        ))
    (output_char ochan '}')
    (return nil)
    ))

(export fun setup_pprint (std IO) (
    (add_function2 std (to_sym "pprint") (domainP OutputFileStream) DontCare pprint_ 0)
    ))

    ))
