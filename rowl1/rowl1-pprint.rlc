;
; rowl - 1st generation
; Copyright (C) 2012 nineties
;
; $Id: rowl1-array.rlc 2014-01-17 19:03:14 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-compile")

; default pretty printer corresponding to lib/amber/syntax.ab

(extern object current_loc)
(extern object current_mod)

(extern fun make_ifstream)
(extern fun make_ofstream)

(extern fun pp_table)
(extern fun pp_module)
(extern fun pp_bint)
(extern fun pp_float)
(extern fun print_bytecode)

(export fun pprint_debug (ochan obj) (
    (return (pprint_main ochan obj))
    ))

(export fun pprint (ochan obj) (
    (return (pprint_main ochan obj))
    ;(return (call2 (to_sym "pprint")
    ;    (make_ofstream (string "") ochan) obj))
    ))

(fun pprint_ (io obj) (
    (return (pprint_main (field_get io 2) obj))
    ))

(extern fun sio_raw)
(fun sio_pprint_ (io obj) (
    (return (pprint_main (sio_raw io) obj))
    ))

(fun pprint_main (ochan obj) (
    (= obj (unwrap_internal obj))
    (tswitch (node_type obj) (
        (@SymbolE           . (return (output_symbol ochan obj)))
        (@ExprE             . (return (pp_node ochan obj)))
        (@ListE             . (return (pp_list ochan obj)))
        (@ArrayE            . (return (pp_array ochan obj)))
        (@TableE            . (return (pp_table ochan obj)))
        (@AssemblerE        . (return (pp_object ochan "Assembler" obj)))
        (@BytecodeE         . (return (pp_object ochan "Bytecode" obj)))
        (@FunctionE         . (return (pp_function ochan obj)))
        (@BuiltinFunctionE  . (return (pp_function ochan obj)))
        (@BoundFunctionE    . (return (pp_function ochan obj)))
        (@InputFileStreamE  . (return (pp_object ochan "InputFileStream" obj)))
        (@OutputFileStreamE . (return (pp_object ochan "OutputFileStream" obj)))
        (@ParserE           . (return (pp_object ochan "Parser" obj)))
        (@StringIOE         . (return (pp_object ochan "StringIO" obj)))
        (@BigIntE           . (return (pp_bint ochan obj)))
        (@LocE              . (return (pp_loc ochan obj)))
        (@TupleE            . (return (pp_tuple ochan obj)))
        (@IntE              . (return (pp_int ochan obj)))
        (@StringE           . (return (pp_string ochan obj)))
        (@FloatE            . (return (pp_float ochan obj)))
        (@BuiltinE          . (return (pp_object ochan "Builtin" obj)))
        (default            . (return (not_reachable "prettify")))
        ))
    ))

(fun pp_list (ochan args) (
    (output_char ochan '[')
    (while args (do
        (pprint ochan (car args))
        (= args (cdr args))
        (if args (output_string ochan ", "))
        ))
    (output_char ochan ']')
    (return @C_NIL)
    ))

(fun pp_array (ochan ary) (
    (output_string ochan "Array{")
    (var buf (field_get ary 1))
    (var size (field_get ary 2))
    (for i 0 size (do
        (pprint ochan (array_get object buf i))
        (if (< i (- size 1)) (output_string ochan ", "))
        ))
    (output_char ochan '}')
    (return @C_NIL)
    ))

(fun pp_tuple (ochan obj) (
    (var size (seq_size obj))
    (output_char ochan '(')
    (for i 0 size (do
        (pprint ochan (array_get object obj i))
        (if (!= i (- size 1)) (output_string ochan ", "))
        ))
    (output_char ochan ')')
    (return @C_NIL)
    ))

(fun pp_function_body (ochan func) (
    (if (|| (== (node_type func) @FunctionE) (== (node_type func) @BuiltinFunctionE))
        (do
            (output_string ochan "{0x")
            (output_hex ochan func 8)
            (output_string ochan "}(")
            (var args (field_get func 2))
            (= args (cdr args)) ; skip arity
            (while args (do
                (pprint ochan (car args))
                (= args (cdr args))
                (if args (output_string ochan ", "))
                ))
            (output_char ochan ')')
        )
        (do
            (pp_function_body ochan (field_get func 2))
            (output_string ochan ", ")
            (pp_function_body ochan (field_get func 3))
        ))
    ))

(fun pp_function (ochan func) (
    (output_string ochan "<#Function:")
    (pp_function_body ochan func)
    (output_char ochan '>')
    (return @C_NIL)
    ))

(fun pp_object (ochan name obj) (
    (output_string ochan "<#")
    (output_string ochan name)
    (output_string ochan ":0x")
    (output_hex ochan obj 8)
    (output_char ochan '>')
    (return @C_NIL)
    ))

(fun pp_int (ochan node) (
    (output_int ochan (unbox node))
    (return @C_NIL)
    ))

(fun pp_string (ochan node) (
    (output_char ochan '"')
    (output_string_escape ochan node)
    (output_char ochan '"')
    (return @C_NIL)
    ))

(extern fun unwrap_internal)
(fun pp_node (ochan node) (
    (output_symbol ochan (node_head node))
    (output_char ochan '{')
    (var n (node_size node))
    (for i 0 n (do
        (pprint ochan (node_arg node i))
        (if (!= i (- n 1)) (output_string ochan ", "))
        ))
    (output_char ochan '}')
    (return @C_NIL)
    ))

(extern fun new_sio)
(extern fun sio_raw)
(extern fun sio_to_s)
(fun _fullform (obj) (
    (var io (new_sio))
    (var ochan (sio_raw io))

    (var h (node_bhead obj))

    (if (is_builtin_sym h) (do
        (output_symbol ochan h)
        (output_string ochan "{...}")
        (return (sio_to_s io))
        ))

    (var args (node_args obj))
    
    (output_symbol ochan h)
    (output_char ochan '{')
    (while args (do
        (call2 (to_sym "pprint") io (car args))
        (= args (cdr args))
        (if args (output_string ochan ", "))
        ))
    (output_char ochan '}')
    (return (sio_to_s io))
    ))

(export fun setup_pprint (mod) (
    (add_function2 mod (to_sym "pprint") (domainP OutputFileStream) DontCare pprint_ 0)
    (add_function2 mod (to_sym "pprint") (domainP (to_sym "StringIO")) DontCare sio_pprint_ 0) 
    (add_function1 mod (to_sym "fullform") DontCare _fullform 0)

    ))

    ))
