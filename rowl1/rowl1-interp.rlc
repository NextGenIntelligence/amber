;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-interp.rlc 2012-04-18 16:07:16 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-packrat")
(import "rowl1-symtable")
(import "rowl1-assemble")
(import "rowl1-compile")
(import "rowl1-module")

(export var current_loc null)
(export fun set_loc (loc) (
    (= current_loc loc)
    ))

(export var current_mod null)

(export fun set_current_module (mod) (
    (= current_mod mod)
    ))

(export fun eval_shell () (
    (set_shell_mode)
    (return (eval_main "amber" stdin))
    ))

(export fun eval_file (path) (
    (var ichan (open_in path))
    (var r (eval_main path ichan))
    (close_in ichan)
    (return r)
    ))

(export fun eval_main (file ichan) (
    ;(var start (gettimeofday))
    (= current_mod (make_module (to_sym "%global") 0))
    (= current_loc no_loc)

    (setup_builtin_functions current_mod)
    (setup_builtin_compilers current_mod)
    (init_stdlib current_mod)
    (import_module current_loc current_mod (to_sym "std"))

    (init_parser_funcs current_mod)
    (import_module current_loc current_mod (qualified "std" (to_sym "parser")))
    (var p (init_parser file ichan))
    (= current_loc (get_loc p))

    (add_include_dir "./")
    (add_include_dir "/usr/lib/amber/")
    (include_file "amber/syntax.ab")

    (if (in_shell_mode)
        (interpret_shell p)
        (interpret p)
        )

    ;(import_module current_loc current_mod (qualified "std" (to_sym "syntax")))
    ;(include_file "amber/io.ab")
    ;(import_module current_loc current_mod (qualified "std" (to_sym "io")))

    ;(interpret)

    ;(var end (gettimeofday))
    ;(var diff (timeval_sub end start))
    ;(output_string stderr "elapsed time : ")
    ;(output_timeval stderr diff)
    ;(output_char stderr '\n')
    ))

(fun call1 (mod sym arg0) (
    (var code (lookup_func mod sym))
    (return (byterun code arg0))
    ))

(fun eval (expr) (
    (return (call1 current_mod Eval expr))
    ))

(fun rewrite (expr) (
    (var e (call1 current_mod Rewrite expr))
    (return e)
    ))

(fun interpret (p) (
    (while 1 (do
        (var es (parse_statements p))
        (if (! es)
            (return 0)
            )
        (if (== (expr_head es) NoParse) (do
            (output_syntax_errors es)
            (exit 1)
            ))
        (while es (do
            (eval (car es))
            (= es (cdr es))
            ))
        (flush_parser p)
        ))
    (= current_loc no_loc)
    ))

(fun interpret_shell (p) (
    (while 1 (do
        (var e (parse_shell_statement p))
        (if (== (expr_head e) NoParse) (do
            (output_syntax_errors e)
            (goto next)
            ))
        (var ret (eval (expr_arg e 1)))
        (print_result p ret)
        (label next)
        (flush_parser p)
        ))
    ))

(fun print_result (p val) (
    (pretty_print stdout val)
    (output_char stdout '\n')
    ))

(fun default_eval (expr) (
    (var asm (make_assembler))
    (compile asm current_mod expr)
    (put_ireturn asm)
    (return (byterun (get_code asm)))
    ))

(fun eval_located (expr) (
    (set_loc (expr_arg expr 0))
    (return (eval (expr_arg expr 1)))
    ))

(fun eval_define_module (expr) (
    (if (! (in_top_scope current_mod)) (do
        (output_error stderr current_loc)
        (output_string stderr "module definition in sub-scope is not allowed\n")
        (exit 1)
        ))
    (var modsig (expr_arg expr 0))
    (var block  (expr_arg expr 1))
    (var save_current_mod current_mod)
    (var module (find_module current_loc current_mod modsig @TRUE))
    (set_current_module module)
    
    (var es (expr_args block))
    (while es (do
        (var e (rewrite (car es)))
        (eval e)
        (= es (cdr es))
        ))

    (set_current_module save_current_mod)
    (return 0)
    ))

(fun default_rewrite (expr) (
    (if (is_atom expr) (return expr))
    (var hd (expr_head expr))
    (var args (expr_args expr))
    (while args (do
        (setcar args (rewrite (car args)))
        (= args (cdr args))
        ))
    (return expr)
    ))

(fun rewrite_located (expr) (
    (expr_arg_set expr 1 (rewrite (expr_arg expr 1)))
    (return expr)
    ))

(fun eval_define_syntax (expr) (
    (var sym (expr_arg expr 0))
    (var pat (expr_arg expr 1))
    (var act (expr_arg expr 2))
    (var stmts (compile_define_syntax sym pat act))
    (debugpf stmts)
    (while stmts (do
        (eval (car stmts))
        (= stmts (cdr stmts))
        ))
    (return 0)
    ))

(var include_dirs null)
(var included_modules null)

(fun add_include_dir (path) (
    (= include_dirs (cons path include_dirs))
    ))

(fun add_included_file (path) (
    ; XXX: fixme. canonicalize the `path'
    (= included_modules (cons path included_modules))
    ))

(fun is_already_included (path) (
    (var list included_modules)
    (while list (do
        (if (streq path (car list))
            (return @TRUE)
            )
        (= list (cdr list))
        ))
    (return @FALSE)
    ))

(fun include_file (path) (
    (var dir include_dirs)
    (while dir (do
        (var fullpath (build_path (car dir) path ""))
        (if (file_exists fullpath) (do
            (if (is_already_included fullpath)
                (return Nil)
                )
            (add_included_file fullpath)

            (var ichan (open_in fullpath))
            (var fd (open "."))
            (chdir (get_directory fullpath))
        
            (var p (init_parser fullpath ichan))
            (set_loc (get_loc p))

            (var shell_mode_p (in_shell_mode))
            (unset_shell_mode)
            (interpret p)
            (if shell_mode_p (set_shell_mode))

            (fchdir fd)
            (close_in ichan)

            (return Nil)
            ))
        (= dir (cdr dir))
        ))
    (output_error stderr current_loc)
    (output_string stderr "`")
    (output_string stderr path)
    (output_string stderr "' was not found\n")
    (exit 1)
    ))

(export fun eval_include (expr) (
    (var path (expr_arg_string expr 0))
    (include_file path)
    (return 0)
    ))

(fun setup_builtin_functions (mod) (
    (var symT (domainP Symbol))
    (var blockT (domainP Block))
    (add_builtin_function1 mod Rewrite DontCare default_rewrite 0)
    (add_builtin_function1 mod Rewrite (domainP Located) rewrite_located 0)
    (add_builtin_function1 mod Eval DontCare default_eval 0)
    (add_builtin_function1 mod Eval (domainP Located) eval_located 0)
    (add_builtin_function1 mod Eval
         (make_expr DefModule (list2 symT blockT))
         eval_define_module 0)
    (add_builtin_function1 mod Eval
         (make_expr DefModule (list2 (domainP Qualified) blockT))
         eval_define_module 0)
    (add_builtin_function1 mod Eval
        (make_expr DefSyntax (list3 symT DontCare DontCare))
        eval_define_syntax 0)
    ))

(extern fun setup_numeric)
(extern fun setup_io)
(extern fun setup_list)
(extern fun setup_tuple)

(fun init_stdlib (mod) (
    (var std (find_module no_loc mod (to_sym "std") @TRUE))
    (setup_numeric std)
    (setup_io std)
    (setup_list std)
    ))

    ))
