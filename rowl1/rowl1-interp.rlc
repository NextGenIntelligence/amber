;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-interp.rlc 2013-02-08 00:12:28 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-packrat")
(import "rowl1-symtable")
(import "rowl1-assemble")
(import "rowl1-compile")
(import "rowl1-module")
(import "rowl1-error")
(import "rowl1-pprint")

(export var amber_mod null)
(export var amber_mod null)
(export var current_loc null)
(export var current_mod null)
(export fun set_loc (loc) (
    (= current_loc loc)
    (add_module_variable amber_mod (to_sym "LOCATION") @C_TRUE loc)
    ))

(var module_stack null)

(export fun set_current_module (mod) (
    (if (!= (node_head mod) Module)
        (throw (type_error current_loc (string "module") mod))
        )
    (= current_mod mod)
    (add_module_variable amber_mod (to_sym "MODULE") @C_TRUE mod)
    ))

(export fun eval_shell () (
    (set_shell_mode)
    (try
        (return (eval_main "amber" stdin 0 0))
        (catch e (do
            (output_string stderr "Uncaught exception: ")
            (pprint stderr e)
            (output_string stderr "\n")
            (return 1)
        )))
    ))

(export fun eval_file (path argc argv) (
    (var r 0)
    (var ichan (open_in path))
    (try
        (= r (eval_main path ichan argc argv))
        (catch e (do
            (output_string stderr "Exception: ")
            (pprint stderr e)
            (output_string stderr "\n")
            (= r 1)
        )))
    (close_in ichan)
    (return r)
    ))

(export fun eval_main (file ichan argc argv) (
    ;(var start (gettimeofday))

    (= amber_mod (make_module (to_sym "amber") 0))
    (= module_stack (cons amber_mod 0))

    (= current_loc no_loc)

    (setup_argv argc argv)
    (setup_globals amber_mod)
    (setup_builtin_compilers amber_mod)
    (init_stdlib amber_mod)
    (open_module current_loc amber_mod (to_sym "std"))
    (open_module current_loc amber_mod (qualified "std" (to_sym "IO")))

    (init_parser_funcs amber_mod)

    (= current_mod amber_mod)
    (= current_loc no_loc)

    (push_import_dir "/usr/lib/amber/")
    (import_file "amber/syntax.ab")
    (if (in_shell_mode)
        (open_module current_loc amber_mod (to_sym "shell_syntax"))
        )
    (import_file "data/string.ab")
    (import_file "io.ab")
    (import_file "printf.ab")
    (import_file "data/list.ab")
    (import_file "data/array.ab")
    (import_file "data/table.ab")
    (import_file "oop.ab")

    (push_import_dir (get_directory file))
    (push_import_dir (get_env "PWD"))

    (pre_import_module)

    ;(var end (gettimeofday))
    ;(var diff (timeval_sub end start))
    ;(output_string stderr "startup time : ")
    ;(output_timeval stderr diff)
    ;(output_char stderr '\n')

    (var p (init_parser file ichan))

    (if (in_shell_mode)
        (interpret_shell p)
        (do
            (var fd (open "."))
            (var dir (get_directory file))
            (chdir dir)
            (interpret p)
            (fchdir fd)
        )
        )
    (eval_exit @C_NIL)

    (return 0)
    ))

(fun eval (expr) (
    (return (call1 Eval expr))
    ))

(fun rewrite (expr) (
    (var new_expr (call1 Rewrite expr))
    (if (!= new_expr expr) (return (rewrite new_expr)))
    (= expr new_expr)
    (if (is_atom expr) (return expr))
    (if (is_list expr) (do
        (var ls expr)
        (while ls (do
            (setcar ls (rewrite (car ls)))
            (= ls (cdr ls))
            ))
        (return expr)
        ))
    (var hd (node_head expr))
    (if (== hd Quote) (return expr))
    (if (== hd QuasiQuote) (do
        (node_arg_set expr 0 (rewrite_qquote (node_arg expr 0) 0))
        (return expr)
        ))

    ; Don't rewrite patterns
    (if (== hd DefVariable) (do
        (node_arg_set expr 1 (rewrite (node_arg expr 1)))
        (return expr)
        ))
    (if (== hd DefFunction) (do
        (node_arg_set expr 1 (rewrite (node_arg expr 1)))
        (return expr)
        ))
    (if (== hd Lambda) (do
        (var lhs (node_arg expr 0))
        (if (== (node_head lhs) Where)
            (node_arg_set lhs 1 (rewrite (node_arg lhs 1)))
            )
        (node_arg_set expr 1 (rewrite (node_arg expr 1)))
        (return expr)
        ))

    (if (== hd Scoped) (do
        (var save_mod current_mod)
        (set_current_module (node_arg expr 0))
        (node_arg_set expr 1 (rewrite (node_arg expr 1)))
        (set_current_module save_mod)
        (return expr)
        ))

    (for i 0 (node_size expr) (do
        (node_arg_set expr i (rewrite (node_arg expr i)))
        ))
    (return expr)
    ))

(fun rewrite_qquote (expr level) (
    (if (is_atom expr) (return expr))
    (if (is_list expr) (do
        (var ls expr)
        (while ls (do
            (setcar ls (rewrite_qquote (car ls) level))
            (= ls (cdr ls))
            ))
        (return expr)
        ))
    (var hd (node_head expr))
    (if (== hd Unquote) (do
        (if (== level 0)
            (node_arg_set expr 0 (rewrite (node_arg expr 0)))
            (node_arg_set expr 0
                (rewrite_qquote (node_arg expr 0) (- level 1)))
            )
        (return expr)
        )
    (if (== hd QuasiQuote)
        (+= level 1)
        ))

    (for i 0 (node_size expr)
        (node_arg_set expr i
            (rewrite_qquote (node_arg expr i) level))
        )
    (return expr)
    ))

(fun interpret (p) (
    (while 1 (do
        (parse_statements p)
        (if (! (parse_success p)) (do
            (output_syntax_error (get_loc p) (parser_error p))
            (exit 1)
            ))
        (var es (parsed_token p))
        (if (! es) break)
        (while es (do
            (eval (car es))
            (= es (cdr es))
            ))
        ))
    (= current_loc no_loc)
    ))

(extern fun ary_new)
(extern fun ary_store)
(extern fun ary_push)
(fun interpret_shell (p) (
    (var outputs (ary_new))
    (add_module_variable amber_mod (to_sym "shell_outputs") @C_TRUE outputs)
    (ary_push outputs @C_UNDEF)
    (while 1 (do
        (try 
            (while 1 (do
                (parse_shell_statement p)
                (if (! (parse_success p)) (do
                    (output_syntax_error (get_loc p) (parser_error p))
                    (flush_parser p @TRUE)
                    continue
                    ))
                (parsed_token p)
                (var ret (eval (parsed_token p)))
                (print_result ret)
                (flush_parser p @FALSE)
                (ary_store outputs (box 0) ret)
                (ary_push outputs ret)
                ))
        (catch e (do
            (output_string stderr "Error: ")
            (pprint stderr e)
            (output_string stderr "\n")
            (flush_parser p @TRUE)
            (ary_push outputs e)
        )))))
    ))

(fun print_result (val) (
    (output_string stdout "=> ")
    (pprint stdout val)
    (output_char stdout '\n')
    ))

(fun default_eval (expr) (
    (return (byterun (compile_main current_mod (rewrite expr))))
    ))

(fun eval_located (expr) (
    (set_loc (node_arg expr 0))
    (return (eval (node_arg expr 1)))
    ))

(fun eval_begin_module (expr) (
    (if (! (in_top_scope current_mod))
        (throw (exception current_mod (string "module definition in sub-scope is not allowed\n")))
        )
    (var modsig (node_arg expr 0))
    (var module (find_module current_loc current_mod modsig @TRUE))
    (= module_stack (cons module module_stack))
    (set_current_module module)
    (return module)
    ))

(fun eval_end_module (expr) (
    (if (== current_mod amber_mod)
        (throw (exception current_mod (string "there is no module to close")))
        )
    (if (! (in_top_scope current_mod))
        (throw (exception current_mod (string "module definition in sub-scope is not allowed")))
        )
    (= module_stack (cdr module_stack))
    (var module (car module_stack))
    (if (! module) 
        (throw (exception current_mod (string "can not exit global-scope")))
        )
    (var r current_mod)
    (set_current_module module)
    (return r)
    ))

(fun default_rewrite (expr) (
    (return expr)
    ))


(fun rewrite_located (expr) (
    (node_arg_set expr 1 (rewrite (node_arg expr 1)))
    (return expr)
    ))

(fun eval_define_syntax (expr) (
    (var sym (node_arg expr 0))
    (var elm (node_arg expr 1))
    (var stmts (compile_define_syntax sym elm))
    (while stmts (do
        (eval (car stmts))
        (= stmts (cdr stmts))
        ))
    (return @C_NIL)
    ))

(fun eval_replace_syntax (expr) (
    (var lhs (node_arg_symbol expr 0))
    (var rhs (node_arg_symbol expr 1))
    (eval (compile_replace_syntax lhs rhs))
    (return @C_NIL)
    ))

(fun eval_reserve_symbol (expr) (
    (for i 0 (node_size expr)
        (add_reserve_symbol (node_arg expr i))
        )
    (return @C_NIL)
    ))

(fun eval_seq (expr) (
    (var stmts (node_arg expr 0))
    (var v @C_NIL)
    (while stmts (do
        (= v (eval (car stmts)))
        (= stmts (cdr stmts))
        ))
    (return v)
    ))

(var atexit_list null)

(fun eval_exit (expr) (
    (= atexit_list (list_reverse atexit_list))
    (while atexit_list (do
        (byterun (get_bytecode (car atexit_list)))
        (= atexit_list (cdr atexit_list))
        ))
    (exit 0)
    ))

(fun exit_ (status) (
    (= atexit_list (list_reverse atexit_list))
    (while atexit_list (do
        (byterun (get_bytecode (car atexit_list)))
        (= atexit_list (cdr atexit_list))
        ))
    (exit (unbox status))
    ))

(export fun at_exit (fun) (
    (= atexit_list (cons fun atexit_list))
    (return @C_NIL)
    ))

(var import_dirs null)
(var importd_modules null)

; XXX: fix this
(fun push_import_dir (path) (
    (if (== (array_get char path (- (strlen path) 1)) '/')
        (= path (string path))
        (= path (strcat path "/"))
        )

    (if (!= (array_get char path 0) '/')
        (= path (strcat (strcat (get_env "PWD") "/") path))
        )
    
    (= import_dirs (cons path import_dirs))
    ))

(fun pop_import_dir () (
    (= import_dirs (cdr import_dirs))
    ))

(fun add_importd_file (path) (
    ; XXX: fixme. canonicalize the `path'
    (= importd_modules (cons (string path) importd_modules))
    ))

(fun is_already_imported (path) (
    (var list importd_modules)
    (while list (do
        (if (streq path (car list))
            (return @TRUE)
            )
        (= list (cdr list))
        ))
    (return @FALSE)
    ))

(fun import_file (path) (
    (= path (add_extension ".ab" path))
    (var dir import_dirs)
    (while dir (do
        (var fullpath (build_path (car dir) path ""))
        (if (file_exists fullpath) (do
            (if (is_already_imported fullpath)
                (return @C_FALSE)
                )
            (add_importd_file fullpath)

            (var ichan (open_in fullpath))
            (var fd (open "."))
            (var dir (get_directory fullpath))
            (chdir dir)
            (push_import_dir dir)

            (var p (init_parser fullpath ichan))
            (set_loc (get_loc p))

            (var shell_mode_p (in_shell_mode))
            (unset_shell_mode)
            (interpret p)
            (if shell_mode_p (set_shell_mode))

            (pop_import_dir)

            (fchdir fd)
            (close_in ichan)

            (set_loc no_loc)
            (return @C_TRUE)
            ))
        (= dir (cdr dir))
        ))
    (throw (not_found current_loc (string path)))
    ))

(var pre_imports null)
(export fun set_pre_imports (sym) (
    (= pre_imports (string sym))
    ))

(fun pre_import_module () (
    (if (! pre_imports) return)
    (import_file pre_imports)
    ))

(fun eval_open (expr) (
    (open_module current_loc current_mod (node_arg expr 0))
    (return @C_NIL)
    ))

(fun eval_import (expr) (
    (var path (node_arg expr 0))
    (if (== (node_head path) List) (do
        (var syms path)
        (= path (string ""))
        (while syms (do
            (= path (strcat path (symbol_name (car syms))))
            (= syms (cdr syms))
            (if syms (= path (strcat path "/")))
            ))
        (= path (add_extension ".ab" path))
        ))
    (return (import_file path))
    ))

(fun setup_argv (argc argv) (
    (var ARGV (ary_new))
    (add_module_variable amber_mod (to_sym "ARGV") @C_TRUE ARGV)
    (if (== argc 0) return)
    (for i 1 argc (do
        (ary_push ARGV (string (array_get string argv i)))
        ))
    ))

(export fun prompt_string () (
    (return (get_module_variable current_mod (to_sym "PROMPT")))
    ))

(fun def_global_var (sym val) (
    (add_module_variable current_mod sym @C_FALSE val)
    (return val)
    ))

(fun load_ (path) (
    (var dir import_dirs)
    (while dir (do
        (var fullpath (build_path (car dir) path ""))
        (if (file_exists fullpath) (do
            (var ichan (open_in fullpath))
            (var fd (open "."))
            (var dir (get_directory fullpath))
            (chdir dir)
            (push_import_dir dir)

            (var p (init_parser fullpath ichan))
            (set_loc (get_loc p))

            (var shell_mode_p (in_shell_mode))
            (unset_shell_mode)
            (interpret p)
            (if shell_mode_p (set_shell_mode))

            (pop_import_dir)

            (fchdir fd)
            (close_in ichan)

            (set_loc no_loc)
            (return @C_NIL)
            ))
        (= dir (cdr dir))
        ))
    (throw (not_found current_loc (string path)))
    ))

(fun setup_globals (mod) (
    (var symT (domainP Symbol))
    
    (add_module_variable mod (to_sym "amber") @C_FALSE mod)
    (add_module_variable mod (to_sym "LOCATION") @C_FALSE current_loc)
    (add_module_variable mod (to_sym "MODULE") @C_FALSE current_mod)
    (add_module_variable mod (to_sym "PROMPT") @C_FALSE (string "amber"))

    (if (in_shell_mode)
        (add_module_variable mod (to_sym "shell_mode") @C_TRUE @C_TRUE)
        (add_module_variable mod (to_sym "shell_mode") @C_TRUE @C_FALSE)
        )
    
    (add_function1 mod Rewrite DontCare default_rewrite 0)
    (add_function1 mod Rewrite (domainP Located) rewrite_located 0)
    (add_function1 mod Eval DontCare default_eval 0)
    (add_function1 mod Eval (domainP Located) eval_located 0)
    (add_function1 mod Eval (make_node1 Open DontCare) eval_open 0)
    (add_function1 mod Eval (make_node1 Import listT) eval_import 0)
    (add_function1 mod Eval (make_node1 Import stringT) eval_import 0)
    (add_function1 mod Eval (make_node1 BeginModule symT) eval_begin_module 0)
    (add_function1 mod Eval (make_node1 BeginModule (domainP Qualified)) eval_begin_module 0)
    (add_function1 mod Eval (make_node0 EndModule) eval_end_module 0)
    (add_function1 mod Eval (make_node1 Seq listT) eval_seq 0)

    (add_function1 mod Eval (make_node2 DefSyntax symT DontCare) eval_define_syntax 0)
    (add_function1 mod Eval (make_node2 RepSyntax symT symT) eval_replace_syntax 0)
    (add_function1 mod Eval (domainP ReserveSymbol) eval_reserve_symbol 0)

    (add_function1 mod Eval (quote (to_sym "exit")) eval_exit 0)

    (add_function1 mod (to_sym "load") stringT load_ 0)
    (add_function1 mod (to_sym "import") stringT import_file 0)
    (add_function1 mod (to_sym "exit") intT exit_ 0)
    (add_function1 mod (to_sym "atexit") funT at_exit 0)

    (add_function2 mod (to_sym "define_global_variable")
        symT DontCare def_global_var 0)
    ))

(extern fun setup_pprint)
(extern fun setup_base)
(extern fun setup_symbol)
(extern fun setup_numeric)
(extern fun setup_bigint)
(extern fun setup_float)
(extern fun setup_math)
(extern fun setup_string)
(extern fun setup_io)
(extern fun setup_list)
(extern fun setup_tuple)
(extern fun setup_array)
(extern fun setup_table)
(extern fun setup_oop)
(extern fun setup_gc)

(fun init_stdlib (mod) (
    (var std (find_module no_loc mod (to_sym "std") @TRUE))
    (setup_pprint std)
    (setup_base std)
    (setup_symbol std)
    (setup_numeric std)
    (setup_string std)
    (setup_float std)
    (setup_math std)
    (setup_bigint std)
    (setup_io std)
    (setup_list std)
    (setup_tuple std)
    (setup_array std)
    (setup_table std)
    (setup_oop std)
    (setup_gc std)
    ))

    ))
