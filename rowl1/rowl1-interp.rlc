;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-interp.rlc 2011-10-11 00:54:47 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-parse")
(import "rowl1-symtable")
(import "rowl1-assemble")
(import "rowl1-compile")

(export var current_loc null)
(export fun set_loc (loc) (
    (= current_loc loc)
    ))

(export var exec_env null)

(export fun init_exec_env () (
    (= exec_env (make_env))
    ))
(export fun push_exec_env () (
    (push_env exec_env)
    ))
(export fun pop_exec_env () (
    (pop_env exec_env)
    ))

(export fun interpret () (
    (while 1 (do
        (var e (parse))
        (if (! e) break)
        (eval e)
        ))
    ))

(var import_dirs 0)
(export fun add_import_dir (path) (
    (= import_dirs (cons path import_dirs))
    ))

(export fun eval (expr) (
    (var asm (make_assembler))
    (compile asm exec_env expr)
    (put_ireturn asm)
    (byterun (get_code asm))
    ))

(fun compile_eval (asm env expr) (
    (compile_quote_main asm env (expr_arg expr 0))
    (compile_simple_call asm 1 eval)
    ))

(export fun import_module_direct (orig path) (
    (var dir import_dirs)
    (while dir (do
        (var fullpath (build_path (car dir) path ".rl"))
        (if (file_exists fullpath) (do
            (if (is_already_imported exec_env fullpath)
                (return Nil)
                )
            (add_imported_module exec_env fullpath)

            (var ichan (open_in fullpath))
            (var fd (open "."))
            (chdir (get_directory fullpath))

            (push_parser fullpath ichan)
            (interpret)
            (pop_parser)

            (fchdir fd)
            (close_in ichan)

            (return Nil)
            ))
        (= dir (cdr dir))
        ))
    (output_error stderr)
    (output_string stderr "module `")
    (if orig
        (pretty_print stderr orig)
        (output_string stderr path)
        )
    (output_string stderr "' was not found\n")
    (exit 1)
    ))

(fun import_module (arg) (
    (import_module_direct arg (construct_path arg))
    ))

(fun construct_path (arg) (
    (var hd (expr_head arg))
    (if (== hd String) (return arg)
    (if (== hd Symbol) (return (symbol_name arg))
    (if (&& (== hd (to_sym "DoubleColon")) (== (expr_size arg) 2))
        (return (strcat (strcat (construct_path (expr_arg arg 0)) "/")
            (construct_path (expr_arg arg 1))))
            )))
    (output_error stderr)
    (output_string stderr "invalid module: ")
    (pretty_print stderr arg)
    (output_char stderr '\n')
    (exit 1)
    ))

(fun compile_import (asm env expr) (
    (compile_quote_main asm env (expr_arg expr 0))
    (compile_simple_call asm 1 import_module )
    ))

(export fun setup_interpreter () (
    (= current_loc no_loc)
    (var tbl (get_vartable exec_env))
    (add_compiler tbl (make_expr Eval (list1 DontCare)) compile_eval)
    (add_compiler tbl (make_expr (to_sym "Import") (list1 DontCare)) compile_import)
    ))


    ))
