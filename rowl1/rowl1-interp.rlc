;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-interp.rlc 2011-12-13 21:41:52 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-parse")
(import "rowl1-symtable")
(import "rowl1-assemble")
(import "rowl1-compile")
(import "rowl1-module")

(export var current_loc null)
(export fun set_loc (loc) (
    (= current_loc loc)
    ))

(export var current_mod null)

(export fun set_current_module (mod) (
	(= current_mod mod)
	))

(export fun eval_file (path) (
    (= current_mod (make_module (to_sym "%global") 0))
    (= current_loc no_loc)

    (setup_builtin_functions current_mod)
    (setup_builtin_compilers current_mod)
    (init_stdlib current_mod)

    (var ichan (open_in path))
    (init_parser path ichan)

    (add_import_dir "./")
    (add_import_dir "/usr/lib/rowl/")
    (import_module_direct 0 "rowl/syntax")
    (import_module_direct 0 "rowl/io")

    (interpret)
    (close_in ichan)
    ))

(fun interpret () (
    (var es (parse))
    (while es (do
        (var e (expand current_mod (car es)))
        (eval e)
        (= es (cdr es))
        ))
    ))

(fun eval (expr) (
    (var asm (make_assembler))
    (compile asm current_mod expr)
    (put_ireturn asm)
    (byterun (get_code asm))
    ))

(fun compile_eval (asm env expr) (
    (compile asm env (expr_arg expr 0))
    (compile_simple_call asm 1 eval)
    ))

(var import_dirs null)
(var imported_modules null)

(fun add_import_dir (path) (
    (= import_dirs (cons path import_dirs))
    ))

(fun add_imported_module (path) (
    ; XXX: fixme. canonicalize the `path'
    (= imported_modules (cons path imported_modules))
    ))

(fun is_already_imported (path) (
    (var list imported_modules)
    (while list (do
        (if (streq path (car list))
            (return @TRUE)
            )
        (= list (cdr list))
        ))
    (return @FALSE)
    ))

(fun import_module_direct (orig path) (
    (var dir import_dirs)
    (while dir (do
        (var fullpath (build_path (car dir) path ".rl"))
        (if (file_exists fullpath) (do
            (if (is_already_imported current_mod fullpath)
                (return Nil)
                )
            (add_imported_module fullpath)

            (var ichan (open_in fullpath))
            (var fd (open "."))
            (chdir (get_directory fullpath))

            (push_parser fullpath ichan)
            (interpret)
            (pop_parser)

            (fchdir fd)
            (close_in ichan)

            (return Nil)
            ))
        (= dir (cdr dir))
        ))
    (output_error stderr)
    (output_string stderr "module `")
    (if orig
        (pretty_print stderr orig)
        (output_string stderr path)
        )
    (output_string stderr "' was not found\n")
    (exit 1)
    ))

(fun import_module (arg) (
    (import_module_direct arg (construct_path arg))
    ))

(fun construct_path (arg) (
    (var hd (expr_head arg))
    (if (== hd String) (return arg)
    (if (== hd Symbol) (return (symbol_name arg))
    (if (&& (== hd (to_sym "DoubleColon")) (== (expr_size arg) 2))
        (return (strcat (strcat (construct_path (expr_arg arg 0)) "/")
            (construct_path (expr_arg arg 1))))
            )))
    (output_error stderr)
    (output_string stderr "invalid module: ")
    (pretty_print stderr arg)
    (output_char stderr '\n')
    (exit 1)
    ))

(fun compile_import (asm env expr) (
    (put_push asm (expr_arg_symbol expr 0))
    (compile_simple_call asm 1 import_module)
    ))

(fun builtin_expand_args (args) (
    (if (! args) (return 0))
    (return (cons (expand current_mod (car args)) (builtin_expand_args (cdr args))))
    ))

(fun builtin_expand (expr) (
    (if (is_atom expr) (return expr))
    (var hd (expr_head expr))
    (var args (builtin_expand_args (expr_args expr)))
    (if (== hd List)
        (return args)
        (return (make_expr hd args))
        )
    ))

(fun setup_builtin_functions (mod) (
    (add_builtin_function1 mod Rewrite DontCare builtin_expand)
    ))

(extern fun setup_numeric)
(extern fun setup_io)
(extern fun setup_list)
(extern fun setup_tuple)

(fun init_stdlib (mod) (
    (setup_numeric mod)
    (setup_io mod)
    (setup_list mod)
    (setup_tuple mod)
    ))

    ))
