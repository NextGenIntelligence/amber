;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-interp.rlc 2012-01-19 23:01:18 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-parse")
(import "rowl1-symtable")
(import "rowl1-assemble")
(import "rowl1-compile")
(import "rowl1-module")

(export var current_loc null)
(export fun set_loc (loc) (
    (= current_loc loc)
    ))

(export var current_mod null)

(export fun set_current_module (mod) (
    (= current_mod mod)
    ))

(export fun eval_file (path) (
    (var start (gettimeofday))
    (= current_mod (make_module (to_sym "%global") 0))
    (= current_loc no_loc)

    (setup_builtin_functions current_mod)
    (setup_builtin_compilers current_mod)
    (init_stdlib current_mod)
    (import_module current_mod (to_sym "std"))

    (var ichan (open_in path))
    (init_parser path ichan)

    (add_include_dir "./")
    (add_include_dir "/usr/lib/amber/")
    (include_file "amber/syntax.ab")
    (import_module current_mod (qualified "std" (to_sym "syntax")))
    (include_file "amber/io.ab")
    (import_module current_mod (qualified "std" (to_sym "io")))

    (interpret)
    (close_in ichan)

    (var end (gettimeofday))
    (var diff (timeval_sub end start))
    (output_string stderr "elapsed time : ")
    (output_timeval stderr diff)
    (output_char stderr '\n')
    ))

(fun call1 (mod sym arg0) (
    (var code (lookup_func mod sym))
    (return (byterun code arg0))
    ))

(fun eval (expr) (
    (return (call1 current_mod Eval expr))
    ))

(fun rewrite (expr) (
    (return (call1 current_mod Rewrite expr))
    ))

(fun interpret () (
    (var es (parse))
    (while es (do
        (var e (rewrite (car es)))
        (eval e)
        (= es (cdr es))
        ))
    (= current_loc no_loc)
    ))

(fun default_eval (expr) (
    (var asm (make_assembler))
    (compile asm current_mod expr)
    (put_ireturn asm)
    (return (byterun (get_code asm)))
    ))

(fun eval_located (expr) (
    (set_loc (expr_arg expr 0))
    (return (eval (expr_arg expr 1)))
    ))

(fun eval_define_module (expr) (
    (if (! (in_top_scope current_mod)) (do
        (output_error stderr current_loc)
        (output_string stderr "module definition in sub-scope is not allowed\n")
        (exit 1)
        ))
    (var modsig (expr_arg expr 0))
    (var block  (expr_arg expr 1))
    (var save_current_mod current_mod)
    (var module (find_module current_loc current_mod modsig @TRUE))
    (set_current_module module)
    
    (var es (expr_args block))
    (while es (do
        (var e (rewrite (car es)))
        (eval e)
        (= es (cdr es))
        ))

    (set_current_module save_current_mod)
    (return 0)
    ))

(fun builtin_rewrite_args (args) (
    (if (! args) (return 0))
    (return (cons (rewrite (car args)) (builtin_rewrite_args (cdr args))))
    ))

(fun builtin_rewrite (expr) (
    (if (is_atom expr) (return expr))
    (var hd (expr_head expr))
    (var args (builtin_rewrite_args (expr_args expr)))
    (if (== hd List)
        (return args)
        (return (make_expr hd args))
        )
    ))

(var include_dirs null)
(var included_modules null)

(fun add_include_dir (path) (
    (= include_dirs (cons path include_dirs))
    ))

(fun add_included_module (path) (
    ; XXX: fixme. canonicalize the `path'
    (= included_modules (cons path included_modules))
    ))

(fun is_already_included (path) (
    (var list included_modules)
    (while list (do
        (if (streq path (car list))
            (return @TRUE)
            )
        (= list (cdr list))
        ))
    (return @FALSE)
    ))

(fun include_file (path) (
    (var dir include_dirs)
    (while dir (do
        (var fullpath (build_path (car dir) path ""))
        (if (file_exists fullpath) (do
            (if (is_already_included fullpath)
                (return Nil)
                )
            (add_included_module fullpath)

            (var ichan (open_in fullpath))
            (var fd (open "."))
            (chdir (get_directory fullpath))

            (push_parser fullpath ichan)
            (interpret)
            (pop_parser)

            (fchdir fd)
            (close_in ichan)

            (return Nil)
            ))
        (= dir (cdr dir))
        ))
    (output_error stderr current_loc)
    (output_string stderr "`")
    (output_string stderr path)
    (output_string stderr "' was not found\n")
    (exit 1)
    ))

(fun eval_include (expr) (
    (var path (expr_arg_string expr 0))
    (include_file path)
    (return 0)
    ))

(fun setup_builtin_functions (mod) (
    (var symT (headP Symbol))
    (var blockT (headP Block))
    (add_builtin_function1 mod Rewrite DontCare builtin_rewrite)
    (add_builtin_function1 mod Eval DontCare default_eval)
    (add_builtin_function1 mod Eval (headP Located) eval_located)
    (add_builtin_function1 mod Eval
         (make_expr DefModule (list2 symT blockT))
         eval_define_module)
    (add_builtin_function1 mod Eval
         (make_expr DefModule (list2 (headP Qualified) blockT))
         eval_define_module)
    (add_builtin_function1 mod Eval
        (make_expr Include (list1 (headP String)))
        eval_include)
    ))

(extern fun setup_numeric)
(extern fun setup_io)
(extern fun setup_list)
(extern fun setup_tuple)

(fun init_stdlib (mod) (
    (var std (make_module (to_sym "std") mod))
    (setup_numeric std)
    (setup_io std)
    (setup_list std)
    (setup_tuple std)
    ))

    ))
