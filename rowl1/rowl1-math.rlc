;
; rowl - 1st generation
; Copyright (C) 2012 nineties
;
; $Id: rowl1-math.rlc 2014-01-23 02:39:14 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-object")
(import "rowl1-module")
(import "rowl1-float")
(import "rowl1-numeric")
(import "rowl1-compile")
(import "rowl1-assemble")
(import "rowl1-error")

(extern object global)
(extern object current_loc)

(fun float_sqrt (f) (
    (if (float_sign f)
        (throw (out_of_domain current_loc (to_sym "sqrt") f)))
    (= f (copy_float f))
    (return (fsqrt f))
    ))

(fun float_sin (f) (
    (= f (copy_float f))
    (return (fsin f))
    ))

(fun float_cos (f) (
    (= f (copy_float f))
    (return (fcos f))
    ))

(fun float_tan (f) (
    (= f (copy_float f))
    (return (ftan f))
    ))

(fun float_pow (x y) (
    (if (! (float_positive x))
        (throw (out_of_domain current_loc (to_sym "pow") x)))
    (= x (copy_float x))
    (return (fpow x y))
    ))

(var napier (float_from_s "2.7182818284590452"))
(var two    (itof 2))
(var ten    (itof 10))

(fun float_log (x y) (
    (if (! (float_positive x))
        (throw (out_of_domain current_loc (to_sym "log") x)))
    (if (! (float_positive y))
        (throw (out_of_domain current_loc (to_sym "log") y)))
    (return (flog x y))
    ))

(fun float_logE (x) ((return (float_log x napier))))
(fun float_log2 (x) ((return (float_log x two))))
(fun float_log10 (x) ((return (float_log x ten))))

(var to_f (to_sym "to_f"))
(fun to_float (v) (
    (var r (runcode (lookup_func global to_f) v))
    (if (== r @C_UNDEF)
        (throw (make_object3 Exception current_loc
            (string "Can't convert to floating-point number")
            v)))
    (if (!= (node_type r) @FloatE)
        (throw (exception current_loc (string "to_f must returns floating-point number")))
        )
    (return r)
    ))

(fun sqrt (v) (
    (return (float_sqrt (to_float v)))
    ))

(fun sin (v) (
    (return (float_sin (to_float v)))
    ))

(fun cos (v) (
    (return (float_cos (to_float v)))
    ))

(fun tan (v) (
    (return (float_tan (to_float v)))
    ))

(fun tan (v) (
    (return (float_tan (to_float v)))
    ))

(fun pow (x y) (
    (return (call2 (to_sym "pow") (to_float x) (to_float y)))
    ))

(fun log (x y) (
    (return (call2 (to_sym "log") (to_float x) (to_float y)))
    ))

(fun log1 (x) (
    (return (call1 (to_sym "log") (to_float x)))
    ))

(export fun setup_math (global) (
    (var math (set_undef_slot global (to_sym "Math") (make_module (to_sym "Math"))))
    (add_function1 math (to_sym "sqrt") DontCare sqrt 0)
    (add_function1 math (to_sym "sin") DontCare sin 0)
    (add_function1 math (to_sym "cos") DontCare cos 0)
    (add_function1 math (to_sym "tan") DontCare tan 0)
    (add_function2 math (to_sym "pow") DontCare DontCare pow 0)
    (add_function2 math (to_sym "log") DontCare DontCare log 0)
    (add_function1 math (to_sym "log") DontCare log1 0)

    (add_function1 math (to_sym "sqrt") floatT float_sqrt 0)
    (add_function1 math (to_sym "sin") floatT float_sin 0)
    (add_function1 math (to_sym "cos") floatT float_cos 0)
    (add_function1 math (to_sym "tan") floatT float_tan 0)
    (add_function2 math (to_sym "pow") floatT floatT float_pow 0)
    (add_function2 math (to_sym "log") floatT floatT float_log 0)
    (add_function1 math (to_sym "log") floatT float_logE 0)
    (add_function1 math (to_sym "log2") floatT float_log2 0)
    (add_function1 math (to_sym "log10") floatT float_log10 0)
    ))

   ))
