;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-compile.rlc 2012-11-25 01:42:46 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-symtable")
(import "rowl1-module")
(import "rowl1-assemble")
(import "rowl1-error")

(var Closure       (to_sym "%Closure"))
(var AllocClsEnv   (to_sym "%AllocClosureEnv"))
(var Ref           (to_sym "%Ref"))
(var Decons        (to_sym "%Decons"))
(var uninitialized (to_sym "%uninitialized"))
(var noguard       (to_sym "%noguard"))
(var closed        (to_sym "%closed"))

; compilers

(extern object current_loc)
(extern object current_mod)
(extern fun set_loc)

(fun trace_func (msg val) (
    (debugs msg)
    (debugpf val)
    (return val)
    ))

(fun trace (asm msg) (
    (put_push asm (string msg))
    (compile_simple_call asm 2 trace_func)
    ))

(export fun must_be_module_variable (sym val) (
    (if (!= (expr_head val) ModuleVariable)
        (throw (unexpected_error current_loc
            (string "module variable is required")
            sym))
        )
    ))

(fun is_identifier (expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (return @TRUE))
    (if (&& (== hd Qualified) (== (expr_size expr) 2)) (do
        (if (!= (expr_head (expr_arg expr 0)) Symbol) (return @FALSE))
        (return (is_identifier (expr_arg expr 1)))
        ))
    (return @FALSE)
    ))

(fun defined_symbol (expr) (
    (var lhs (expr_arg expr 0))
    (var hd (expr_head lhs))
    (if (== hd Symbol) (return lhs))
    (if (== hd Ref) (return (expr_arg lhs 2)))
    (return nil)
    ))

(export fun callable (expr) (
    (var hd (expr_head expr))
    (if (== hd Function)
        (return @TRUE)
        )
    (return @FALSE)
    ))

(fun iter_args (f expr arg level) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (if (== level 0) (return (f expr arg)))
        (return arg)
        ))
    (if (is_atom expr) (return arg))
    (if (== hd Quote) (return arg))
    (if (== hd QuasiQuote) (+= level 1))
    (if (== hd Unquote) (-= level 1))
    (var args (expr_args expr))
    (while args (do
        (= arg (iter_args f (car args) arg level))
        (= args (cdr args))
        ))
    (return arg)
    ))

(fun delete_var (sym fv) (
    (return (list_delete sym fv))
    ))

(fun delete_args (expr fv) (
    (if (== (expr_head expr) Where)
        (return (iter_args delete_var (expr_arg expr 0) fv 0))
        (return (iter_args delete_var expr fv 0))
        )
    ))

(fun add_var (sym list) (
    (return (cons sym (list_delete sym list)))
    ))

(fun collect_args (args) (
    (if (== (expr_head args) Where)
        (return (iter_args add_var (expr_arg args 0) 0 0))
        (return (iter_args add_var args 0 0))
        )
    ))

(fun fv_iter_block (mod exprs fv) (
    (if (! exprs) (return fv))
    (= fv (fv_iter_block mod (cdr exprs) fv))
    (return (fv_iter mod (car exprs) 0 fv))
    ))

(fun fv_iter (mod expr level fv) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (if (== level 0) (do
            (= fv (list_delete expr fv))
            (var info (lookup_symbol mod expr))
            (if (== (expr_head info) ModuleVariable)
                ; module-variables are not free-variables.
                (return fv)
                )
            (if (|| (== expr nil) (|| (== expr true) (|| (== expr false) (== expr undefined))))
                (return fv)
                )
            (return (cons expr fv))
            ))
        (return fv)
        ))
    (if (is_atom expr) (return fv))
    (if (== level 0) (do
        (if (|| (== hd DefVariable) (== hd DefFunction)) (do
            (= fv (fv_iter mod (expr_arg expr 1) 0 fv))
            (return (delete_args (expr_arg expr 0) fv))
            ))
        (if (== hd Lambda) (do
            (= fv (fv_iter mod (expr_arg expr 1) 0 fv))
            (var arg (expr_arg expr 0))
            (if (== (expr_head arg) Where)
                (= fv (fv_iter mod (expr_arg arg 1) 0 fv))
                )
            (return (delete_args (expr_arg expr 0) fv))
            ))
        (if (== hd Ref)
            (return (fv_iter mod (expr_arg expr 0) 0 fv))
            )
        (if (== hd Block) 
            (return (fv_iter_block mod (expr_arg_list expr 0) 0 fv))
            )
        (if (== hd Dynamic)
            (return fv)
            )
        ))
    (if (== hd Quote) (return fv))
    (if (== hd QuasiQuote) (+= level 1)
    (if (== hd Unquote) (-= level 1)))
    (var args (expr_args expr))
    (while args (do
        (= fv (fv_iter mod (car args) level fv))
        (= args (cdr args))
        ))
    (return fv)
    ))

(fun free_variables (mod expr) (
    (return (fv_iter mod expr 0 0))
    ))

; alpha-conversion

; this routine also translates
; f(... x ... x ...) : body
; to
; f(... x ... y ...) where x==y : body

(fun alpha_args_iter (tbl chk rep expr level) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (if (is_special_symbol expr) (return expr))
        (if (== level 0) (do
            (if (symtable_find tbl expr)
                (do
                    (var new_sym (unique_sym))
                    (symtable_add tbl expr new_sym)
                    (if (list_member expr (field_get chk 0)) (do
                        (field_set rep 0 (cons (struct 2 expr new_sym)
                            (field_get rep 0)))
                        ))
                    (return new_sym)
                )
                (do
                    (symtable_add tbl expr expr)
                    (field_set chk 0 (cons expr (field_get chk 0)))
                    (return expr)
                ))
            ))
        (return expr)
        ))
    (if (is_atom expr) (return expr))
    (if (== hd Quote) (return expr))
    (if (== hd Domain)
        (if (== level 0) (do
            (expr_arg_set expr 0 (alpha_args_iter tbl chk rep (expr_arg expr 0) 0))
            (return expr)
            ))
    (if (== hd QuasiQuote) (+= level 1)
    (if (== hd Unquote) (-= level 1))))
    (var args (expr_args expr))
    (while args (do
        (setcar args (alpha_args_iter tbl chk rep (car args) level))
        (= args (cdr args))
        ))
    (return expr)
    ))

(fun setup_guard (rep guard) (
    (var ls (field_get rep 0))
    (while ls (do
        (var v1 (field_get (car ls) 0))
        (var v2 (field_get (car ls) 1))
        (if (== guard nil)
            (= guard (make_expr Equal (list2 v1 v2)))
            (= guard (make_expr SeqAnd (list2 guard (make_expr Equal (list2 v1 v2)))))
            )
        (= ls (cdr ls))
        ))
    (return guard)
    ))

(fun alpha_args (tbl args) (
    (var chk (struct 1 0))
    (var rep (struct 1 0))
    (if (== (expr_head args) Where)
        (do
            (expr_arg_set args 0 (alpha_args_iter tbl chk rep (expr_arg args 0) 0)) 
            (var guard (alpha tbl (expr_arg args 1)))
            (expr_arg_set args 1 (setup_guard rep guard))
            (return args)
        )
        (do
            (= args (alpha_args_iter tbl chk rep args 0))
            (var guard (setup_guard rep nil))
            (if (== guard nil)
                (return args)
                (return (make_expr Where (list2 args guard)))
                )
        ))
    ))

(fun alpha (tbl expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (if (is_special_symbol expr) (return expr))
        (var subst (symtable_find tbl expr))
        (if subst (return subst))
        (return expr)
        ))
    (if (is_atom expr) (return expr))
    (if (== hd Located) (do
        (expr_arg_set expr 1 (alpha tbl (expr_arg expr 1)))
        (return expr)
        ))
    (if (|| (== hd DefVariable) (== hd DefFunction)) (do
        (expr_arg_set expr 0 (alpha_args tbl (expr_arg expr 0)))
        (expr_arg_set expr 1 (alpha tbl (expr_arg expr 1)))
        (return expr)
        ))
    (if (== hd Block) (do
        (var exprs (expr_arg_list expr 0))
        (symtable_push tbl)
        (while exprs (do
            (setcar exprs (alpha tbl (car exprs)))
            (= exprs (cdr exprs))
            ))
        (symtable_pop tbl)
        (return expr)
        ))
    (if (== hd Lambda) (do
        (symtable_push tbl)
        (expr_arg_set expr 0 (alpha_args tbl (expr_arg expr 0))) 
        (expr_arg_set expr 1 (alpha tbl (expr_arg expr 1)))
        (symtable_pop tbl)
        (return expr)
        ))
    (if (== hd Quote) (return expr))
    (if (== hd QuasiQuote) (do
        (expr_arg_set expr 0 (alpha_qquote tbl (expr_arg expr 0) 0))
        (return expr)
        ))
    (if (== hd Dynamic)
        (return expr)
        )
    (var args (expr_args expr))
    (while args (do
        (setcar args (alpha tbl (car args)))
        (= args (cdr args))
        ))
    (return expr)
    ))

(fun alpha_qquote (tbl expr level) (
    (if (is_atom expr) (return expr))
    (var hd (expr_head expr))
    (if (== hd Unquote) (do
        (if (== level 0) (do
            (expr_arg_set expr 0 (alpha tbl (expr_arg expr 0)))
            (return expr)
            ))
        (-= level 1)
        )
    (if (== hd QuasiQuote)
        (+= level 1)
        ))
    (var args (expr_args expr))
    (while args (do
        (setcar args (alpha_qquote tbl (car args) level))
        (= args (cdr args))
        ))
    (return expr)
    ))

(fun alloc_function (args code guard) (
    (return (variant @FunctionE 4 0 args code guard))
    ))

(fun make_function (args code guard) (
    (var arity (list_len args))
    (= args (cons (box arity) args))
    (return (alloc_function args code guard))
    ))

(fun make_bound (fun1 fun2) (
    (if (! (callable fun1))
        (throw (type_error current_loc (string "function") fun1))
        )
    (if (! (callable fun2))
        (throw (type_error current_loc (string "function") fun2))
        )
    (return (variant @BoundFunctionE 3 0 fun1 fun2))
    ))

(var maybe (to_sym "maybe"))
(fun scan_clsvars (mod expr tbl) (
    (if (is_atom expr) (return expr))
    (var hd (expr_head expr))
    (if (== hd Located) (do
        (expr_arg_set expr 1 (scan_clsvars mod (expr_arg expr 1) tbl))
        (return expr)
        ))
    (if (|| (== hd DefVariable) (== hd DefFunction)) (do
        (var sym (defined_symbol expr))
        (if (! (symtable_find tbl sym)) (do
            (symtable_add tbl sym maybe)
            ))
        (expr_arg_set expr 1 (scan_clsvars mod (expr_arg expr 1) tbl))
        (return expr)
        ))
    (if (== hd Block) (do
        (var exprs (expr_arg_list expr 0))
        (while exprs (do
            (setcar exprs (scan_clsvars mod (car exprs) tbl))
            (= exprs (cdr exprs))
            ))
        (return expr)
        ))
    (if (== hd Lambda) (do
        ; free variables of lambdas will be closure variables.
        (var fv (free_variables mod expr))
        (if (! fv) (return expr))
        (while fv (do
            (var info (symtable_find tbl (car fv)))
            (if (== info maybe) (do
                (symtable_replace tbl (car fv) true)
                ))
            (= fv (cdr fv))
            ))
        (return (make_expr Closure (list2 nil expr)))
        ))
    (if (== hd Closure)
        ; Closure has no closure variables since it is already closed.
        (return expr)
        )
    (if (== hd Ref)
        (return expr)
        )
    (if (== hd Quote)
        (return expr)
        )
    (if (== hd QuasiQuote) (do
        (expr_arg_set expr 0 (scan_clsvars_qquote mod (expr_arg expr 0) tbl 0))
        (return expr)
        ))
    (if (== hd Dynamic)
        (return expr)
        )
    (var args (expr_args expr))
    (while args (do
        (setcar args (scan_clsvars mod (car args) tbl))
        (= args (cdr args))
        ))
    (return expr)
    ))

(fun scan_clsvars_qquote (mod expr tbl level) (
    (if (is_atom expr) (return expr))
    (var hd (expr_head expr))
    (if (== hd Unquote) (do
        (if (== level 0) (do
            (expr_arg_set expr 0 (scan_clsvars mod (expr_arg expr 0) tbl))
            (return expr)
            ))
        (-= level 1)
        )
    (if (== hd QuasiQuote) 
        (+= level 1)
        ))
    (var args (expr_args expr))
    (while args (do
        (setcar args (scan_clsvars_qquote mod (car args) tbl level))
        (= args (cdr args))
        ))
    (return expr)
    ))

(fun subst_clsvars (tbl cls expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (var v (symtable_find tbl expr))
        (if (&& v (!= v maybe)) (return (copy_clsent v)))
        (return expr)
        ))
    (if (is_atom expr) (return expr))
    (if (== hd Located) (do
        (expr_arg_set expr 1 (subst_clsvars tbl cls (expr_arg expr 1)))
        (return expr)
        ))
    (if (|| (== hd DefVariable) (== hd DefFunction)) (do
        (expr_arg_set expr 1 (subst_clsvars tbl cls (expr_arg expr 1)))
        (expr_arg_set expr 0 (subst_clsvars tbl cls (expr_arg expr 0)))
        (return expr)
        ))
    (if (== hd Block) (do
        (var exprs (expr_arg_list expr 0))
        (while exprs (do
            (setcar exprs (subst_clsvars tbl cls (car exprs)))
            (= exprs (cdr exprs))
            ))
        (return expr)
        ))
    (if (== hd Lambda) (do
        (var lhs (expr_arg expr 0))
        (if (== (expr_head lhs) Where)
            (expr_arg_set lhs 1 (subst_clsvars tbl cls (expr_arg lhs 1)))
            )
        (expr_arg_set expr 1 (subst_clsvars tbl cls (expr_arg expr 1)))
        (return expr)
        ))
    (if (== hd Closure) (do
        (if (== (expr_arg expr 0) nil)
            (expr_arg_set expr 0 cls)
            )
        (expr_arg_set expr 1 (subst_clsvars tbl cls (expr_arg expr 1)))
        (return expr)
        ))
    (if (== hd Ref) (do
        (return (make_expr Ref (list3
            (subst_clsvars tbl cls (expr_arg expr 0))
            (expr_arg expr 1)
            (expr_arg expr 2)
            )))
        ))
    (if (== hd Quote)
        (return expr)
        )
    (if (== hd QuasiQuote) (do
        (expr_arg_set expr 0 (subst_clsvars_qquote tbl cls (expr_arg expr 0) 0))
        (return expr)
        ))
    (if (== hd Dynamic)
        ; The binding of a dynamic variable is resolved at run-time.
        (return expr)
        )
    (var args (expr_args expr))
    (while args (do
        (setcar args (subst_clsvars tbl cls (car args)))
        (= args (cdr args))
        ))
    (return expr)
    ))

(fun subst_clsvars_qquote (tbl cls expr level) (
    (if (is_atom expr) (return expr))
    (var hd (expr_head expr))
    (if (== hd Unquote) (do
        (if (== level 0) (do
            (expr_arg_set expr 0 (subst_clsvars tbl cls (expr_arg expr 0)))
            (return expr)
            ))
        (-= level 1)
        )
    (if (== hd QuasiQuote) 
        (+= level 1)
        ))
    (var args (expr_args expr))
    (while args (do
        (setcar args (subst_clsvars_qquote tbl cls (car args) level))
        (= args (cdr args))
        ))
    (return expr)
    ))

(extern fun compile_matching)
(export fun lookup_func (mod sym) (
    (var def (lookup_symbol mod sym))
    (if (! def) 
        (throw (undefined_fun current_loc sym))
        )
    (must_be_module_variable sym def)
    (check_if_initialized sym def)
    (var box (expr_arg def 0))
    (var func (field_get box 0))
    (if (! (callable func))
        (throw (type_error current_loc (string "function") sym))
        )
    (var loc (field_get box 1))
    (return (compile_matching loc sym func))
    ))

(export fun get_bytecode (obj func) (
    (return (compile_matching current_loc obj func))
    ))

(export fun compile_main (mod expr) (
    (var asm (make_assembler))
    (compile asm mod (alpha (make_symtable 10) expr))
    (put_ireturn asm)
    (return (get_code asm))
    ))

(fun compile (asm mod expr) (
    (byterun (lookup_func mod Compile) asm mod expr)
    ))

(export fun call1 (sym arg0) (
    (return (byterun (lookup_func current_mod sym) arg0))
    ))

(export fun call2 (sym arg0 arg1) (
    (return (byterun (lookup_func current_mod sym) arg0 arg1))
    ))

(export fun call3 (sym arg0 arg1 arg2) (
    (return (byterun (lookup_func current_mod sym) arg0 arg1 arg2))
    ))

(fun topscope_only (asm mod expr) (
    (throw (unexpected_error current_loc
        (string "Allowed only in top-level scope")
        expr))
    ))

(fun check_arg_size (name size expr) (
    (if (!= (expr_size expr) size)
        (throw (type_error current_loc
            (strcat "expression with "
            (strcat (itos size) " arguments"))
            expr
            ))
        )
    ))

(fun compile_error (asm mod expr) (
    (throw (unknown_expression current_loc expr))
    ))

(fun compile_located (asm mod expr) (
    (set_loc (expr_arg expr 0))
    (compile asm mod (expr_arg expr 1))
    ))

(fun compile_const (asm mod expr) (
    (put_push asm expr)
    ))

(fun compile_qualified (asm mod expr) (
    (var modsig (expr_arg expr 0))
    (var module (find_module current_loc mod modsig @FALSE))
    (compile asm module (expr_arg expr 1))
    ))

(fun compile_make_expr (asm mod expr) (
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (compile_simple_call asm 2 make_expr_user)
    ))

(fun compile_head (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (compile_simple_call asm 1 expr_head)
    ))

(fun compile_arguments (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (compile_simple_call asm 1 expr_args)
    ))

(fun compile_exprat (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (put_field_get2 asm)
    (compile asm mod (expr_arg expr 1))
    (put_imm_i1 asm)
    (put_sar asm)
    (put_list_at asm)
    ))

(fun copy_clsent (cls) (
    (return (make_expr Ref (expr_args cls)))
    ))

(fun store_args (tbl args stmts) (
    (var vars (collect_args args))
    (while vars (do
        (var s (symtable_find tbl (car vars)))
        (if (&& s (!= s maybe)) (do 
            ; this argument is a closure-variable.
            (= stmts (cons (make_expr Assign (list2 (copy_clsent s) (car vars))) stmts))
            ))
        (= vars (cdr vars))
        ))
    (return stmts)
    ))

(fun setup_closure_env (subst cls) (
    (var entries (symtable_entries subst))
    (var count 0)
    (for i 0 (vector_size entries) (do
        (var entry (vector_at entries i))
        (if (!= (field_get entry 1) maybe) (do
            (field_set entry 1
                (make_expr Ref (list3 cls (box count) (field_get entry 0))))
            (+= count 1)
            ))
        ))
    (return count)
    ))

(var compiling_closure null)
(var max_lvar_idx 0)
(fun compile_function (asm_body asm_guard mod args body guard cls) (
    ;; closure conversion
    (var tbl (make_symtable 10))
    (var vars (collect_args args))
    (while vars (do
        (symtable_add tbl (car vars) maybe)
        (= vars (cdr vars))
        ))
    (if (!= cls nil)
        (symtable_add tbl cls maybe)
        )
    (= body (scan_clsvars mod body tbl))

    ; this function needs to allocate an environment for closures.
    (var newcls (unique_sym)) ; closures' environment.
    (var clssize (setup_closure_env tbl newcls))
    (if (> clssize 0) (do
        (= body (subst_clsvars tbl newcls body))

        ; allocate closures' environment.
        (var stmts 0)
        (= stmts (cons (defvar newcls
            (make_expr AllocClsEnv (list1 (box clssize)))) stmts))
        (if (== cls nil)
            (= stmts (store_args tbl args stmts))
            (= stmts (store_args tbl (cons cls args) stmts))
            )
        (= stmts (cons body stmts))
        (= body (make_expr Block (list1 (list_reverse stmts))))
        ))
    (push_varscope mod)
    (setup_args (get_vartable mod) args)

    (if (!= guard noguard)
        (compile asm_guard mod guard)
        )

    (var cnt_addr (get_address asm_body))
    (put_allocate asm_body 0)

    (var save_max_lvar_idx max_lvar_idx)
    (= max_lvar_idx 0)
    (reset_variable_count mod)

    (compile asm_body mod body)
    (if compiling_closure
        (put_operand_byte asm_body (+ cnt_addr 1) (+ max_lvar_idx 1))
    (if (> max_lvar_idx 0)
        (put_operand_byte asm_body (+ cnt_addr 1) max_lvar_idx)
        ))
    (pop_varscope mod)
    (= max_lvar_idx save_max_lvar_idx)
    ))

(fun setup_args (tbl args) (
    (var orig args)
    (var idx 0)
    (while args (do
        (setup_arg tbl (make_arg idx) (car args) 0)
        (= args (cdr args))
        (+= idx 1)
        ))
    (return orig)
    ))

(fun setup_arg (tbl obj arg level) (
    (var argty (expr_head arg))
    (if (|| (== argty Int) (== argty String))
        return
        )
    (if (== argty Symbol) (do
        (if (== level 0) (symtable_add tbl arg obj))
        return
        ))
    (if (== argty Domain) (do
        (if (== level 0) (do
            (var head (expr_arg_symbol arg 1))
            (var v (expr_arg_symbol arg 0))
            (symtable_add tbl v obj)
            return
            ))
        ))
    (if (== argty List) (do
        (var idx 0)
        (while arg (do
            (var a (car arg))
            (if (== (expr_head a) Ellipsis) (do
                (if (cdr arg)
                    (throw (exception current_loc (string "Ellipsis node must be placed last in the order of arguments")))
                    )
                (if (> (expr_size a) 0) (do
                    (var v (expr_arg_symbol a 0))
                    (symtable_add tbl v (make_list_from obj idx))
                    ))
                return
                ))
            (setup_arg tbl (make_list_at obj idx) a level)
            (= arg (cdr arg))
            (incr idx)
            ))
        return
        ))
    (if (== argty Quote)
        return
        )
    (if (== argty Unquote) 
        (return (setup_arg tbl obj (expr_arg arg 0) (- level 1)))
        )
    (if (== argty QuasiQuote)
        (return (setup_arg tbl obj (expr_arg arg 0) (+ level 1)))
        )
    (if (== argty Ellipsis)
        (throw (exception current_loc (string "Variable-length arguments is not allowed")))
        )
    (var idx 0)
    (var args (expr_args arg))
    (while args (do
        (var a (car args))
        (if (== (expr_head a) Ellipsis) (do
            (if (cdr args)
                (throw (exception current_loc (string "Ellipsis node must be placed last in the order of arguments")))
                )
            (if (> (expr_size a) 0) (do
                (var v (expr_arg_symbol a 0))
                (symtable_add tbl v (make_expr_from obj idx))
                ))
            return
            ))
        (setup_arg tbl (make_expr_at obj idx) (car args) level)
        (= args (cdr args))
        (incr idx)
        ))
    ))

(fun var_loc (info) (
    (var hd (expr_head info))
    (if (|| (== hd ListAt) (|| (== hd ListFrom) (|| (== hd ExprAt) (== hd ExprFrom))))
        (return (var_loc (expr_arg info 0)))
        )
    (if (== hd ModuleVariable) (do
        (var box (expr_arg info 0))
        (if (! box)
            (return no_loc)
            (return (field_get box 1))
            )
        ))
    (return (expr_arg info 1))
    ))

(fun make_lvar (idx) (
    (return (make_expr LocalVariable (list2 (box idx) current_loc)))
    ))

(fun make_label (lbl) (
    (return (make_expr Label (list2 (box lbl) current_loc)))
    ))

(export fun get_arity () (
    (return (make_expr Arity 0))
    ))

(export fun make_arg (idx) (
    (return (make_expr Argument (list2 (box idx) current_loc)))
    ))

(export fun make_list_at (obj idx) (
    (return (make_expr ListAt (list2 obj (box idx))))
    ))

(export fun make_list_from (obj idx) (
    (return (make_expr ListFrom (list2 obj (box idx))))
    ))

(export fun make_expr_at (obj idx) (
    (return (make_expr ExprAt (list2 obj (box idx))))
    ))

(export fun make_expr_from (obj idx) (
    (return (make_expr ExprFrom (list2 obj (box idx))))
    ))

(fun compile_define_variable (asm mod expr) (
    (var rhs_head (expr_head (expr_arg expr 1)))
    (if (|| (== rhs_head Lambda) (== rhs_head Bind))
        (compile_define_function asm mod expr)
        (compile_define_variable_ asm mod expr)
        )
    ))
(fun compile_define_variable_ (asm mod expr) (
    (var overwrite false)
    (if (&& (== (expr_size expr) 3)
            (== (expr_arg expr 2) (to_sym "overwrite")))
        (= overwrite true)
        )
    (var lhs (expr_arg expr 0))
    (var rhs (expr_arg expr 1))

    (if (== (expr_head lhs) Ref)
        (return (compile_define_clsref asm mod lhs rhs overwrite))
        )
    (if (!= (expr_head lhs) Symbol)
        (return (compile_define_multi_variable asm mod lhs rhs overwrite))
        )

    (if (in_top_scope mod)
        (compile_define_variable_top   asm mod lhs rhs overwrite)
        (compile_define_variable_local asm mod lhs rhs overwrite)
        )
    ))

; translate
;
; Foo{x, y, Bar{z}} : e
;
; to
;
; tmp: (Foo{x, y, Bar{z}} -> [x,y,z])(e)
; x: decons(tmp)
; y: decons(tmp)
; z: decons(tmp)
(fun compile_define_multi_variable (asm mod lhs rhs overwrite) (
    (var vars (collect_args lhs))
    (compile asm mod (apply (make_expr Lambda (list2 (make_expr Tuple (list1 lhs)) vars)) (list1 rhs)))

    (while vars (do
        (var def nil)
        (if (== overwrite true)
            (= def (make_expr DefVariable (list3 (car vars) Decons (to_sym "overwrite"))))
            (= def (make_expr DefVariable (list2 (car vars) Decons)))
            )
        (compile_define_variable asm mod def)
        (put_drop asm)

        (= vars (cdr vars))
        ))
    (put_drop asm)
    (put_push asm nil)
    ))

(fun compile_decons (asm mod expr) (
    (put_decons asm)
    ))

(fun compile_define_variable_top (asm mod lhs rhs overwrite) (
    (if (== (expr_head lhs) Symbol) (do
        (if (== overwrite false) (check_redefinition mod lhs))
        (compile asm mod rhs)
        (put_push asm overwrite)
        (put_push asm lhs)
        (put_push asm mod)
        (compile_simple_call asm 4 add_module_variable)
        return
        ))
    (throw (string "not implemented"))
    ))

(fun compile_define_variable_local (asm mod lhs rhs overwrite) (
    (if (== (expr_head lhs) Symbol) (do
        (var idx 0)
        (if (== overwrite true)
            (do
                (var info (lookup_symbol mod lhs))
                (= idx (expr_arg_int info 0))
            )
            (do
                (check_redefinition mod lhs)
                (= idx (get_variable_count mod))
                (if (>= idx max_lvar_idx) (= max_lvar_idx (+ idx 1)))
                (incr_variable_count mod)
                (if compiling_closure (+= idx 1))
                (add_symbol mod lhs (make_lvar idx))
            ))
        (compile asm mod rhs)
        (put_store_lvar asm idx)
        return
        ))
    (throw (string "not implemented"))
    ))

(fun compile_define_clsref (asm mod clsref rhs overwrite) (
    (if (== overwrite false) (add_symbol mod (expr_arg_symbol clsref 2) clsref))
    (compile asm mod (assign clsref rhs))
    ))

(fun check_redefinition (mod sym) (
    (var info (lookup_symbol_local mod sym))
    (if (! info) return)
    (if (== (expr_head info) ModuleVariable) (do
        (if (|| (== (expr_arg info 1) false) (== (expr_arg info 2) true))
            return
            )
        ))
    (throw (redefined_var current_loc (var_loc info) sym))
    ))

(fun check_if_initialized (sym info) (
    (var box (expr_arg info 0))
    (if (! box) (do
        (var loc (expr_arg info 1))
        (throw (uninitialized_var loc sym))
        ))
    ))

(fun load_module_variable (sym disp) (
    (var v (caar disp))
    (if (== v uninitialized) (throw (uninitialized_var current_loc sym)))
    (return v)
    ))

(export fun compile_operand (asm opd sym) (
    (if (== sym compiling_closure) (do
        (put_load_lvar asm 0)
        return
        ))

    (var ty (expr_head opd))
    (if (== ty ModuleVariable) (do
        (var lbl (fresh_label asm))
        (put_push asm (expr_args opd)) ; variable-display
        (put_push asm sym)
        (compile_simple_call asm 2 load_module_variable)
        return
        ))
    (if (== ty LocalVariable) (do
        (put_load_lvar asm (expr_arg_int opd 0))
        return
        ))
    (if (== ty Arity) (do
        (put_arity asm)
        (put_imm_i1 asm)
        (put_shl asm)
        (put_iadd1 asm)
        return
        ))
    (if (== ty Argument) (do
        (put_arg asm (expr_arg_int opd 0))
        return
        ))
    (if (== ty ListAt) (do
        (compile_operand asm (expr_arg opd 0) sym)
        (put_imm_int asm (expr_arg_int opd 1))
        (put_list_at asm)
        return
        ))
    (if (== ty ListFrom) (do
        (compile_operand asm (expr_arg opd 0) sym)
        (put_imm_int asm (expr_arg_int opd 1))
        (put_list_from asm)
        return
        ))
    (if (== ty ExprAt) (do
        (compile_operand asm (expr_arg opd 0) sym)
        (put_field_get2 asm)
        (put_imm_int asm (expr_arg_int opd 1))
        (put_list_at asm)
        return
        ))
    (if (== ty ExprFrom) (do
        (compile_operand asm (expr_arg opd 0) sym)
        (put_field_get2 asm)
        (put_imm_int asm (expr_arg_int opd 1))
        (put_list_from asm)
        return
        ))
    (throw opd)
    (not_reachable "compile_operand")
    ))

(fun compile_var (asm mod sym) (
    (var v (lookup_symbol mod sym))
    (if (! v)
        ; `sym' is a module variable
        (= v (add_module_variable_display mod sym (struct 2 uninitialized no_loc)))
    (if (== (expr_head v) ModuleVariable) (do
        (var u (lookup_symbol_current_module mod sym))
        (if (! u)
            (= v (add_module_variable_display mod sym (expr_arg v 0)))
            )
        )))
    (compile_operand asm v sym)
    ))

(fun lookup_dynamic_var (sym) (
    (var info (lookup_effective_symbol current_mod sym))
    (must_be_module_variable sym info)
    (var box (expr_arg info 0))
    (return (field_get box 0))
    ))

(fun compile_dynamic_var (asm mod expr) (
    (var sym (expr_arg_symbol expr 0))
    (put_push asm sym)
    (compile_simple_call asm 1 lookup_dynamic_var)
    ))

(fun compile_apply (asm mod expr) (
    (var func (expr_arg expr 0))
    (var args (expr_arg expr 1))
    
    ; eval and push arguments from right to left
    (= args (list_reverse args))
    (var arity 0)
    (while args (do
        (compile asm mod (car args))
        (= args (cdr args))
        (incr arity)
        ))

    (compile asm mod func)
    (put_push asm func)
    (put_push asm current_loc)
    (compile_simple_call asm 3 compile_matching)
    (put_jcall asm (* 4 arity))
    ))

(fun compile_quote (asm mod expr) (
    (put_push asm (expr_arg expr 0))
    ))

(export fun compile_qquote_main (asm mod expr level) (
    (var hd (expr_head expr))
    (if (== hd Symbol)
        (return (put_push asm expr)))
    (if (== hd Int)
        (return (put_imm_int asm expr)))
    (if (== hd String)
        (return (put_push asm expr)))
    (if (is_atom expr)
        (return (put_push asm expr)))
    (if (== hd List) (do
        (if (! expr)
            (put_push asm 0)
            (do
                (compile_qquote_main asm mod (cdr expr) level)
                (compile_qquote_main asm mod (car expr) level)
                (put_cons asm)
            )
        )
        return
        ))
    (if (== hd Unquote)
        (if (== level 0)
            (return (compile asm mod (expr_arg expr 0)))
            (return (compile_qquote_main asm mod (expr_arg expr 0) (- level 1))) 
            )
    (if (== hd QuasiQuote)
        (+= level 1)
        ))
    (compile_qquote_main asm mod (expr_args expr) level)
    (put_push asm (expr_head expr))
    (compile_simple_call asm 2 make_expr_user)
    ))

(fun compile_qquote (asm mod expr) (
    (compile_qquote_main asm mod (expr_arg expr 0) 0)
    ))

(fun compile_list (asm mod expr) (
    (if (== expr 0)
        (put_zero asm)
        (do
            (compile asm mod (cdr expr))
            (compile asm mod (car expr))
            (put_cons asm)
        ))
    ))

(fun compile_tuple (asm mod expr) (
    (compile_list asm mod (expr_args expr))
    (put_push asm Tuple)
    (compile_simple_call asm 2 make_expr_user)
    ))

(fun compile_block_body (asm mod exprs) (
    (if (! exprs) (do
        (put_push asm nil)
        return
        ))
    (while exprs (do
        (compile asm mod (car exprs))
        (= exprs (cdr exprs))
        (if exprs (put_drop asm)) ; drop values except the last one
        ))
    ))

(fun compile_block_top  (asm mod expr) (
    (compile_function asm 0 mod 0 expr noguard nil)
    ))

(fun compile_block (asm mod expr) (
    (if (in_top_scope mod) (return (compile_block_top asm mod expr)))
    (var exprs (expr_arg expr 0))
    (push_varscope mod)
    (compile_block_body asm mod exprs)
    (pop_varscope mod)
    ))

(fun compile_seq (asm mod expr) (
    (var exprs (expr_arg expr 0))
    (compile_block_body asm mod exprs)
    ))

(fun compile_scoped (asm mod expr) (
    (var scope (expr_arg expr 0))
    (set_variable_count scope (get_variable_count mod))
    (compile asm scope (expr_arg expr 1))
    ))

(fun put_if_true (asm lbl) (
    (put_push asm true)
    (put_if_eq asm lbl)
    ))

(fun put_if_false (asm lbl) (
    (put_push asm false)
    (put_if_eq asm lbl)
    ))

(fun compile_if (asm mod expr) (
    (compile_ifelse_main asm mod (expr_arg expr 0) (expr_arg expr 1) nil)
    ))

(fun compile_ifelse (asm mod expr) (
    (compile_ifelse_main asm mod (expr_arg expr 0) (expr_arg expr 1) (expr_arg expr 2))
    ))

(fun compile_ifelse_main (asm mod cnd ifthen ifelse) (
    (var cnd_hd (expr_head cnd))
    (var size (expr_size cnd))
    (if (&& (== cnd_hd Not) (== size 1))
        (return (compile_ifelse_main asm mod (expr_arg cnd 0) ifelse ifthen))
        )
    (if (&& (== cnd_hd SeqAnd) (== size 2))
        (return (compile_ifelse_and asm mod cnd ifthen ifelse))
        )
    (if (&& (== cnd_hd SeqOr) (== size 2))
        (return (compile_ifelse_or asm mod cnd ifthen ifelse))
        )
    (if (== ifthen nil)
        (if (== ifelse nil)
            (do
                (compile asm mod cnd)
                (put_push asm nil)
            )
            (do
                (var exit_lbl (fresh_label asm))
                (put_push asm nil)
                (compile asm mod cnd)
                (put_if_true asm exit_lbl)
                (put_drop asm mod)
                (compile asm mod ifelse)
                (set_label asm exit_lbl)
            ))
        (if (== ifelse nil)
            (do
                (var exit_lbl (fresh_label asm))
                (put_push asm nil)
                (compile asm mod cnd)
                (put_if_false asm exit_lbl)
                (put_drop asm mod)
                (compile asm mod ifthen)
                (set_label asm exit_lbl)
            )
            (do
                (var else_lbl (fresh_label asm))
                (var exit_lbl (fresh_label asm))
                (compile asm mod cnd)
                (put_if_false asm else_lbl)
                (compile asm mod ifthen)
                (put_goto asm exit_lbl)
                (set_label asm else_lbl)
                (compile asm mod ifelse)
                (set_label asm exit_lbl)
            ))
        )
    ))

(fun compile_ifelse_and (asm mod cnd ifthen ifelse) (
    (var ifelse_lbl (fresh_label asm))
    (var exit_lbl   (fresh_label asm))
    (exit_if_false asm mod (expr_arg cnd 0) ifelse_lbl)
    (exit_if_false asm mod (expr_arg cnd 1) ifelse_lbl)
    (compile asm mod ifthen)
    (put_goto asm exit_lbl)
    (set_label asm ifelse_lbl)
    (compile asm mod ifelse)
    (set_label asm exit_lbl)
    ))

(fun compile_ifelse_or (asm mod cnd ifthen ifelse) (
    (var ifthen_lbl (fresh_label asm))
    (var exit_lbl   (fresh_label asm))
    (exit_if_true asm mod (expr_arg cnd 0) ifthen_lbl)
    (exit_if_true asm mod (expr_arg cnd 1) ifthen_lbl)
    (compile asm mod ifelse)
    (put_goto asm exit_lbl)
    (set_label asm ifthen_lbl)
    (compile asm mod ifthen)
    (set_label asm exit_lbl)
    ))

(fun exit_if_true (asm mod expr exit) (
    (var hd (expr_head expr))
    (var size (expr_size expr))
    (if (&& (== hd Not) (== size 1))
        (return (exit_if_false asm mod (expr_arg expr 0) exit))
        )
    (if (&& (== hd SeqOr) (== size 2)) (do
        (exit_if_true asm mod (expr_arg expr 0) exit)
        (exit_if_true asm mod (expr_arg expr 1) exit)
        return
        ))
    (if (&& (== hd SeqAnd) (== size 2)) (do
        (var fail (fresh_label asm))
        (exit_if_false asm mod (expr_arg expr 0) fail)
        (exit_if_true asm mod (expr_arg expr 1) exit)
        (set_label asm fail)
        return
        ))
    (compile asm mod expr)
    (put_if_true asm exit)
    ))

(fun exit_if_false (asm mod expr exit) (
    (var hd (expr_head expr))
    (var size (expr_size expr))
    (if (&& (== hd Not) (== size 1))
        (return (exit_if_true asm mod (expr_arg expr 0) exit))
        )
    (if (&& (== hd SeqOr) (== size 2)) (do
        (var fail (fresh_label asm))
        (exit_if_true asm mod (expr_arg expr 0) fail)
        (exit_if_false asm mod (expr_arg expr 1) exit)
        (set_label asm fail)
        return
        ))
    (if (&& (== hd SeqAnd) (== size 2)) (do
        (exit_if_false asm mod (expr_arg expr 0) exit)
        (exit_if_false asm mod (expr_arg expr 1) exit)
        return
        ))
    (compile asm mod expr)
    (put_if_false asm exit)
    ))

; translate
;
;   While{cnd, body}
;
; to
;
;   if (not c) goto exit
; head:
;   body
;   if (c) goto head
; exit:
;
(fun compile_while (asm mod expr) (
    (var cnd (expr_arg expr 0))
    (var body (expr_arg expr 1))
    (var exit_lbl (fresh_label asm))
    (var head_lbl (fresh_label asm))

    (add_symbol mod BreakLabel (make_label exit_lbl))
    (add_symbol mod ContinueLabel (make_label head_lbl))

    (compile asm mod cnd)

    (put_if_false asm exit_lbl)
    (set_label asm head_lbl)
    
    (compile asm mod body)
    (put_drop asm)
    (compile asm mod cnd)
    (put_if_true asm head_lbl)
    (set_label asm exit_lbl)
    (put_push asm nil)

    (delete_symbol mod ContinueLabel)
    (delete_symbol mod BreakLabel)
    ))

; translate for(i: ary) body to
;
; {
;     iter: ary.each
;     i: iter()
;     while (i != undefined) {
;         body
;         i = iter()
;     }
; }

(fun compile_for (asm mod expr) (
    (var def (expr_arg expr 0))
    (var i (expr_arg def 0))
    (var ary (expr_arg def 1))
    (var body (expr_arg expr 1))
    (var iter (unique_sym))
    (compile asm mod
        (block (list3
            (defvar iter (apply (to_sym "each") (list1 ary)))
            (defvar i (apply iter 0))
            (make_expr While (list2
                (make_expr Not (list1 (apply (to_sym "equal") (list2 i undefined))))
                (seq (list2
                    body
                    (assign i (apply iter 0))
                    ))))
            )))
    ))

(fun compile_revfor (asm mod expr) (
    (var def (expr_arg expr 0))
    (var i (expr_arg def 0))
    (var ary (expr_arg def 1))
    (var body (expr_arg expr 1))
    (var iter (unique_sym))
    (compile asm mod
        (block (list3
            (defvar iter (apply (to_sym "reverse_each") (list1 ary)))
            (assign i (apply iter 0))
            (make_expr While (list2
                (make_expr Not (list1 (apply (to_sym "equal") (list2 i undefined))))
                (seq (list2
                    body
                    (assign i (apply iter 0))
                    ))))
            )))
    ))

; translate for(i: a..b) body to
;
; i: {
;     i: a
;     tmp: b
;     while (i <= tmp) {
;         body
;         i += 1
;     }
;     i
; }

(fun compile_range_for (asm mod expr) (
    (var def (expr_arg expr 0))
    (var i (expr_arg def 0))
    (var rng (expr_arg def 1))
    (var a (expr_arg rng 0))
    (var b (expr_arg rng 1))
    (var body (expr_arg expr 1))
    (var tmp (unique_sym))

    (compile asm mod 
        (block (list3
            (defvar i a)
            (defvar tmp b)
            (make_expr While (list2
                (apply (to_sym "le") (list2 i tmp))
                (seq (list2
                    body
                    (assign i (apply (to_sym "add") (list3 i (box 1) (quote (to_sym "overwrite")))))))))
            )))
    ))

; translate revfor(i: a..b) body to
;
; i: {
;     i: b
;     tmp: a
;     while (i >= tmp) {
;         body
;         i -= 1
;     }
;     i
; }

(fun compile_range_revfor (asm mod expr) (
    (var def (expr_arg expr 0))
    (var i (expr_arg def 0))
    (var rng (expr_arg def 1))
    (var a (expr_arg rng 0))
    (var b (expr_arg rng 1))
    (var body (expr_arg expr 1))
    (var tmp (unique_sym))

    (compile asm mod
        (block (list3
            (defvar i b)
            (defvar tmp a)
            (make_expr While (list2
                (apply (to_sym "ge") (list2 i tmp))
                (seq (list2
                    body
                    (assign i (apply (to_sym "sub") (list3 i (box 1) (quote (to_sym "overwrite")))))))))
            )))
    ))

(fun compile_break (asm mod expr) (
    (var lbl (lookup_symbol mod BreakLabel))
    (if (! lbl)
        (throw (exception current_loc (string "`break' statement outside loop")))
        )
    (if (!= (expr_head lbl) Label)
        (not_reachable "compile_break")
        )
    (put_push asm nil)
    (put_goto asm (expr_arg_int lbl 0))
    ))

(fun compile_continue (asm mod expr) (
    (var lbl (lookup_symbol mod ContinueLabel))
    (if (! lbl)
        (throw (exception current_loc (string "`continue' statement outside loop")))
        )
    (if (!= (expr_head lbl) Label)
        (not_reachable "compile_continue")
        )
    (put_push asm nil)
    (put_goto asm (expr_arg_int lbl 0))
    ))

(fun compile_assign (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (var rhs (expr_arg expr 1))
    (if (!= (expr_head lhs) Symbol)
        (return (compile_multi_assign asm mod lhs rhs))
        )

    (compile asm mod rhs)
    (var v (lookup_symbol mod lhs))
    (if (! v)
        (throw (undefined_var current_loc lhs))
        )
    (var vty (expr_head v))
    (if (== vty ModuleVariable) (do
        (put_push asm (expr_args v))
        (put_car asm)
        (put_setcar asm)
        return
        )
    (if (== vty LocalVariable) (do
        (put_store_lvar asm (expr_arg_int v 0))
        return
        )
    (if (== vty Argument) (do
        (put_store_arg asm (expr_arg_int v 0))
        return
        ))))
    (throw (bug (string "compile_assign")))
    ))

; translate
;
; Foo{x, y, Bar{z}} = e
;
; to
;
; tmp: (Foo{x, y, Bar{z}} -> [x,y,z])(e)
; x = decons(tmp)
; y = decons(tmp)
; z = decons(tmp)
(fun compile_multi_assign (asm mod lhs rhs) (
    (var vars (collect_args lhs))
    (compile asm mod (apply (make_expr Lambda (list2 (make_expr Tuple (list1 lhs)) vars)) (list1 rhs)))

    (while vars (do
        (compile_assign asm mod (assign (car vars) Decons))
        (put_drop asm)
        (= vars (cdr vars))
        ))
    (put_drop asm)
    (put_push asm nil)
    ))

(fun compile_return (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (put_ireturn asm)
    ))

; handler must be a lambda
(var default_hdler (make_expr Lambda (list2 (to_sym "x")
    (make_expr Throw (list1 (to_sym "x"))))))
(fun compile_try (asm mod expr) (
    (var stmt (expr_arg expr 0))
    (var hdlr (expr_arg expr 1))
    (var hdlr_lbl (fresh_label asm))
    (var cont_lbl (fresh_label asm)) 

    (put_unwind_push asm hdlr_lbl)
    (compile asm mod stmt)

    (put_unwind_pop asm)
    (put_goto asm cont_lbl)
    (set_label asm hdlr_lbl)

    ; here, the thrown exception is on the top of stack.
    (compile asm mod (make_expr Bind (list2 hdlr default_hdler)))
    (put_push asm hdlr)
    (put_push asm current_loc)
    (compile_simple_call asm 3 compile_matching)
    (put_jcall asm 4)
    (set_label asm cont_lbl)
    ))

(fun compile_throw (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (put_throw asm)
    ))

(fun compile_eq (asm mod expr) (
    (compile asm mod (make_expr Apply (list2 (to_sym "equal") (expr_args expr))))
    ))

(fun compile_ne (asm mod expr) (
    (compile_eq asm mod expr)
    (var else_lbl (fresh_label asm))
    (var exit_lbl (fresh_label asm))
    (put_if_false asm else_lbl)
    (put_push asm false)
    (put_goto asm exit_lbl)
    (set_label asm else_lbl)
    (put_push asm true)
    (set_label asm exit_lbl)
    ))

(fun compile_logical (asm mod expr) (
	(compile asm mod (ifelse expr true false))
	))

(fun compile_lambda_main (asm mod args body guard cls) (
    (var asm_body (make_assembler))
    (if (!= guard noguard)
        (do
            (var asm_guard (make_assembler))
            (compile_function asm_body asm_guard mod args body guard cls)
            (put_ireturn asm_body)
            (put_push asm (make_function args (get_code asm_body) (get_code asm_guard)))
        )
        (do
            (compile_function asm_body 0 mod args body noguard cls)
            (put_ireturn asm_body)
            (put_push asm (make_function args (get_code asm_body) 0))
        ))
    ))

(fun compile_lambda_ (asm mod expr cls) (
    (var lhs (expr_arg expr 0))
    (var body (expr_arg expr 1))
    (var hd (expr_head lhs))
    (if (== hd Tuple)
        (compile_lambda_main asm mod (expr_args lhs) body noguard cls)
    (if (!= hd Where)
        (compile_lambda_main asm mod (list1 lhs) body noguard cls)
        (do
            (var guard (expr_arg lhs 1))
            (= lhs (expr_arg lhs 0))
            (= hd (expr_head lhs))
            (if (== hd Tuple)
                (compile_lambda_main asm mod (expr_args lhs) body guard cls)
                (compile_lambda_main asm mod (list1 lhs) body guard cls)
                )
        )))
    ))

(fun compile_lambda (asm mod expr) (
    (return (compile_lambda_ asm mod expr nil))
    ))

(fun compile_bind (asm mod expr) (
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (compile_simple_call asm 2 make_bound)
    ))

(fun build_closure (lam clos) (
    (var args (field_get lam 2))
    (var body (field_get lam 3))
    (var guard (field_get lam 4))
    (var asm (make_assembler))
    (if guard
        (do
            (put_push asm clos)
            ; This implementation is not good (the cost of copy might be large)
            (put_code asm guard)
            (return (alloc_function args body (get_code asm)))
        )
        (do
            (put_push asm clos)
            (put_push asm body)
            (put_jjump asm)
            (return (alloc_function args (get_code asm) guard))
        ))
    ))

(fun compile_closure (asm mod expr) (
    (compile asm mod (expr_arg expr 0))

    (var save_compiling_closure compiling_closure)
    (= compiling_closure (expr_arg expr 0))

    (compile_lambda_ asm mod (expr_arg expr 1) (expr_arg expr 0))
    (compile_simple_call asm 2 build_closure)

    (= compiling_closure save_compiling_closure)
    ))

(fun compile_alloc_clsenv (asm mod expr) (
    (var size (expr_arg_int expr 0))
    (var t size)
    (while (> t 0) (do
        (put_zero asm)
        (-= t 1)
        ))
    (put_struct asm size size)
    ))

(fun compile_clsref (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (put_fieldget asm (expr_arg_int expr 1))
    ))

(fun compile_clsref_assign (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (var rhs (expr_arg expr 1))
    (compile asm mod rhs)
    (compile asm mod (expr_arg lhs 0))
    (put_fieldset asm (expr_arg_int lhs 1))
    ))

(fun compile_fieldref (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (put_fieldget asm (expr_arg_int expr 1))
    ))

(fun compile_fieldref_assign (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (var rhs (expr_arg expr 1))
    (compile asm mod rhs)
    (compile asm mod (expr_arg lhs 0))
    (put_fieldset asm (expr_arg_int lhs 1))
    ))

(export fun compile_simple_function (asm arity func) (
    (var n arity)
    (while (> n 0) (do
        (decr n)
        (put_arg asm n)
        ))
    (compile_simple_call asm arity func)
    (put_ireturn asm)
    ))

(export fun compile_simple_call (asm arity func) (
    (if @(IS_PRIM func)
        (do
            (put_pcall asm @(PRIM_IDX func) (* 4 arity))
        )
        (do
            (put_imm_int32 asm func)
            (put_dcall asm (* 4 arity))
        ))
    ))

(fun append_function (mod sym newfunc) (
    (var info (lookup_symbol_local mod sym))
    (if info
        (do
            (must_be_module_variable sym info)
            (check_if_initialized sym info)
            (var box (expr_arg info 0))
            (var func (field_get box 0))
            (if (callable func)
                (= newfunc (make_bound newfunc func))
                )
            (field_set box 0 newfunc)
            return
        ))
    (= info (lookup_symbol mod sym))
    (if info
        (do
            (must_be_module_variable sym info)
            (check_if_initialized sym info)
            (var box (expr_arg info 0))
            (var func (field_get box 0))
            (if (callable func)
                (= newfunc (make_bound newfunc func))
                )
        ))
    (add_module_variable mod sym false newfunc)
    ))

; DefineFunction{sym, fun} is equivalent to:
; sym: fun                   (when `sym' is not defined)
; sym: fun | sym             (when `sym' is defined in outer scope)
; sym: fun | sym (overwrite) (when `sym' is defined in local scope)
(fun compile_define_function (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (var sym nil)
    (if (== (expr_head lhs) Ref)
        (= sym (expr_arg_symbol lhs 2))
    (if (== (expr_head lhs) Symbol)
        (= sym lhs)
        (throw (type_error current_loc (string "a symbol") lhs))
        ))

    (var fun (expr_arg expr 1))
    (var info (lookup_symbol_local mod sym))
    (if (is_defined_locally info)
        (return (compile_define_variable_ asm mod
            (make_expr DefVariable (list3 lhs (make_expr Bind (list2 fun lhs)) (to_sym "overwrite")))))
        )
    (= info (lookup_effective_symbol mod sym))
    (if info 
        (return (compile_define_variable_ asm mod
            (make_expr DefVariable (list2 lhs (make_expr Bind (list2 fun lhs))))))
        (return (compile_define_variable_ asm mod
            (make_expr DefVariable (list2 lhs fun))))
        )
    ))

(export fun add_builtin_function0 (mod sym func guard) (
    (var asm (make_assembler))
    (compile_simple_function asm 1 func)
    (var code (get_code asm))
    (append_function mod sym (make_function 0 code guard))
    ))

(export fun add_builtin_function1 (mod sym pat func guard) (
    (var asm (make_assembler))
    (compile_simple_function asm 1 func)
    (var code (get_code asm))
    (append_function mod sym (make_function (list1 pat) code guard))
    ))

(export fun add_builtin_function2 (mod sym pat1 pat2 func guard) (
    (var asm (make_assembler))
    (compile_simple_function asm 2 func)
    (var code (get_code asm))
    (append_function mod sym (make_function (list2 pat1 pat2) code guard))
    ))

(export fun add_builtin_function3 (mod sym pat1 pat2 pat3 func guard) (
    (var asm (make_assembler))
    (compile_simple_function asm 3 func)
    (var code (get_code asm))
    (append_function mod sym (make_function (list3 pat1 pat2 pat3) code guard))
    ))

(export fun add_builtin_function4 (mod sym pat1 pat2 pat3 pat4 func guard) (
    (var asm (make_assembler))
    (compile_simple_function asm 4 func)
    (var code (get_code asm))
    (append_function mod sym (make_function (list4 pat1 pat2 pat3 pat4) code guard))
    ))

(export fun add_builtin_function5 (mod sym pat1 pat2 pat3 pat4 pat5 func guard) (
    (var asm (make_assembler))
    (compile_simple_function asm 5 func)
    (var code (get_code asm))
    (append_function mod sym (make_function (list5 pat1 pat2 pat3 pat4 pat5) code guard))
    ))

(export fun setup_builtin_compilers (mod) (
    (var locT (domainP Loc))

    (add_compiler mod DontCare compile_error)

    (add_compiler mod (make_expr Located (list2 locT DontCare)) compile_located)

    ; These commands have been evaluated in parsing phase.
    (add_compiler mod (make_expr Open (list1 DontCare)) topscope_only)
    (add_compiler mod (make_expr Import (list1 DontCare)) topscope_only)

    (add_compiler mod (make_expr Qualified (list2 symT DontCare)) compile_qualified)

    (add_compiler mod (make_expr MakeExpr (list2 DontCare DontCare)) compile_make_expr)
    (add_compiler mod (make_expr Head (list1 DontCare)) compile_head)
    (add_compiler mod (make_expr Arguments (list1 DontCare)) compile_arguments)

    (add_compiler mod (make_expr DefVariable (list2 DontCare DontCare)) compile_define_variable)
    (add_compiler mod (make_expr DefVariable (list3 DontCare DontCare (quote (to_sym "overwrite")))) compile_define_variable)

    (add_compiler mod (make_expr DefFunction (list2 DontCare DontCare)) compile_define_function)

    (add_compiler mod (domainP Symbol) compile_var)
    (add_compiler mod (make_expr Dynamic (list1 symT)) compile_dynamic_var)
    (add_compiler mod (quote true) compile_const)
    (add_compiler mod (quote false) compile_const)
    (add_compiler mod (quote nil) compile_const)
    (add_compiler mod (quote undefined) compile_const)
    (add_compiler mod (domainP Int) compile_const)
    (add_compiler mod (domainP String) compile_const)
    (add_compiler mod (domainP BigInt) compile_const)
    (add_compiler mod (domainP Float) compile_const)

    (add_compiler mod (make_expr Apply (list2 DontCare listT)) compile_apply)

    (add_compiler mod (qquote (quote (unquote DontCare))) compile_quote)
    (add_compiler mod (qquote (qquote (unquote (unquote DontCare)))) compile_qquote)

    (add_compiler mod (domainP List) compile_list)
    (add_compiler mod (domainP Tuple) compile_tuple)

    (add_compiler mod (make_expr Block (list1 listT)) compile_block)
    (add_compiler mod (make_expr Seq (list1 listT)) compile_seq)
    (add_compiler mod (make_expr Scoped (list2 (domainP Module) DontCare))
        compile_scoped)

    (add_compiler mod (make_expr If (list2 DontCare DontCare)) compile_if)
	(add_compiler mod (ifelse DontCare DontCare DontCare) compile_ifelse)
    (add_compiler mod (make_expr While (list2 DontCare DontCare)) compile_while)

    (add_compiler mod (make_expr For (list2
        (defvar symT DontCare) DontCare))
        compile_for
        )
    (add_compiler mod (make_expr RevFor (list2
        (defvar symT DontCare) DontCare)) 
        compile_revfor
        )
    (add_compiler mod (make_expr For (list2 
        (defvar symT (make_expr Range (list2 DontCare DontCare)))
        DontCare)) compile_range_for)
    (add_compiler mod (make_expr RevFor (list2 
        (defvar symT (make_expr Range (list2 DontCare DontCare)))
        DontCare)) compile_range_revfor)

    (add_compiler mod (make_expr Break 0) compile_break) 
    (add_compiler mod (make_expr Continue 0) compile_continue)
    (add_compiler mod (make_expr Return (list1 DontCare)) compile_return)
    (add_compiler mod (make_expr Try (list2 DontCare DontCare)) compile_try)
    (add_compiler mod (make_expr Throw (list1 DontCare)) compile_throw)

    (add_compiler mod (make_expr Equal (list2 DontCare DontCare)) compile_eq)
    (add_compiler mod (make_expr NotEqual (list2 DontCare DontCare)) compile_ne)
    (add_compiler mod (make_expr Not (list1 DontCare)) compile_logical)
	(add_compiler mod (make_expr SeqAnd (list2 DontCare DontCare)) compile_logical)
	(add_compiler mod (make_expr SeqOr (list2 DontCare DontCare)) compile_logical)

    (add_compiler mod (make_expr Assign (list2 DontCare DontCare)) compile_assign)
    (add_compiler mod (make_expr Lambda (list2 DontCare DontCare)) compile_lambda)
    (add_compiler mod (make_expr Bind (list2 DontCare DontCare)) compile_bind)


    ; internal expressions
    (add_compiler mod (make_expr FieldRef (list2 DontCare intT)) compile_fieldref)
    (add_compiler mod (make_expr Assign (list2 (make_expr FieldRef (list2 DontCare intT)) DontCare)) compile_fieldref_assign)

    (add_compiler mod (make_expr AllocClsEnv (list1 intT)) compile_alloc_clsenv)
    (add_compiler mod (make_expr Closure (list2 DontCare DontCare)) compile_closure)
    (add_compiler mod (make_expr Ref (list3 DontCare intT symT)) compile_clsref)
    (add_compiler mod (make_expr Assign
        (list2 (make_expr Ref (list3 DontCare intT symT)) DontCare)) compile_clsref_assign)
    (add_compiler mod (make_expr ExprAt (list2 DontCare intT)) compile_exprat)
    (add_compiler mod (quote Decons) compile_decons)
    ))

(export fun add_compiler (mod pat func) (
    (add_builtin_function3 mod Compile (domainP Assembler) (domainP Module) pat func 0)
    ))

    ))
