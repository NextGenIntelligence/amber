;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl1-compile.rlc 2010-11-14 15:33:11 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-symtable")
(import "rowl1-assemble")

(var vartable (make_symtable))

(export fun register_symbol (sym type) (
    (if (== (symtable_find vartable sym 0) type) return)
    (symtable_add vartable sym 0 type)
    ))

(export fun compile_global_function (loc name args body) (

    (register_symbol name GlobalFunctionSym)
    (symtable_push vartable)

    (var asm (make_assembler))
    (= args (setup_args loc args))

    (compile_expression asm body @TRUE)

    (symtable_pop vartable)
    (return (cons args (get_code asm)))
    ))

(fun make_arg (loc idx) (
    (return (variant @Node 3 loc ArgumentSym (box idx)))
    ))

(fun setup_args (loc args) (
    (var ret args)
    (var idx 0)
    (while args (do
        (var arg (car args))
        (var type (node_type arg))
        (if (== type @Int) (do
            (= args (cdr args))
            (incr idx)
            continue
            ))
        (if (== type @Symbol) (do
            (symtable_add vartable arg 0 (make_arg loc idx))
            (setcar args AnySym)
            (= args (cdr args))
            (incr idx)
            continue
            ))
        (error_head stderr loc)
        (output_string stderr "invalid argument pattern\n")
        ; XXX: output arg
        (exit 1)
        ))
    (return ret)
    ))

(extern fun lookup_func)
(fun compile_expression (asm expr ret) (
    (var ty (node_type expr))
    (tswitch ty (
    (@Symbol  . (do
        (var v (symtable_find vartable expr 0))
        (if (! v) (do
            (output_string stderr "ERROR: undefined variable: ")
            (output_string stderr (field_get expr @SymbolName))
            (output_char stderr '\n')
            (exit 1)
            ))
        (if (== v GlobalFunctionSym) (do
            (put_push asm expr)
            (if ret (put_ireturn asm))
            break
            ))
        (if (== (node_type v) @Node) (do
            (var constr (field_get v 2))
            (if (== constr ArgumentSym) (do
                (put_arg asm (unbox (field_get v 3)))
                (if ret (put_ireturn asm))
                break
                ))
            ))
        (not_reachable "compile_expression")
        ))
    (@List    . (not_implemented "compile_expression"))
    (@Tuple   . (not_implemented "compile_expression"))
    (@Array   . (not_implemented "compile_expression"))
    (@Node    . (not_implemented "compile_expression"))
    (@Prefix  . (not_implemented "compile_expression"))
    (@Postfix . (not_implemented "compile_expression"))
    (@Infix   . (do
        (var op (field_get expr @InfixOp))
        (var lhs (field_get expr @InfixLhs))
        (var rhs (field_get expr @InfixRhs))
        (compile_call asm op (cons lhs (cons rhs 0)) ret)
        break
        ))
    (@Call    . (do
        (compile_call asm (field_get expr @CallFunc) (field_get expr @CallArgs) ret)
        break
        ))
    (@Subscr  . (not_implemented "compile_expression"))
    (@Int     . (do
        (put_imm_int asm expr)
        (if ret (put_ireturn asm))
        break
        ))
    (@Float  . (not_implemented "compile_expression"))
    (@String . (do
        (put_push asm expr)
        (if ret (put_ireturn asm))
        break
        ))
    (default . (not_reachable "compile_expression"))
        ))
    ))

(fun compile_call (asm fun args ret) (
    (= args (list_reverse args))
    (var arity 0)
    (while args (do
        (compile_expression asm (car args) @FALSE)
        (= args (cdr args))
        (incr arity)
        ))

    (if (== (node_type fun) @Symbol)
        (do
            (var code (lookup_func fun arity))
            (put_push asm code)
            (put_jcall asm (* 4 arity))
        )
        (do
            (put_imm_int asm arity)
            (compile_expression asm fun @FALSE)
            (put_imm_int32 asm lookup_func)
            (put_dcall asm 8)
            (put_jcall asm (* 4 arity))
        ))

    (if ret (put_ireturn asm))
    ))

(export fun compile_simple_call (arity func ret) (
    (var asm (make_assembler))
    (var n arity)
    (while (> n 0) (do
        (decr n)
        (put_arg asm n)
        ))
    (if @(IS_PRIM func)
        (do
            (put_pcall asm @(PRIM_IDX func) (* 4 arity))
            (if ret (put_ireturn asm))
            (return (get_code asm))
        )
        (do
            (put_imm_int32 asm func)
            (put_dcall asm (* 4 arity))
            (if ret (put_ireturn asm))
            (return (get_code asm))
        ))
    ))

    ))
