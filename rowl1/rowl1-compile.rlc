;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-compile.rlc 2010-12-22 10:02:00 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-symtable")
(import "rowl1-assemble")

(var function (to_sym "%function"))
(var argument (to_sym "%argument"))

(var vartable (make_symtable))

(export fun register_symbol (sym type) (
    (if (== (symtable_find vartable sym 0) type) return)
    (symtable_add vartable sym 0 type)
    ))

(export fun compile_function (name args body) (

    (register_symbol name function)
    (symtable_push vartable)

    (var asm (make_assembler))
    (= args (setup_args args))

    (compile_expression asm body @TRUE)

    (symtable_pop vartable)
    (return (cons args (get_code asm)))
    ))

(fun make_arg (idx) (
    (return (make_expr argument (cons (box idx) 0)))
    ))

(fun setup_args (args) (
    (var ret args)
    (var idx 0)
    (while args (do
        (var arg (car args))
	(var argpat (expr_head arg))
	(if (|| (== argpat Int) (== argpat String)) (do
            (= args (cdr args))
            (incr idx)
            continue
            ))
	(if (== argpat Symbol) (do
            (symtable_add vartable arg 0 (make_arg idx))
            (setcar args DontCare)
            (= args (cdr args))
            (incr idx)
            continue
            ))
	(if (== argpat HeadP) (do
	    (var head (expr_arg_symbol arg 0))
	    (= arg (expr_arg arg 1))
	    (symtable_add vartable arg 0 (make_arg idx))
	    (= args (cdr args))
	    (incr idx)
	    continue
	    ))
	(output_error stderr)
        (output_string stderr "invalid argument pattern `")
	(pretty_print stderr arg)
	(output_string stderr "'\n")
        (exit 1)
        ))
    (return ret)
    ))

(extern fun lookup_func)
(export fun compile_expression (asm expr ret) (
    (var ty (node_type expr))
    (tswitch ty (
    (@SymbolE  . (do
        (var v (symtable_find vartable expr 0))
        (if (! v) (do
            (output_error stderr)
            (output_string stderr "undefined variable `")
            (output_symbol stderr expr)
            (output_string stderr "'\n")
            (exit 1)
            ))
        (if (== v function) (do
            (put_push asm expr)
            (if ret (put_ireturn asm))
            break
            ))
        (if (== (node_type v) @Expr) (do
	    (var head (field_get v @ExprHead))
            (if (== head argument) (do
		(put_arg asm (unbox (expr_arg v 0)))
                (if ret (put_ireturn asm))
                break
                ))
            ))
        (not_reachable "compile_expression")
        ))
    (@Expr . (do
        (compile_call asm (expr_head expr) (expr_args expr) ret)
        break
        ))
    (@IntE . (do
        (put_imm_int asm expr)
        (if ret (put_ireturn asm))
        break
        ))
    (@FloatE  . (not_implemented "compile_expression"))
    (@StringE . (do
        (put_push asm expr)
        (if ret (put_ireturn asm))
        break
        ))
    (default . (not_reachable "compile_expression"))
        ))
    ))

(export fun compile_call (asm fun args ret) (
    (= args (list_reverse args))
    (var arity 0)
    (while args (do
        (compile_expression asm (car args) @FALSE)
        (= args (cdr args))
        (incr arity)
        ))

    (if (== (node_type fun) @SymbolE)
        (do
            (var code (lookup_func fun arity))
            (put_push asm code)
            (put_jcall asm (* 4 arity))
        )
        (do
            (put_imm_int asm arity)
            (compile_expression asm fun @FALSE)
            (put_imm_int32 asm lookup_func)
            (put_dcall asm 8)
            (put_jcall asm (* 4 arity))
        ))

    (if ret (put_ireturn asm))
    ))

(export fun compile_simple_function (asm arity func ret) (
    (var n arity)
    (while (> n 0) (do
        (decr n)
        (put_arg asm n)
        ))
    (compile_simple_call asm arity func ret)
    ))

(export fun compile_simple_call (asm arity func ret) (
    (if @(IS_PRIM func)
        (do
            (put_pcall asm @(PRIM_IDX func) (* 4 arity))
            (if ret (put_ireturn asm))
        )
        (do
            (put_imm_int32 asm func)
            (put_dcall asm (* 4 arity))
            (if ret (put_ireturn asm))
        ))
    ))

    ))
