;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-compile.rlc 2011-12-31 10:32:16 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-symtable")
(import "rowl1-module")
(import "rowl1-assemble")

(var GlobalVariable (to_sym "%GlobalVariable"))
(var LocalVariable  (to_sym "%LocalVariable"))
(var Arity          (to_sym "%Arity"))
(var Argument       (to_sym "%Argument"))
(var ListAt         (to_sym "%ListAt"))
(var ExprAt         (to_sym "%ExprAt"))

; compilers
(extern object current_loc)
(extern fun set_loc)

(fun is_identifier (expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (return @TRUE))
    (if (&& (== hd Qualified) (== (expr_size expr) 2)) (do
        (if (!= (expr_head (expr_arg expr 0)) Symbol) (return @FALSE))
        (return (is_identifier (expr_arg expr 1)))
        ))
    (return @FALSE)
    ))

(export fun callable (expr) (
    (var hd (expr_head expr))
    (if (== hd Function)
        (return @TRUE)
    (if (&& (== hd Bind)
        (&& (== (expr_size expr) 2)
        (&& (callable (expr_arg expr 0))
            (callable (expr_arg expr 1)))))
        (return @TRUE)
        ))
    (return @FALSE)
    ))

(fun delete_vars (tbl expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (symtable_delete tbl expr)
        return
        ))
    (if (is_atom expr) return)
    (var args (expr_args expr))
    (while args (do
        (delete_vars tbl (car args))
        (= args (cdr args))
        ))
    ))

(fun fv_iter_block (tbl exprs) (
    (if (! exprs) return)
    (fv_iter_block tbl (cdr exprs))
    (fv_iter tbl (car exprs) 0)
    ))

(fun fv_iter (tbl expr level) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (if (== level 0) (do
            (if (symtable_find tbl expr) return) ; check for duplication
            (symtable_add tbl expr expr)
            ))
        return
        ))
    (if (is_atom expr) return)
    (if (== level 0) (do
        (if (== hd DefineFunction) (do
            (fv_iter tbl (expr_arg expr 1) 0)
            (delete_vars tbl (expr_arg expr 0))
            return
            ))
        (if (== hd DefineVariable) (do
            (fv_iter tbl (expr_arg expr 1) 0)
            (delete_vars tbl (expr_arg expr 0))
            return
            ))
        (if (== hd Lambda) (do
            (fv_iter tbl (expr_arg expr 1) 0)
            (delete_vars tbl (expr_arg expr 0))
            return
            ))
        (if (== hd Block) (do
            (fv_iter_block tbl (expr_args expr) 0)
            return
            ))
        ))
    (if (== hd Quote) return)
    (if (== hd QuasiQuote) (+= level 1)
    (if (== hd Unquote) (-= level 1)))
    (var args (expr_args expr))
    (while args (do
        (fv_iter tbl (car args) level)
        (= args (cdr args))
        ))
    ))

(fun free_variables (expr) (
    (var tbl (make_symtable 10))
    (fv_iter tbl expr 0)
    (return tbl)
    ))

(fun make_function (args code) (
    (var arity (list_len args))
    (= args (cons (box arity) args))
    (return (variant @FunctionE 2 args code))
    ))

(fun make_bind (fun1 fun2) (
    (return (make_expr Bind (list2 fun1 fun2)))
    ))

;(fun alloc_function () (
;    (return (variant @FunctionE 2 0 0))
;    ))
;(fun clone_function (orig_func) (
;    (var new_func (alloc_function))
;    (var codes (field_get orig_func 1))
;    (var defs (field_get orig_func 2))
;    (var size (field_get orig_func 3))
;    (field_set new_func 1 (array object size))
;    (var new_defs (array object size))
;    (field_set new_func 2 new_defs)
;    (field_set new_func 3 size)
;    (for i 0 size (do
;        (var code (array_get object codes i))
;        (if code
;            (array_set object new_defs i (list1 (list2 (diag_list i DontCare) code)))
;            )
;        ))
;    (return new_func)
;    ))
;
;(fun resize_function (func new_size) (
;    (var old_size (field_get func 3))
;    (if (< old_size new_size) (do
;        (var new_codes (array object new_size))
;        (memcpy new_codes (field_get func 1) (* 4 old_size))
;        (var new_defs (array object new_size))
;        (memcpy new_defs (field_get func 2) (* 4 old_size))
;        (field_set func 1 new_codes)
;        (field_set func 2 new_defs)
;        (field_set func 3 new_size)
;        ))
;    (return func)
;    ))

(extern fun is_complete_pattern)
;(fun append_function_def (sym func arity def code) (
;    (resize_function func (+ arity 1))
;    (var codes (field_get func 1))
;    (var defs (field_get func 2))
;    (var ent 0)
;    (if (! (is_complete_pattern def)) (do
;        (= ent (array_get object defs arity))
;        (if (! ent) (do
;            (var asm (make_assembler))
;            (compile_undefined_error asm sym arity)
;            (= ent (list1 (list2 (diag_list arity DontCare) (get_code asm))))
;            ))
;        ))
;    (= ent (cons (list2 def code) ent))
;    (array_set object defs arity ent)
;    (var bcode (array_get object codes arity))
;    (if (! bcode) (do
;        (= bcode (allocate_bytecode))
;        (array_set object codes arity bcode)
;        ))
;    ))
;
;(fun update_function_def (func arity code) (
;    (var codes (field_get func 1))
;    (var defs (field_get func 2))
;    (array_set object codes arity code)
;    (array_set object defs arity (list1 (list2 (list1 DontCare) code)))
;    ))
;
;(export fun get_code_with_arity (arity func) (
;    (var codes (field_get func 1))
;    (var size (field_get func 3))
;    (if (< arity size) (do
;        (return (array_get object codes arity))
;        ))
;    (not_reachable "get_code_with_arity")
;    ))
;
;(export fun get_defs_with_arity (arity func) (
;    (var defs (field_get func 2))
;    (var size (field_get func 3))
;    (if (< arity size) (do
;        (var c (array_get object defs arity))
;        (if c (return c))
;        ))
;    (output_error stderr current_loc)
;    (output_string stderr "invalid number of arguments\n")
;    (exit 1)
;    ))


(extern fun compile_matching)
(export fun lookup_func (mod sym) (
    (var def (lookup_symbol mod sym))
    (if (! def) (do
        (output_error stderr current_loc)
        (output_string stderr "undefined function `")
        (output_symbol stderr sym)
        (output_string stderr "'\n")
        (exit 1)
        ))
    (= def (expr_arg def 0))
    (if (! (callable def)) (do
        (output_error stderr current_loc)
        (output_string stderr "`")
        (output_symbol stderr sym)
        (output_string stderr "' is defined as non-function\n")
        (exit 1)
        ))
    (return (compile_matching current_loc def))
    ))

(fun undefined_error (sym args) (
    (output_error stderr current_loc)
    (output_string stderr "no definition of `")
    (output_symbol stderr sym)
    (output_string stderr "' matches to argument(s) ")
    (pretty_print stderr args)
    (output_char stderr '\n')
    (exit 1)
    ))

(fun compile_undefined_error (asm sym arity) (
    (put_imm_int asm 0) ; nil
    (while (> arity 0) (do
        (decr arity)
        (put_arg asm arity)
        (put_cons asm)
        ))
    (put_push asm sym)
    (compile_simple_call asm 2 undefined_error)
    ))

(export fun compile (asm mod expr) (
    (var code (lookup_func mod Compile))
    (return (byterun code asm mod expr))
    ))

(fun do_nothing (asm mod expr) (
    (put_nil asm)
    ))

(fun check_arg_size (name size expr) (
    (if (!= (expr_size expr) size) (do
    (output_error stderr current_loc)
    (output_string stderr name)
    (output_string stderr " requires just ")
    (output_int stderr size)
    (output_string stderr " argument")
    (if (> size 1) (output_char stderr 's'))
    (output_char stderr '\n')
    (exit 1)
    ))
    ))

(fun compile_located (asm mod expr) (
    (set_loc (expr_arg expr 0))
    (compile asm mod (expr_arg expr 1))
    ))

(fun compile_qualified (asm curmod expr) (
    (var modsig (expr_arg expr 0))
    (var module (find_module current_loc curmod modsig))
    (compile asm module (expr_arg expr 1))
    ))

(fun compile_function (asm mod args body) (
    (push_scope mod)
    (setup_args (get_vartable mod) args)
    (var cnt_addr (get_address asm))
    (put_allocate asm 0)
    (compile asm mod body)
    (put_ireturn asm)
    (put_operand_byte asm (+ cnt_addr 1) (count_local_variable mod))
    (pop_scope mod)
    ))

(fun compile_define_function (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (var body (expr_arg expr 1))
    (var sym (expr_arg_symbol lhs 0))
    (var args (expr_arg_list lhs 1))
    (var asm_body (make_assembler))
    (var code (allocate_bytecode))
    (var info (append_function mod sym args code))
    (var func (car info))
    (var global_func (cdr info))

    (compile_function asm_body mod args body)
    (set_code code asm_body)

    ;(if global_func
    ;    (do
    ;        (var arity (list_len args))
    ;        ;(var global_code (get_code_with_arity arity global_func))
    ;        (var local_code (get_code_with_arity arity func))
    ;        (put_push asm local_code)
    ;        (put_push asm global_code)
    ;        (compile_simple_call asm 2 bytecode_push)
    ;    )
    ;    (put_nil asm)
    ;    )
    ))

(fun setup_args (tbl args) (
    (var orig args)
    (var idx 0)
    (while args (do
        (setup_arg tbl (make_arg idx) (car args))
        (= args (cdr args))
        (+= idx 1)
        ))
    (return orig)
    ))

(fun setup_arg (tbl obj arg) (
    (var argty (expr_head arg))
    (if (|| (== argty Int) (== argty String))
        return
        )
    (if (== argty Symbol) (do
        (symtable_add tbl arg obj)
        return
        ))
    (if (== argty HeadP) (do
        (var head (expr_arg_symbol arg 1))
        (var v (expr_arg_symbol arg 0))
        (symtable_add tbl v obj)
        return
        ))
    (if (== argty List) (do
        (var idx 0)
        (while arg (do
            (setup_arg tbl (make_list_at obj idx) (car arg))
            (= arg (cdr arg))
            (incr idx)
            ))
        return
        ))
    (var idx 0)
    (var args (expr_args arg))
    (while args (do
        (setup_arg tbl (make_expr_at obj idx) (car args))
        (= args (cdr args))
        (incr idx)
        ))
    ))

(fun var_loc (info) (
    (var hd (expr_head info))
    (if (|| (== hd ListAt) (== hd ExprAt))
        (return (var_loc (expr_arg info 0)))
        )
    (return (expr_arg info 1))
    ))

(fun make_gvar (val) (
    (return (make_expr GlobalVariable (list2 val current_loc)))
    ))

(fun make_lvar (idx) (
    (return (make_expr LocalVariable (list2 (box idx) current_loc)))
    ))

(export fun get_arity () (
    (return (make_expr Arity 0))
    ))

(export fun make_arg (idx) (
    (return (make_expr Argument (list2 (box idx) current_loc)))
    ))

(export fun make_list_at (obj idx) (
    (return (make_expr ListAt (list2 obj (box idx))))
    ))

(export fun make_expr_at (obj idx) (
    (return (make_expr ExprAt (list2 obj (box idx))))
    ))

(export fun add_global_variable (mod sym val) (
    (add_symbol mod sym (make_gvar val))
    ))

(fun compile_define_variable (asm mod expr) (
    (check_arg_size (symbol_name DefineVariable) 2 expr)
    (var sym (expr_arg_symbol expr 0))
    (var val (expr_arg expr 1))
    (var tbl (get_vartable mod))
    (check_redefinition mod sym)

    (if (in_global_scope mod)
        (do
            (var ent (make_gvar 0))
            (compile asm mod val)
            (put_push asm (expr_args ent))
            (put_setcar asm)
            (add_symbol mod sym ent)
        )
        (do
            (var idx (count_local_variable mod))
            (compile asm mod val)
            (put_store_lvar asm idx)
            (add_symbol mod sym (make_lvar idx))
        ))
    ))

(fun check_redefinition (mod sym) (
    (var info (lookup_symbol_local mod sym))
    (if info (do
        (output_error stderr current_loc)
        (output_string stderr "variable `")
        (pretty_print stderr sym)
        (output_string stderr "' is already defined at ")
        (output_loc stderr (var_loc info))
        (output_char stderr '\n')
        (exit 1)
        ))
    ))

(export fun compile_operand (asm opd) (
    (var ty (expr_head opd))
    (if (== ty GlobalVariable) (do
        (put_push asm (expr_args opd))
        (put_car asm)
        return
        ))
    (if (== ty LocalVariable) (do
        (put_load_lvar asm (expr_arg_int opd 0))
        return
        ))
    (if (== ty Arity) (do
        (put_arity asm)
        return
        ))
    (if (== ty Argument) (do
        (put_arg asm (expr_arg_int opd 0))
        return
        ))
    (if (== ty ListAt) (do
        (compile_operand asm (expr_arg opd 0))
        (put_imm_int asm (expr_arg_int opd 1))
        (put_list_at asm)
        return
        ))
    (if (== ty ExprAt) (do
        (compile_operand asm (expr_arg opd 0))
        (put_field_get2 asm)
        (put_imm_int asm (expr_arg_int opd 1))
        (put_list_at asm)
        return
        ))
    (not_reachable "compile_operand")
    ))

(fun lookup_var (mod sym) (
    (var v (lookup_symbol mod sym))
    (if (! v) (do
        (output_error stderr current_loc)
        (output_string stderr "undefined variable `")
        (pretty_print stderr sym)
        (output_string stderr "'\n")
        (exit 1)
        ))
    (return v)
    ))

(fun compile_var (asm mod expr) (
    (compile_operand asm (lookup_var mod expr))
    ))

(fun compile_apply (asm mod expr) (
    (var func (expr_arg expr 0))
    (var args (expr_arg expr 1))
    
    ; eval and push arguments from right to left
    (= args (list_reverse args))
    (var arity 0)
    (while args (do
        (compile asm mod (car args))
        (= args (cdr args))
        (incr arity)
        ))

    (compile asm mod func)
    (put_push asm current_loc)
    (compile_simple_call asm 2 compile_matching)
    (put_jcall asm (* 4 arity))
    ))

(fun compile_quote (asm mod expr) (
    (put_push asm (expr_arg expr 0))
    ))

(export fun compile_qquote_main (asm mod expr level) (
    (var hd (expr_head expr))
    (if (== hd Symbol)
        (return (put_push asm expr)))
    (if (== hd Int)
        (return (put_imm_int asm expr)))
    (if (== hd String)
        (return (put_push asm expr)))
    (if (== hd List) (do
        (if (! expr)
            (put_push asm 0)
            (do
                (compile_qquote_main asm mod (cdr expr) level)
                (compile_qquote_main asm mod (car expr) level)
                (put_cons asm)
            )
        )
        return
        ))
    (if (== hd Unquote) (do
        (if (== level 0) (do
            (compile asm mod (expr_arg expr 0))
            return
            ))
        (-= level 1)
        )
    (if (== hd QuasiQuote)
        (+= level 1)
        ))
    (compile_qquote_main asm mod (expr_args expr) level)
    (put_push asm (expr_head expr))
    (compile_simple_call asm 2 make_expr_user)
    ))

(fun compile_qquote (asm mod expr) (
    (compile_qquote_main asm mod (expr_arg expr 0) 0)
    ))

(fun compile_int (asm mod val) (
    (put_imm_int asm val)
    ))

(fun compile_string (asm mod val) (
    (put_push asm val)
    ))

(fun compile_block_body (asm mod exprs) (
    (if (! exprs) (do
        (put_nil asm)
        return
        ))
    (while exprs (do
        (compile asm mod (car exprs))
        (= exprs (cdr exprs))
        (if exprs (put_drop asm)) ; drop values except the last one
        ))
    ))

(fun compile_block (asm mod expr) (
    (var exprs (expr_args expr))
    (if (in_global_scope mod)
        (do
            (push_scope mod)
            (var cnt_addr (get_address asm))
            (put_allocate asm 0)
            (compile_block_body asm mod exprs)
            (put_operand_byte asm (+ cnt_addr 1) (count_local_variable mod))
            (pop_scope mod)
        )
        (do
            (push_scope mod)
            (compile_block_body asm mod exprs)
            (pop_scope mod)
        )
        )
    ))

(fun put_if_true (asm lbl) (
    (put_push asm true)
    (put_if_eq asm lbl)
    ))

(fun put_if_false (asm lbl) (
    (put_push asm false)
    (put_if_eq asm lbl)
    ))

(fun compile_if (asm mod expr) (
    (compile_ifelse_main asm mod (expr_arg expr 0) (expr_arg expr 1) Nil)
    ))

(fun compile_ifelse (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (compile_ifelse_main asm mod (expr_arg lhs 0) (expr_arg lhs 1) (expr_arg expr 1))
    ))

(fun compile_ifelse_main (asm mod cnd ifthen ifelse) (
    (var cnd_hd (expr_head cnd))
    (var size (expr_size cnd))
    (if (&& (== cnd_hd Not) (== size 1))
        (return (compile_ifelse_main asm mod (expr_arg cnd 0) ifelse ifthen))
        )
    (if (&& (== cnd_hd LogicalAnd) (== size 2))
        (return (compile_ifelse_and asm mod cnd ifthen ifelse))
        )
    (if (&& (== cnd_hd LogicalOr) (== size 2))
        (return (compile_ifelse_or asm mod cnd ifthen ifelse))
        )
    (if (== ifthen Nil)
        (if (== ifelse Nil)
            (do
                (compile asm mod cnd)
            )
            (do
                (var exit_lbl (fresh_label asm))
                (compile asm mod cnd)
                (put_if_true asm exit_lbl)
                (compile asm mod ifelse)
                (set_label asm exit_lbl)
            ))
        (if (== ifelse Nil)
            (do
                (var exit_lbl (fresh_label asm))
                (compile asm mod cnd)
                (put_if_false asm exit_lbl)
                (compile asm mod ifthen)
                (set_label asm exit_lbl)
            )
            (do
                (var else_lbl (fresh_label asm))
                (var exit_lbl (fresh_label asm))
                (compile asm mod cnd)
                (put_if_false asm else_lbl)
                (compile asm mod ifthen)
                (put_goto asm exit_lbl)
                (set_label asm else_lbl)
                (compile asm mod ifelse)
                (set_label asm exit_lbl)
            ))
        )
    ))

(fun compile_ifelse_and (asm mod cnd ifthen ifelse) (
    (var ifelse_lbl (fresh_label asm))
    (var exit_lbl   (fresh_label asm))
    (exit_if_false asm mod (expr_arg cnd 0) ifelse_lbl)
    (exit_if_false asm mod (expr_arg cnd 1) ifelse_lbl)
    (compile asm mod ifthen)
    (put_goto asm exit_lbl)
    (set_label asm ifelse_lbl)
    (compile asm mod ifelse)
    (set_label asm exit_lbl)
    ))

(fun compile_ifelse_or (asm mod cnd ifthen ifelse) (
    (var ifthen_lbl (fresh_label asm))
    (var exit_lbl   (fresh_label asm))
    (exit_if_true asm mod (expr_arg cnd 0) ifthen_lbl)
    (exit_if_true asm mod (expr_arg cnd 1) ifthen_lbl)
    (compile asm mod ifelse)
    (put_goto asm exit_lbl)
    (set_label asm ifthen_lbl)
    (compile asm mod ifthen)
    (set_label asm exit_lbl)
    ))

(fun exit_if_true (asm mod expr exit) (
    (var hd (expr_head expr))
    (var size (expr_size expr))
    (if (&& (== hd Not) (== size 1))
        (return (exit_if_false asm mod (expr_arg expr 0) exit))
        )
    (if (&& (== hd LogicalOr) (== size 2)) (do
        (exit_if_true asm mod (expr_arg expr 0) exit)
        (exit_if_true asm mod (expr_arg expr 1) exit)
        return
        ))
    (if (&& (== hd LogicalAnd) (== size 2)) (do
        (var fail (fresh_label asm))
        (exit_if_false asm mod (expr_arg expr 0) fail)
        (exit_if_true asm mod (expr_arg expr 1) exit)
        (set_label asm fail)
        return
        ))
    (compile asm mod expr)
    (put_if_true asm exit)
    ))

(fun exit_if_false (asm mod expr exit) (
    (var hd (expr_head expr))
    (var size (expr_size expr))
    (if (&& (== hd Not) (== size 1))
        (return (exit_if_true asm mod (expr_arg expr 0) exit))
        )
    (if (&& (== hd LogicalOr) (== size 2)) (do
        (var fail (fresh_label asm))
        (exit_if_true asm mod (expr_arg expr 0) fail)
        (exit_if_false asm mod (expr_arg expr 1) exit)
        (set_label asm fail)
        return
        ))
    (if (&& (== hd LogicalAnd) (== size 2)) (do
        (exit_if_false asm mod (expr_arg expr 0) exit)
        (exit_if_false asm mod (expr_arg expr 1) exit)
        return
        ))
    (compile asm mod expr)
    (put_if_false asm exit)
    ))

; translate
;
;   While{cnd, body}
;
; to
;
;   if (not c) goto exit
; head:
;   body
;   if (c) goto head
; exit:
;
(fun compile_while (asm mod expr) (
    (var cnd (expr_arg expr 0))
    (var body (expr_arg expr 1))
    (var exit_lbl (fresh_label asm))
    (var head_lbl (fresh_label asm))
    (compile asm mod cnd)
    (put_if_false asm exit_lbl)
    (set_label asm head_lbl)
    (compile asm mod body)
    (put_drop asm)
    (compile asm mod cnd)
    (put_if_true asm head_lbl)
    (set_label asm exit_lbl)
    (put_nil asm)
    ))

(fun compile_assign (asm mod expr) (
    (var lhs (expr_arg_symbol expr 0))
    (var rhs (expr_arg expr 1))
    (compile asm mod rhs)
    (var v (lookup_symbol mod lhs))
    (if (! v) (do
        (output_error stderr current_loc)
        (output_string stderr "undefined variable `")
        (pretty_print stderr lhs)
        (output_string stderr "'\n")
        (exit 1)
        ))
    (var vty (expr_head v))
    (if (== vty GlobalVariable) (do
        (put_push asm (expr_args v))
        (put_setcar asm)
        return
        )
    (if (== vty LocalVariable) (do
        (put_store_lvar asm (expr_arg_int v 0))
        return
        )
    (if (== vty Argument) (do
        (put_store_arg asm (expr_arg_int v 0))
        return
        ))))
    (output_error stderr current_loc)
    (pretty_print stderr lhs)
    (output_string stderr " is not lvalue\n")
    (exit 1)
    ))

(fun compile_return (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (put_ireturn asm)
    ))

(fun compile_eq (asm mod expr) (
    (var else_lbl (fresh_label asm))
    (var exit_lbl (fresh_label asm))
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (put_if_eq asm else_lbl)
    (put_push asm false)
    (put_goto asm exit_lbl)
    (set_label asm else_lbl)
    (put_push asm true)
    (set_label asm exit_lbl)
    ))

(fun compile_ne (asm mod expr) (
    (var else_lbl (fresh_label asm))
    (var exit_lbl (fresh_label asm))
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (put_if_ne asm else_lbl)
    (put_push asm false)
    (put_goto asm exit_lbl)
    (set_label asm else_lbl)
    (put_push asm true)
    (set_label asm exit_lbl)
    ))

(fun compile_lambda_main (asm mod args body) (
    ; XXX: do closure conversion
    (var asm_func (make_assembler))
    (compile_function asm_func mod args body)
    (put_push asm (make_function args (get_code asm_func)))
    ))

(fun compile_lambda (asm mod expr) (
    (compile_lambda_main asm mod (expr_args (expr_arg expr 0)) (expr_arg expr 1))
    ))

(fun compile_lambda_1arg (asm mod expr) (
    (compile_lambda_main asm mod (list1 (expr_arg expr 0)) (expr_arg expr 1))
    ))

(fun compile_bind (asm mod expr) (
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (compile_simple_call asm 2 make_bind)
    ))

(export fun compile_simple_function (asm arity func) (
    (var n arity)
    (while (> n 0) (do
        (decr n)
        (put_arg asm n)
        ))
    (compile_simple_call asm arity func)
    (put_ireturn asm)
    ))

(export fun compile_simple_call (asm arity func) (
    (if @(IS_PRIM func)
        (do
            (put_pcall asm @(PRIM_IDX func) (* 4 arity))
        )
        (do
            (put_imm_int32 asm func)
            (put_dcall asm (* 4 arity))
        ))
    ))

(fun append_function (mod sym args code) (
    (var info (lookup_symbol_local mod sym))
    (if info
        (do
            (var func (expr_arg info 0))
            (if (callable func)
                (= func (make_bind (make_function args code) func))
                (= func (make_function args code))
                )
            (expr_arg_set info 0 func)
        )
        (if (in_global_scope mod)
            (add_symbol mod sym (make_gvar (make_function args code)))
            (add_symbol mod sym (make_lvar (make_function args code)))
            )
        )
    ))

(export fun add_builtin_function0 (mod sym func) (
    (var asm (make_assembler))
    (compile_simple_function asm 1 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym 0 code)
    ))

(export fun add_builtin_function1 (mod sym pat func) (
    (var asm (make_assembler))
    (compile_simple_function asm 1 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (list1 pat) code)
    ))

(export fun add_builtin_function2 (mod sym pat1 pat2 func) (
    (var asm (make_assembler))
    (compile_simple_function asm 2 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (list2 pat1 pat2) code)
    ))

(export fun add_builtin_function3 (mod sym pat1 pat2 pat3 func) (
    (var asm (make_assembler))
    (compile_simple_function asm 3 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (list3 pat1 pat2 pat3) code)
    ))

(export fun add_builtin_function4 (mod sym pat1 pat2 pat3 pat4 func) (
    (var asm (make_assembler))
    (compile_simple_function asm 4 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (list4 pat1 pat2 pat3 pat4) code)
    ))

(export fun setup_builtin_compilers (mod) (
    (var symT (headP Symbol))
    (var listT (headP List))
    (var tupleT (headP Tuple))
    (var intT (headP Int))
    (var stringT (headP String))
    (var blockT (headP Block))
    (var locT (make_expr Loc (list3 stringT intT intT)))
    (add_compiler mod (make_expr Located (list2 locT DontCare)) compile_located)

    (add_compiler mod (make_expr DefInfixL (list3 symT stringT intT)) do_nothing)
    (add_compiler mod (make_expr DefInfixR (list3 symT stringT intT)) do_nothing)
    (add_compiler mod (make_expr DefPrefix (list3 symT stringT intT)) do_nothing)
    (add_compiler mod (make_expr DefPostfix (list3 symT stringT intT)) do_nothing)
    (add_compiler mod (make_expr DefConstr (list2 symT stringT)) do_nothing)
    (add_compiler mod (make_expr DefCommand (list2 symT stringT)) do_nothing)

    (add_compiler mod (make_expr Qualified (list2 symT DontCare)) compile_qualified)

    (add_compiler mod (make_expr DefineFunction (list2
        (make_expr Apply (list2 symT listT)) DontCare)) compile_define_function)
    (add_compiler mod (make_expr DefineVariable (list2 symT DontCare)) compile_define_variable)
    (add_compiler mod (headP Symbol) compile_var)
    (add_compiler mod (make_expr Apply (list2 DontCare listT)) compile_apply)

    (add_compiler mod (quote (quote DontCare)) compile_quote)
    (add_compiler mod (quote (qquote DontCare)) compile_qquote)

    (add_compiler mod (headP Int) compile_int)
    (add_compiler mod (headP String) compile_string)
    (add_compiler mod (headP Block) compile_block)
    (add_compiler mod (make_expr If (list2 DontCare DontCare)) compile_if)
    (add_compiler mod (make_expr Else (list2
        (make_expr If (list2 DontCare DontCare)) DontCare)) compile_ifelse)
    (add_compiler mod (make_expr While (list2 DontCare DontCare)) compile_while)
    (add_compiler mod (make_expr (to_sym "Return") (list1 DontCare)) compile_return)
    (add_compiler mod (make_expr (to_sym "Equal") (list2 DontCare DontCare)) compile_eq)
    (add_compiler mod (make_expr (to_sym "NotEqual") (list2 DontCare DontCare)) compile_ne)
    (add_compiler mod (make_expr (to_sym "Assign") (list2 symT DontCare)) compile_assign)
    (add_compiler mod (make_expr (to_sym "Lambda") (list2 DontCare DontCare)) compile_lambda_1arg)
    (add_compiler mod (make_expr (to_sym "Lambda") (list2 tupleT DontCare)) compile_lambda)
    (add_compiler mod (make_expr (to_sym "Bind") (list2 DontCare DontCare)) compile_bind)

    ))

(export fun add_compiler (mod pat func) (
    (add_builtin_function3 mod Compile (headP Assembler) (headP Module) pat func)
    ))

    ))
