;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-compile.rlc 2012-02-04 03:27:26 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-symtable")
(import "rowl1-module")
(import "rowl1-assemble")

(var BuildClosure  (to_sym "%BuildClosure"))
(var FieldRef      (to_sym "%FieldRef"))
(var uninitialized (to_sym "%uninitialized"))
(var noguard       (to_sym "%noguard"))

; compilers
(extern object current_loc)
(extern fun set_loc)

(fun topscope_only (mod name) (
    (if (! (in_top_scope mod)) (do
        (output_error stderr current_loc)
        (output_char stderr '`')
        (output_string stderr name)
        (output_string stderr "' must be called in top scope\n")
        (exit 1)
        ))
    ))

(fun must_be_module_variable (sym val) (
    (if (!= (expr_head val) ModuleVariable) (do
        (output_error stderr current_loc)
        (output_char stderr '`')
        (output_symbol stderr sym)
        (output_string stderr "' must be a module variable\n")
        (exit 1)
        ))
    ))

(fun is_effective_variable (v) (
    (if (! v) (return @FALSE))
    (if (&& (== (expr_head v) ModuleVariable) (== (expr_arg v 1) false))
        (return @FALSE)
        )
    (return @TRUE)
    ))

(fun is_identifier (expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (return @TRUE))
    (if (&& (== hd Qualified) (== (expr_size expr) 2)) (do
        (if (!= (expr_head (expr_arg expr 0)) Symbol) (return @FALSE))
        (return (is_identifier (expr_arg expr 1)))
        ))
    (return @FALSE)
    ))

(export fun callable (expr) (
    (var hd (expr_head expr))
    (if (|| (== hd Function) (== hd BoundFunction))
        (return @TRUE)
        )
    (return @FALSE)
    ))

(fun iter_args (f expr arg level) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (if (== level 0) (return (f expr arg)))
        (return arg)
        ))
    (if (is_atom expr) (return arg))
    (if (== hd Quote) (return arg))
    (if (== hd QuasiQuote) (+= level 1))
    (if (== hd Unquote) (-= level 1))
    (var args (expr_args expr))
    (while args (do
        (= arg (iter_args f (car args) arg level))
        (= args (cdr args))
        ))
    (return arg)
    ))

(fun delete_var (sym fv) (
    (return (list_delete sym fv))
    ))

(fun delete_args (expr fv) (
    (return (iter_args delete_var expr fv 0))
    ))

(fun add_var (sym tbl) (
    (symtable_add tbl sym sym)
    (return tbl)
    ))

(fun collect_args (tbl expr) (
    (iter_args add_var expr tbl 0)
    ))

(fun fv_iter_block (mod exprs fv) (
    (if (! exprs) (return fv))
    (= fv (fv_iter_block mod (cdr exprs) fv))
    (return (fv_iter mod (car exprs) 0 fv))
    ))

(fun fv_iter (mod expr level fv) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (if (== level 0) (do
            (= fv (list_delete expr fv))
            ;(var info (lookup_symbol mod expr))
            ;(if (|| (! info) (== (expr_head info) ModuleVariable))
            ;    return
            ;    )
            (return (cons expr fv))
            ))
        (return fv)
        ))
    (if (is_atom expr) (return fv))
    (if (== level 0) (do
        (if (== hd DefineVariable) (do
            (= fv (fv_iter mod (expr_arg expr 1) 0 fv))
            (return (list_delete (expr_arg_symbol expr 0) fv))
            ))
        (if (== hd Lambda) (do
            (= fv (fv_iter mod (expr_arg expr 1) 0 fv))
            (return (delete_args (expr_arg expr 0) fv))
            ))
        (if (== hd Block) 
            (return (fv_iter_block mod (expr_args expr) 0 fv))
            )
        ))
    (if (== hd Quote) (return fv))
    (if (== hd QuasiQuote) (+= level 1)
    (if (== hd Unquote) (-= level 1)))
    (var args (expr_args expr))
    (while args (do
        (= fv (fv_iter mod (car args) level fv))
        (= args (cdr args))
        ))
    (return fv)
    ))

(fun free_variables (mod expr) (
    (return (fv_iter mod expr 0 0))
    ))

(fun make_function (args code guard) (
    (var arity (list_len args))
    (= args (cons (box arity) args))
    (return (variant @FunctionE 4 0 args code guard))
    ))

(fun make_bound (fun1 fun2) (
    (if (! (callable fun1)) (do
        (output_error stderr current_loc)
        (pretty_print stderr fun1)
        (output_string stderr " is not a function\n")
        (exit 1)
        ))
    (if (! (callable fun2)) (do
        (output_error stderr current_loc)
        (pretty_print stderr fun2)
        (output_string stderr " is not a function\n")
        (exit 1)
        ))
    (return (variant @BoundFunctionE 3 0 fun1 fun2))
    ))

; closure conversion
(fun close (mod env expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (var subst (symtable_find env expr)) 
        (if subst
            (return subst)
            (return expr)
            )
        ))
    (if (is_atom expr) (return expr))
    (if (== hd Located) (do
        (expr_arg_set expr 1 (close mod env (expr_arg expr 1)))
        (return expr)
        ))
    (if (== hd Apply) (do
        (var lhs (expr_arg expr 0))
        (var args (expr_arg_list expr 1))
        (return expr)
        ))
    (if (== hd Block) (do
        ; XXX: not correct
        (var exprs (expr_args expr))
        (while exprs (do
            (setcar exprs (close mod env (car exprs)))
            (= exprs (cdr exprs))
            ))
        (return expr)
        ))
    (if (== hd DefineVariable) (do
        (expr_arg_set expr 1 (close mod env (expr_arg expr 1)))
        (return expr)
        ))
    (if (== hd Return) (do
        (expr_arg_set expr 0 (close mod env (expr_arg expr 0)))
        (return expr)
        ))
    (if (== hd Lambda) 
        (return (close_function mod env expr))
        )
    (return expr)
    ))

(fun add_arg (args new_arg) (
    (var hd (expr_head args))
    (if (== hd Tuple)
        (return (make_expr Tuple (list_append (expr_args args) (list1 new_arg))))
    (if (== hd Domain)
        (return (make_expr Domain
            (list2 (add_arg (expr_arg args 0) new_arg) (expr_arg args 1))))
        (return (make_expr Tuple (list2 args new_arg)))
        ))
    ))

(fun close_function (mod env lam) (
    ; XXX: implementation is not completed
    (var fv (free_variables mod lam))
    (if (! fv) (return lam))
    (var tbl (make_closure_env (to_sym "%clos") fv))
    (expr_arg_set lam 1 (close mod tbl (expr_arg lam 1)))
    (expr_arg_set lam 0 (add_arg (expr_arg lam 0) (to_sym "%clos")))
    (return (make_expr BuildClosure (list2 lam fv)))
    ))

(fun make_closure_env (clos fv) (
    (var tbl (make_symtable 10))
    (var i 1) ; reseve 1 for lambda object
    (while fv (do
        (symtable_add tbl (car fv) (make_expr FieldRef (list2 clos (box i))))
        (+= i 1)
        (= fv (cdr fv))
        ))
    (return tbl)
    ))

(extern fun compile_matching)
(export fun lookup_func (mod sym) (
    (var def (lookup_symbol mod sym))
    (if (! def) (do
        (output_error stderr current_loc)
        (output_string stderr "undefined function `")
        (output_symbol stderr sym)
        (output_string stderr "'\n")
        (exit 1)
        ))
    (must_be_module_variable sym def)
    (check_if_initialized sym def)
    (var box (expr_arg def 0))
    (var func (field_get box 0))
    (if (! (callable func)) (do
        (output_error stderr current_loc)
        (output_string stderr "`")
        (output_symbol stderr sym)
        (output_string stderr "' is defined as non-function\n")
        (exit 1)
        ))
    (var loc (field_get box 1))
    (return (compile_matching loc sym func))
    ))

(fun undefined_error (sym args) (
    (output_error stderr current_loc)
    (output_string stderr "no definition of `")
    (output_symbol stderr sym)
    (output_string stderr "' matches to argument(s) ")
    (pretty_print stderr args)
    (output_char stderr '\n')
    (exit 1)
    ))

(fun compile_undefined_error (asm sym arity) (
    (put_imm_int asm 0) ; nil
    (while (> arity 0) (do
        (decr arity)
        (put_arg asm arity)
        (put_cons asm)
        ))
    (put_push asm sym)
    (compile_simple_call asm 2 undefined_error)
    ))

(export fun compile (asm mod expr) (
    (var code (lookup_func mod Compile))
    (byterun code asm mod expr)
    ))

(fun do_nothing (asm mod expr) (
    (put_nil asm)
    ))

(fun check_arg_size (name size expr) (
    (if (!= (expr_size expr) size) (do
    (output_error stderr current_loc)
    (output_string stderr name)
    (output_string stderr " requires just ")
    (output_int stderr size)
    (output_string stderr " argument")
    (if (> size 1) (output_char stderr 's'))
    (output_char stderr '\n')
    (exit 1)
    ))
    ))

(fun compile_error (asm mod expr) (
    (output_error stderr current_loc)
    (output_string stderr "Unknown expression: ")
    (pretty_print stderr expr)
    (output_string stderr " (fullform: ")
    (pretty_print_full stderr expr)
    (output_string stderr ")\n")
    (exit 1)
    ))

(fun compile_located (asm mod expr) (
    (set_loc (expr_arg expr 0))
    (compile asm mod (expr_arg expr 1))
    ))

(fun compile_qualified (asm curmod expr) (
    (var modsig (expr_arg expr 0))
    (var module (find_module current_loc curmod modsig @FALSE))
    (compile asm module (expr_arg expr 1))
    ))

(fun compile_make_expr (asm mod expr) (
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (compile_simple_call asm 2 make_expr_user)
    ))

(var max_lvar_idx 0)
(fun compile_function (asm_body asm_guard mod args body guard) (
    (push_varscope mod)
    (setup_args (get_vartable mod) args)

    (if (!= guard noguard)
        (compile asm_guard mod guard)
        )

    (var cnt_addr (get_address asm_body))
    (put_allocate asm_body 0)

    ; closure conversion
    (var vtbl (make_symtable 10))
    (collect_args vtbl args)
    (= body (close mod vtbl body))

    (var save_max_lvar_idx max_lvar_idx)
    (= max_lvar_idx 0)
    (reset_variable_count mod)

    (compile asm_body mod body)
    (put_ireturn asm_body)
    (put_operand_byte asm_body (+ cnt_addr 1) (+ max_lvar_idx 1))

    (pop_varscope mod)

    (= max_lvar_idx save_max_lvar_idx)
    ))

(fun setup_args (tbl args) (
    (var orig args)
    (var idx 0)
    (while args (do
        (setup_arg tbl (make_arg idx) (car args) 0)
        (= args (cdr args))
        (+= idx 1)
        ))
    (return orig)
    ))

(fun setup_arg (tbl obj arg level) (
    (var argty (expr_head arg))
    (if (|| (== argty Int) (== argty String))
        return
        )
    (if (== argty Symbol) (do
        (if (== level 0) (symtable_add tbl arg obj))
        return
        ))
    (if (== argty Domain) (do
        (if (== level 0) (do
            (var head (expr_arg_symbol arg 1))
            (var v (expr_arg_symbol arg 0))
            (symtable_add tbl v obj)
            return
            ))
        ))
    (if (== argty List) (do
        (var idx 0)
        (while arg (do
            (setup_arg tbl (make_list_at obj idx) (car arg) level)
            (= arg (cdr arg))
            (incr idx)
            ))
        return
        ))
    (if (== argty Quote)
        return
        )
    (if (== argty Unquote) 
        (return (setup_arg tbl obj (expr_arg arg 0) (- level 1)))
        )
    (if (== argty QuasiQuote)
        (return (setup_arg tbl obj (expr_arg arg 0) (+ level 1)))
        )
    (var idx 0)
    (var args (expr_args arg))
    (while args (do
        (setup_arg tbl (make_expr_at obj idx) (car args) level)
        (= args (cdr args))
        (incr idx)
        ))
    ))

(fun var_loc (info) (
    (var hd (expr_head info))
    (if (|| (== hd ListAt) (== hd ExprAt))
        (return (var_loc (expr_arg info 0)))
        )
    (if (== hd ModuleVariable) (do
        (var box (expr_arg info 0))
        (if (! box)
            (return no_loc)
            (return (field_get box 1))
            )
        ))
    (return (expr_arg info 1))
    ))

(fun make_lvar (idx) (
    (return (make_expr LocalVariable (list2 (box idx) current_loc)))
    ))

(export fun get_arity () (
    (return (make_expr Arity 0))
    ))

(export fun make_arg (idx) (
    (return (make_expr Argument (list2 (box idx) current_loc)))
    ))

(export fun make_list_at (obj idx) (
    (return (make_expr ListAt (list2 obj (box idx))))
    ))

(export fun make_expr_at (obj idx) (
    (return (make_expr ExprAt (list2 obj (box idx))))
    ))

(fun compile_define_variable (asm mod expr) (
    (check_arg_size (symbol_name DefineVariable) 2 expr)
    (var sym (expr_arg_symbol expr 0))
    (var val (expr_arg expr 1))
    (var tbl (get_vartable mod))
    (check_redefinition mod sym)

    (if (in_top_scope mod)
        (do
            (var ent (add_module_variable mod sym 0))
            (compile asm mod val)
            (put_push asm (expr_arg ent 0))
            (put_setcar asm)
        )
        (do
            (var idx (get_variable_count mod))
            (if (> idx max_lvar_idx) (= max_lvar_idx idx))
            (incr_variable_count mod)

            (compile asm mod val)
            (put_store_lvar asm idx)
            (add_symbol mod sym (make_lvar idx))
        ))
    ))

(fun check_redefinition (mod sym) (
    (var info (lookup_symbol_local mod sym))
    (if (! info) return)
    (if (== (expr_head info) ModuleVariable) (do
        (var declared_in_this_scope (expr_arg info 1))
        (if (== declared_in_this_scope false) return)
        ))
    (output_error stderr current_loc)
    (output_string stderr "variable `")
    (pretty_print stderr sym)
    (output_string stderr "' is already defined at ")
    (output_loc stderr (var_loc info))
    (output_char stderr '\n')
    (exit 1)
    ))

(fun check_if_initialized (sym info) (
    (var box (expr_arg info 0))
    (if (! box) (do
        (var loc (expr_arg info 1))
        (output_error stderr loc)
        (output_char stderr '`')
        (output_symbol stderr sym)
        (output_string stderr "' is not initialized\n")
        (exit 1)
        ))
    ))

(fun uninitialized_error (sym) (
    (output_error stderr current_loc)
    (output_string stderr "variable `")
    (pretty_print stderr sym)
    (output_string stderr "' is not initialized\n")
    (exit 1)
    ))

(export fun compile_operand (asm opd sym) (
    (var ty (expr_head opd))
    (if (== ty ModuleVariable) (do
        (var lbl (fresh_label asm))
        (put_push asm (expr_args opd)) ; variable-display
        (put_car asm)
        (put_car asm)

        ; check if initialized
        (put_dup asm)
        (put_push asm uninitialized)
        (put_if_ne asm lbl)
        (put_push asm sym)

        (compile_simple_call asm 1 uninitialized_error)
        (set_label asm lbl)
        return
        ))
    (if (== ty LocalVariable) (do
        (put_load_lvar asm (expr_arg_int opd 0))
        return
        ))
    (if (== ty Arity) (do
        (put_arity asm)
        (put_imm_i1 asm)
        (put_shl asm)
        (put_iadd1 asm)
        return
        ))
    (if (== ty Argument) (do
        (put_arg asm (expr_arg_int opd 0))
        return
        ))
    (if (== ty ListAt) (do
        (compile_operand asm (expr_arg opd 0) sym)
        (put_imm_int asm (expr_arg_int opd 1))
        (put_list_at asm)
        return
        ))
    (if (== ty ExprAt) (do
        (compile_operand asm (expr_arg opd 0) sym)
        (put_field_get2 asm)
        (put_imm_int asm (expr_arg_int opd 1))
        (put_list_at asm)
        return
        ))
    (not_reachable "compile_operand")
    ))

(fun compile_var (asm mod sym) (
    (var v (lookup_symbol mod sym))
    (if (! v)
        ; `sym' is a module variable
        (= v (add_module_variable_display mod sym (struct 2 uninitialized no_loc)))
    (if (== (expr_head v) ModuleVariable) (do
        (var u (lookup_symbol_current_module mod sym))
        (if (! u)
            (= v (add_module_variable_display mod sym (expr_arg v 0)))
            )
        )))
    (compile_operand asm v sym)
    ))

(fun compile_apply (asm mod expr) (
    (var func (expr_arg expr 0))
    (var args (expr_arg expr 1))
    
    ; eval and push arguments from right to left
    (= args (list_reverse args))
    (var arity 0)
    (while args (do
        (compile asm mod (car args))
        (= args (cdr args))
        (incr arity)
        ))

    (compile asm mod func)
    (put_push asm func)
    (put_push asm current_loc)
    (compile_simple_call asm 3 compile_matching)
    (put_jcall asm (* 4 arity))
    ))

(fun compile_quote (asm mod expr) (
    (put_push asm (expr_arg expr 0))
    ))

(export fun compile_qquote_main (asm mod expr level) (
    (var hd (expr_head expr))
    (if (== hd Symbol)
        (return (put_push asm expr)))
    (if (== hd Int)
        (return (put_imm_int asm expr)))
    (if (== hd String)
        (return (put_push asm expr)))
    (if (== hd List) (do
        (if (! expr)
            (put_push asm 0)
            (do
                (compile_qquote_main asm mod (cdr expr) level)
                (compile_qquote_main asm mod (car expr) level)
                (put_cons asm)
            )
        )
        return
        ))
    (if (== hd Unquote)
        (if (== level 0)
            (return (compile asm mod (expr_arg expr 0)))
            (return (compile_qquote_main asm mod (expr_arg expr 0) (- level 1))) 
            )
    (if (== hd QuasiQuote)
        (+= level 1)
        ))
    (compile_qquote_main asm mod (expr_args expr) level)
    (put_push asm (expr_head expr))
    (compile_simple_call asm 2 make_expr_user)
    ))

(fun compile_qquote (asm mod expr) (
    (compile_qquote_main asm mod (expr_arg expr 0) 0)
    ))

(fun compile_int (asm mod val) (
    (put_imm_int asm val)
    ))

(fun compile_string (asm mod val) (
    (put_push asm val)
    ))

(fun compile_list (asm mod expr) (
    (if (== expr 0)
        (put_nil asm)
        (do
            (compile asm mod (cdr expr))
            (compile asm mod (car expr))
            (put_cons asm)
        ))
    ))

(fun compile_tuple (asm mod expr) (
    (compile_list asm mod (expr_args expr))
    (put_push asm Tuple)
    (compile_simple_call asm 2 make_expr_user)
    ))

(fun compile_block_body (asm mod exprs) (
    (if (! exprs) (do
        (put_nil asm)
        return
        ))
    (while exprs (do
        (compile asm mod (car exprs))
        (= exprs (cdr exprs))
        (if exprs (put_drop asm)) ; drop values except the last one
        ))
    ))

(fun compile_block (asm mod expr) (
    (var exprs (expr_args expr))
    (push_varscope mod)
    (if (in_top_scope mod)
        (do
            (var save_max_lvar_idx max_lvar_idx)
            (= max_lvar_idx 0)
            (reset_variable_count mod)

            (var cnt_addr (get_address asm))
            (put_allocate asm 0)
            (compile_block_body asm mod exprs)
            (put_operand_byte asm (+ cnt_addr 1) (+ max_lvar_idx 2))

            (= max_lvar_idx save_max_lvar_idx)
        )
        (do
            (compile_block_body asm mod exprs)
        ))
    (pop_varscope mod)
    ))

(fun compile_seq (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (put_drop asm)
    (compile asm mod (expr_arg expr 1))
    ))

(fun put_if_true (asm lbl) (
    (put_push asm true)
    (put_if_eq asm lbl)
    ))

(fun put_if_false (asm lbl) (
    (put_push asm false)
    (put_if_eq asm lbl)
    ))

(fun compile_if (asm mod expr) (
    (compile_ifelse_main asm mod (expr_arg expr 0) (expr_arg expr 1) Nil)
    ))

(fun compile_ifelse (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (compile_ifelse_main asm mod (expr_arg lhs 0) (expr_arg lhs 1) (expr_arg expr 1))
    ))

(fun compile_ifelse_main (asm mod cnd ifthen ifelse) (
    (var cnd_hd (expr_head cnd))
    (var size (expr_size cnd))
    (if (&& (== cnd_hd Not) (== size 1))
        (return (compile_ifelse_main asm mod (expr_arg cnd 0) ifelse ifthen))
        )
    (if (&& (== cnd_hd LogicalAnd) (== size 2))
        (return (compile_ifelse_and asm mod cnd ifthen ifelse))
        )
    (if (&& (== cnd_hd LogicalOr) (== size 2))
        (return (compile_ifelse_or asm mod cnd ifthen ifelse))
        )
    (if (== ifthen Nil)
        (if (== ifelse Nil)
            (do
                (compile asm mod cnd)
                (put_nil asm mod)
            )
            (do
                (var exit_lbl (fresh_label asm))
                (put_nil asm mod)
                (compile asm mod cnd)
                (put_if_true asm exit_lbl)
                (put_drop asm mod)
                (compile asm mod ifelse)
                (set_label asm exit_lbl)
            ))
        (if (== ifelse Nil)
            (do
                (var exit_lbl (fresh_label asm))
                (put_nil asm mod)
                (compile asm mod cnd)
                (put_if_false asm exit_lbl)
                (put_drop asm mod)
                (compile asm mod ifthen)
                (set_label asm exit_lbl)
            )
            (do
                (var else_lbl (fresh_label asm))
                (var exit_lbl (fresh_label asm))
                (compile asm mod cnd)
                (put_if_false asm else_lbl)
                (compile asm mod ifthen)
                (put_goto asm exit_lbl)
                (set_label asm else_lbl)
                (compile asm mod ifelse)
                (set_label asm exit_lbl)
            ))
        )
    ))

(fun compile_ifelse_and (asm mod cnd ifthen ifelse) (
    (var ifelse_lbl (fresh_label asm))
    (var exit_lbl   (fresh_label asm))
    (exit_if_false asm mod (expr_arg cnd 0) ifelse_lbl)
    (exit_if_false asm mod (expr_arg cnd 1) ifelse_lbl)
    (compile asm mod ifthen)
    (put_goto asm exit_lbl)
    (set_label asm ifelse_lbl)
    (compile asm mod ifelse)
    (set_label asm exit_lbl)
    ))

(fun compile_ifelse_or (asm mod cnd ifthen ifelse) (
    (var ifthen_lbl (fresh_label asm))
    (var exit_lbl   (fresh_label asm))
    (exit_if_true asm mod (expr_arg cnd 0) ifthen_lbl)
    (exit_if_true asm mod (expr_arg cnd 1) ifthen_lbl)
    (compile asm mod ifelse)
    (put_goto asm exit_lbl)
    (set_label asm ifthen_lbl)
    (compile asm mod ifthen)
    (set_label asm exit_lbl)
    ))

(fun exit_if_true (asm mod expr exit) (
    (var hd (expr_head expr))
    (var size (expr_size expr))
    (if (&& (== hd Not) (== size 1))
        (return (exit_if_false asm mod (expr_arg expr 0) exit))
        )
    (if (&& (== hd LogicalOr) (== size 2)) (do
        (exit_if_true asm mod (expr_arg expr 0) exit)
        (exit_if_true asm mod (expr_arg expr 1) exit)
        return
        ))
    (if (&& (== hd LogicalAnd) (== size 2)) (do
        (var fail (fresh_label asm))
        (exit_if_false asm mod (expr_arg expr 0) fail)
        (exit_if_true asm mod (expr_arg expr 1) exit)
        (set_label asm fail)
        return
        ))
    (compile asm mod expr)
    (put_if_true asm exit)
    ))

(fun exit_if_false (asm mod expr exit) (
    (var hd (expr_head expr))
    (var size (expr_size expr))
    (if (&& (== hd Not) (== size 1))
        (return (exit_if_true asm mod (expr_arg expr 0) exit))
        )
    (if (&& (== hd LogicalOr) (== size 2)) (do
        (var fail (fresh_label asm))
        (exit_if_true asm mod (expr_arg expr 0) fail)
        (exit_if_false asm mod (expr_arg expr 1) exit)
        (set_label asm fail)
        return
        ))
    (if (&& (== hd LogicalAnd) (== size 2)) (do
        (exit_if_false asm mod (expr_arg expr 0) exit)
        (exit_if_false asm mod (expr_arg expr 1) exit)
        return
        ))
    (compile asm mod expr)
    (put_if_false asm exit)
    ))

; translate
;
;   While{cnd, body}
;
; to
;
;   if (not c) goto exit
; head:
;   body
;   if (c) goto head
; exit:
;
(fun compile_while (asm mod expr) (
    (var cnd (expr_arg expr 0))
    (var body (expr_arg expr 1))
    (var exit_lbl (fresh_label asm))
    (var head_lbl (fresh_label asm))
    (compile asm mod cnd)
    (put_if_false asm exit_lbl)
    (set_label asm head_lbl)
    (compile asm mod body)
    (put_drop asm)
    (compile asm mod cnd)
    (put_if_true asm head_lbl)
    (set_label asm exit_lbl)
    (put_nil asm)
    ))

(fun compile_assign (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (var rhs (expr_arg expr 1))
    (compile asm mod rhs)
    (var v (lookup_symbol mod lhs))
    (if (! v) (do
        (output_error stderr current_loc)
        (output_string stderr "undefined variable `")
        (pretty_print stderr lhs)
        (output_string stderr "'\n")
        (exit 1)
        ))
    (var vty (expr_head v))
    (if (== vty ModuleVariable) (do
        (put_push asm (expr_args v))
        (put_car asm)
        (put_setcar asm)
        return
        )
    (if (== vty LocalVariable) (do
        (put_store_lvar asm (expr_arg_int v 0))
        return
        )
    (if (== vty Argument) (do
        (put_store_arg asm (expr_arg_int v 0))
        return
        ))))
    (output_error stderr current_loc)
    (pretty_print stderr lhs)
    (output_string stderr " is not lvalue\n")
    (exit 1)
    ))

(fun compile_return (asm mod expr) (
    (compile asm mod (expr_arg expr 0))
    (put_ireturn asm)
    ))

(fun compile_eq (asm mod expr) (
    (var else_lbl (fresh_label asm))
    (var exit_lbl (fresh_label asm))
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (put_if_eq asm else_lbl)
    (put_push asm false)
    (put_goto asm exit_lbl)
    (set_label asm else_lbl)
    (put_push asm true)
    (set_label asm exit_lbl)
    ))

(fun compile_ne (asm mod expr) (
    (var else_lbl (fresh_label asm))
    (var exit_lbl (fresh_label asm))
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (put_if_ne asm else_lbl)
    (put_push asm false)
    (put_goto asm exit_lbl)
    (set_label asm else_lbl)
    (put_push asm true)
    (set_label asm exit_lbl)
    ))

(fun compile_logical (asm mod expr) (
	(compile asm mod (make_ifelse expr true false))
	))

(fun compile_lambda_main (asm mod args body guard) (
    (var asm_body (make_assembler))
    (if (!= guard noguard)
        (do
            (var asm_guard (make_assembler))
            (compile_function asm_body asm_guard mod args body guard)
            (put_push asm (make_function args (get_code asm_body) (get_code asm_guard)))
        )
        (do
            (compile_function asm_body 0 mod args body noguard)
            (put_push asm (make_function args (get_code asm_body) 0))
        ))
    ))

(fun compile_lambda (asm mod expr) (
    (var lhs (expr_arg expr 0))
    (var body (expr_arg expr 1))
    (var hd (expr_head lhs))
    (if (== hd Tuple)
        (compile_lambda_main asm mod (expr_args lhs) body noguard)
    (if (!= hd Where)
        (compile_lambda_main asm mod (list1 lhs) body noguard)
        (do
            (var guard (expr_arg lhs 1))
            (= lhs (expr_arg lhs 0))
            (= hd (expr_head lhs))
            (if (== hd Tuple)
                (compile_lambda_main asm mod (expr_args lhs) body guard)
                (compile_lambda_main asm mod (list1 lhs) body guard)
                )
        )))
    ))

(fun compile_bind (asm mod expr) (
    (compile asm mod (expr_arg expr 1))
    (compile asm mod (expr_arg expr 0))
    (compile_simple_call asm 2 make_bound)
    ))

(fun compile_build_closure (asm mod expr) (
    (var lam (expr_arg expr 0))
    (var fv (list_reverse (expr_arg expr 1)))
    ; allocate free variables
    (var clos_len 1)
    (while fv (do
        (compile asm mod (car fv))
        (+= clos_len 1)
        (= fv (cdr fv))
        ))
    (compile asm mod lam)
    (put_variant asm @ClosureE clos_len clos_len)
    ))

(fun compile_fieldref (asm mod expr) (
    (var obj (expr_arg expr 0))
    (var idx (expr_arg_int expr 1))
    (compile asm mod obj)
    (put_fieldget asm idx)
    ))

(export fun compile_simple_function (asm arity func) (
    (var n arity)
    (while (> n 0) (do
        (decr n)
        (put_arg asm n)
        ))
    (compile_simple_call asm arity func)
    (put_ireturn asm)
    ))

(export fun compile_simple_call (asm arity func) (
    (if @(IS_PRIM func)
        (do
            (put_pcall asm @(PRIM_IDX func) (* 4 arity))
        )
        (do
            (put_imm_int32 asm func)
            (put_dcall asm (* 4 arity))
        ))
    ))

(fun append_function (mod sym newfunc) (
    (topscope_only mod "append_function")
    (var info (lookup_symbol_local mod sym))
    (if info
        (do
            (must_be_module_variable sym info)
            (check_if_initialized sym info)
            (var box (expr_arg info 0))
            (var func (field_get box 0))
            (if (callable func)
                (= newfunc (make_bound newfunc func))
                )
            (field_set box 0 newfunc)
            return
        ))
    (= info (lookup_symbol mod sym))
    (if info
        (do
            (must_be_module_variable sym info)
            (check_if_initialized sym info)
            (var box (expr_arg info 0))
            (var func (field_get box 0))
            (if (callable func)
                (= newfunc (make_bound newfunc func))
                )
        ))
    (add_module_variable mod sym newfunc)
    ))

; AppendFunction{sym, fun} is equivalent to:
; sym: fun          (when `sym' is not defined)
; sym: fun | sym    (when `sym' is defined in outer scope)
; sym = fun | sym   (when `sym' is defined in local scope)
(fun compile_define_function (asm mod expr) (
    (var sym (expr_arg_symbol expr 0))
    (var fun (expr_arg expr 1))
    (var info (lookup_symbol_local mod sym))
    (if (is_effective_variable info)
        (return (compile asm mod
            (make_expr Assign (list2 sym (make_expr Bind (list2 fun sym))))))
        )
    (= info (lookup_symbol mod sym))
    (if (is_effective_variable info)
        (return (compile asm mod
            (make_expr DefineVariable (list2 sym (make_expr Bind (list2 fun sym))))))
        (return (compile asm mod
            (make_expr DefineVariable (list2 sym fun))))
        )
    ))

(export fun add_builtin_function0 (mod sym func) (
    (var asm (make_assembler))
    (compile_simple_function asm 1 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (make_function 0 code 0))
    ))

(export fun add_builtin_function1 (mod sym pat func) (
    (var asm (make_assembler))
    (compile_simple_function asm 1 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (make_function (list1 pat) code 0))
    ))

(export fun add_builtin_function2 (mod sym pat1 pat2 func) (
    (var asm (make_assembler))
    (compile_simple_function asm 2 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (make_function (list2 pat1 pat2) code 0))
    ))

(export fun add_builtin_function3 (mod sym pat1 pat2 pat3 func) (
    (var asm (make_assembler))
    (compile_simple_function asm 3 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (make_function (list3 pat1 pat2 pat3) code 0))
    ))

(export fun add_builtin_function4 (mod sym pat1 pat2 pat3 pat4 func) (
    (var asm (make_assembler))
    (compile_simple_function asm 4 func @TRUE)
    (var code (get_code asm))
    (append_function mod sym (make_function (list4 pat1 pat2 pat3 pat4) code 0))
    ))

(export fun setup_builtin_compilers (mod) (
    (var symT (domainP Symbol))
    (var listT (domainP List))
    (var tupleT (domainP Tuple))
    (var intT (domainP Int))
    (var stringT (domainP String))
    (var blockT (domainP Block))
    (var locT (make_expr Loc (list3 stringT intT intT)))

    (add_compiler mod DontCare compile_error)

    (add_compiler mod (make_expr Located (list2 locT DontCare)) compile_located)

    (add_compiler mod (make_expr DefInfixL (list3 symT stringT intT)) do_nothing)
    (add_compiler mod (make_expr DefInfixR (list3 symT stringT intT)) do_nothing)
    (add_compiler mod (make_expr DefPrefix (list3 symT stringT intT)) do_nothing)
    (add_compiler mod (make_expr DefPostfix (list3 symT stringT intT)) do_nothing)
    (add_compiler mod (make_expr DefConstr (list2 symT stringT)) do_nothing)
    (add_compiler mod (make_expr DefCommand (list2 symT stringT)) do_nothing)
    (add_compiler mod (make_expr Import (list1 DontCare)) do_nothing)

    (add_compiler mod (make_expr Qualified (list2 symT DontCare)) compile_qualified)

    (add_compiler mod (make_expr (to_sym "MakeExpression") (list2 DontCare DontCare)) compile_make_expr)
    (add_compiler mod (make_expr DefineVariable (list2 symT DontCare)) compile_define_variable)
    (add_compiler mod (make_expr DefineFunction (list2 symT DontCare)) compile_define_function)
    (add_compiler mod (domainP Symbol) compile_var)
    (add_compiler mod (make_expr Apply (list2 DontCare listT)) compile_apply)

    (add_compiler mod (qquote (quote (unquote DontCare))) compile_quote)
    (add_compiler mod (qquote (qquote (unquote (unquote DontCare)))) compile_qquote)

    (add_compiler mod (domainP Int) compile_int)
    (add_compiler mod (domainP String) compile_string)
    (add_compiler mod (domainP List) compile_list)
    (add_compiler mod (domainP Tuple) compile_tuple)

    (add_compiler mod (domainP Block) compile_block)
    (add_compiler mod (make_seq DontCare DontCare) compile_seq)
    (add_compiler mod (make_expr If (list2 DontCare DontCare)) compile_if)
	(add_compiler mod (make_ifelse DontCare DontCare DontCare) compile_ifelse)
    (add_compiler mod (make_expr While (list2 DontCare DontCare)) compile_while)
    (add_compiler mod (make_expr Return (list1 DontCare)) compile_return)
    (add_compiler mod (make_expr (to_sym "Equal") (list2 DontCare DontCare)) compile_eq)
    (add_compiler mod (make_expr (to_sym "NotEqual") (list2 DontCare DontCare)) compile_ne)
	(add_compiler mod (make_expr LogicalAnd (list2 DontCare DontCare)) compile_logical)
	(add_compiler mod (make_expr LogicalOr (list2 DontCare DontCare)) compile_logical)

    (add_compiler mod (make_expr Assign (list2 DontCare DontCare)) compile_assign)
    (add_compiler mod (make_expr Lambda (list2 DontCare DontCare)) compile_lambda)
    (add_compiler mod (make_expr Bind (list2 DontCare DontCare)) compile_bind)

    ; internal expressions
    (add_compiler mod (make_expr BuildClosure (list2 DontCare DontCare)) compile_build_closure)
    (add_compiler mod (make_expr FieldRef (list2 DontCare DontCare)) compile_fieldref)
    ))

(export fun add_compiler (mod pat func) (
    (add_builtin_function3 mod Compile (domainP Assembler) (domainP Module) pat func)
    ))

    ))
