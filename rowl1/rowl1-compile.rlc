;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-compile.rlc 2011-01-02 07:12:40 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-symtable")
(import "rowl1-assemble")

(var function (to_sym "%function"))
(var argument (to_sym "%argument"))
(var list_get   (to_sym "%list_get"))
(var expr_get   (to_sym "%expr_get"))

(var vartable (make_symtable))

(export fun register_symbol (sym type) (
    (if (== (symtable_find vartable sym 0) type) return)
    (symtable_add vartable sym 0 type)
    ))

(export fun compile_function (name args body) (

    (register_symbol name function)
    (symtable_push vartable)

    (var asm (make_assembler))
    (= args (setup_args args))

    (compile_expression asm body @TRUE)

    (symtable_pop vartable)
    (return (cons args (get_code asm)))
    ))

(export fun make_arg (idx) (
    (return (make_expr argument (list1 (box idx))))
    ))

(export fun make_list_get (obj idx) (
    (return (make_expr list_get (list2 obj (box idx))))
    ))

(export fun make_expr_get (obj idx) (
    (return (make_expr expr_get (list2 obj (box idx))))
    ))

(fun setup_args (args) (
    (var orig args)
    (var idx 0)
    (while args (do
        (setup_arg (make_arg idx) (car args))
        (= args (cdr args))
        (+= idx 1)
        ))
    (return orig)
    ))

(fun setup_arg (obj arg) (
    (var argty (expr_head arg))
    (if (|| (== argty Int) (|| (== argty String) (== argty SymbolP)))
        return
        )
    (if (== argty Symbol) (do
        (symtable_add vartable arg 0 obj)
        return
        ))
    (if (== argty HeadP) (do
        (var head (expr_arg_symbol arg 1))
        (var v (expr_arg_symbol arg 0))
        (symtable_add vartable v 0 obj)
        return
        ))
    (if (== argty List) (do
        (var idx 0)
        (while arg (do
            (setup_arg (make_list_get obj idx) (car arg))
            (= arg (cdr arg))
            (incr idx)
            ))
        return
        ))
    (var idx 0)
    (var args (expr_args arg))
    (while args (do
        (setup_arg (make_expr_get obj idx) (car args))
        (= args (cdr args))
        (incr idx)
        ))
    ))

(extern fun lookup_func)
(export fun compile_expression (asm expr ret) (
    (var hd (expr_head expr))
    (if (== hd Symbol) (do
        (var v (symtable_find vartable expr 0))
        (if (! v) (do
            (output_error stderr)
            (output_string stderr "undefined variable `")
            (output_symbol stderr expr)
            (output_string stderr "'\n")
            (exit 1)
            ))
        (if (== v function)
            (put_push asm expr)
            (compile_operand asm v)
            )
        )
    (if (== hd Int)
        (put_imm_int asm expr)
    (if (== hd String)
        (put_push asm expr)
    (if (== hd List) (do
        (if (== expr 0)
            (put_imm_i0 asm)
            (do
                (compile_expression asm (cdr expr) @FALSE)
                (compile_expression asm (car expr) @FALSE)
                (put_cons asm)
            ))
        )
    (if (== hd Apply)
        (compile_call asm (expr_arg expr 0) (expr_arg expr 1) ret)
    (if (== hd Quote)
        (compile_quote asm (expr_arg expr 0))
        (do
            (output_error stderr)
            (output_string stderr "meaning of the expression '")
            (pretty_print stderr expr)
            (output_string stderr "' is not defined\n")
            (exit 1)
        )))))))
    (if ret (put_ireturn asm))
    ))

(export fun compile_operand (asm desc) (
    (var ty (expr_head desc))
    (if (== ty argument) (do
        (put_arg asm (expr_arg_int desc 0))
        return
        ))
    (if (== ty list_get) (do
        (compile_operand asm (expr_arg desc 0))
        (put_list_get asm (expr_arg_int desc 1))
        return
        ))
    (if (== ty expr_get) (do
        (compile_operand asm (expr_arg desc 0))
        (put_field_get2 asm)
        (put_list_get asm (expr_arg_int desc 1))
        return
        ))
    (not_reachable "compile_operand")
    ))

(export fun compile_call (asm fun args ret) (
    (= args (list_reverse args))
    (var arity 0)
    (while args (do
        (compile_expression asm (car args) @FALSE)
        (= args (cdr args))
        (incr arity)
        ))

    (if (== (node_type fun) @SymbolE)
        (do
            (var code (lookup_func fun arity))
            (put_push asm code)
            (put_jcall asm (* 4 arity))
        )
        (do
            (put_imm_int asm arity)
            (compile_expression asm fun @FALSE)
            (put_imm_int32 asm lookup_func)
            (put_dcall asm 8)
            (put_jcall asm (* 4 arity))
        ))

    (if ret (put_ireturn asm))
    ))

(export fun compile_simple_function (asm arity func ret) (
    (var n arity)
    (while (> n 0) (do
        (decr n)
        (put_arg asm n)
        ))
    (compile_simple_call asm arity func ret)
    ))

(export fun compile_simple_call (asm arity func ret) (
    (if @(IS_PRIM func)
        (do
            (put_pcall asm @(PRIM_IDX func) (* 4 arity))
            (if ret (put_ireturn asm))
        )
        (do
            (put_imm_int32 asm func)
            (put_dcall asm (* 4 arity))
            (if ret (put_ireturn asm))
        ))
    ))

(fun compile_quote (asm expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol)
        (put_push asm expr)
    (if (== hd Int)
        (put_imm_int asm expr)
    (if (== hd String)
        (put_push asm expr)
    (if (== hd List)
        (if (! expr)
            (put_imm_int asm 0)
            (do
                (compile_quote asm (cdr expr))
                (compile_quote asm (car expr))
                (put_cons asm)
            )
        )
    (if (== hd Unquote)
        (compile_expression asm (expr_arg expr 0) @FALSE)
        (do
            (compile_quote asm (expr_args expr))
            (put_push asm (expr_head expr))
            (compile_simple_call asm 2 make_expr @FALSE)
        )
        )))))
    ))

    ))
