;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-compile.rlc 2011-01-19 02:13:37 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-symtable")
(import "rowl1-assemble")

(var argument (to_sym "argument"))
(var variable (to_sym "variable"))
(var list_at (to_sym "list_at"))
(var expr_at (to_sym "expr_at"))

(export fun compile_env_init () (
    (return (tuple 1 (make_symtable) 0))
    ))

(export fun compile_expression (asm env expr ret) (
    (var count (count_local_variables expr))
    (put_allocate asm count)
    (compile asm env expr ret)
    ))

(export fun compile_function (name args body) (
    (var env (compile_env_init))
    (var asm (make_assembler))
    (= args (setup_args env args))
    (compile_expression asm env body @TRUE)
    (return (cons args (get_code asm)))
    ))

(fun add_local_variable (env name) (
    (var table (tuple_at env 0))
    (var idx   (tuple_at env 1))
    (symtable_add table name 0 (make_expr variable (list1 (box idx))))
    (tuple_set env 1 (+ idx 1))
    (return idx)
    ))

(export fun make_arg (idx) (
    (return (make_expr argument (list1 (box idx))))
    ))

(export fun make_list_at (obj idx) (
    (return (make_expr list_at (list2 obj (box idx))))
    ))

(export fun make_expr_at (obj idx) (
    (return (make_expr expr_at (list2 obj (box idx))))
    ))

(fun setup_args (env args) (
    (var orig args)
    (var idx 0)
    (while args (do
        (setup_arg env (make_arg idx) (car args))
        (= args (cdr args))
        (+= idx 1)
        ))
    (return orig)
    ))

(fun setup_arg (env obj arg) (
    (var argty (expr_head arg))
    (if (|| (== argty Int) (|| (== argty String) (== argty SymbolP)))
        return
        )
    (if (== argty Symbol) (do
        (symtable_add (tuple_at env 0) arg 0 obj)
        return
        ))
    (if (== argty HeadP) (do
        (var head (expr_arg_symbol arg 1))
        (var v (expr_arg_symbol arg 0))
        (symtable_add (tuple_at env 0) v 0 obj)
        return
        ))
    (if (== argty List) (do
        (var idx 0)
        (while arg (do
            (setup_arg env (make_list_at obj idx) (car arg))
            (= arg (cdr arg))
            (incr idx)
            ))
        return
        ))
    (var idx 0)
    (var args (expr_args arg))
    (while args (do
        (setup_arg env (make_expr_at obj idx) (car args))
        (= args (cdr args))
        (incr idx)
        ))
    ))

(fun count_local_variables (expr) (
    (if (|| (is_atom_type expr) (! expr)) (return 0))
    (var hd (expr_head expr))
    (var args (expr_args expr))
    (var count 0)
    (if (!= hd Quote)
        (do
            (while args (do
                (+= count (count_local_variables (car args)))
                (= args (cdr args))
                ))
            (if (== hd DefineVariable) (return (+ 1 count)))
            (return count)
        )
        (do
            (while args (do
                (+= count (count_local_variables_quote (car args)))
                (= args (cdr args))
                ))
            (return count)
        ))
    ))

(fun count_local_variables_quote (expr) (
    (if (|| (is_atom_type expr) (! expr)) (return 0))
    (var hd (expr_head expr))
    (var args (expr_args expr))
    (var count 0)
    (if (== hd Unquote)
        (do
            (while args (do
                (+= count (count_local_variables (car args)))
                (= args (cdr args))
                ))
            (return count)
        )
        (do
            (while args (do
                (+= count (count_local_variables_quote (car args)))
                (= args (cdr args))
                ))
            (return count)
        ))
    ))

(extern fun set_loc)
(extern fun lookup_func)
(extern fun find_global_variable)
(export fun compile (asm env expr ret) (
    (var hd (expr_head expr))

    ; XXX: This inefficient code is a temporal implementation.
    (if (== hd Located) (do
        (set_loc (expr_arg expr 0))
        (compile asm env (expr_arg expr 1) @FALSE)
        )
    (if (== hd Symbol) (do
        (var v (symtable_find (tuple_at env 0) expr 0))
        (if v
            (compile_operand asm v)
            (do
                (put_push asm (find_global_variable expr))
                (put_car asm)
            ))
        )
    (if (== hd Int)
        (put_imm_int asm expr)
    (if (== hd String)
        (put_push asm expr)
    (if (== hd List) (do
        (if (== expr 0)
            (put_nil asm)
            (do
                (compile asm env (cdr expr) @FALSE)
                (compile asm env (car expr) @FALSE)
                (put_cons asm)
            ))
        )
    (if (== hd Apply)
        (compile_call asm env (expr_arg expr 0) (expr_arg expr 1) ret)
    (if (== hd Quote)
        (compile_quote asm env (expr_arg expr 0))
    (if (== hd Block)
        (compile_block asm env (expr_args expr))
    (if (== hd If)
        (compile_ifelse asm env (expr_arg expr 0) (expr_arg expr 1) Nil)
    (if (&& (== hd IfElse) (== (expr_head (expr_arg expr 0)) If)) (do
        (var lhs (expr_arg expr 0))
        (var cnd (expr_arg lhs 0))
        (var ifthen (expr_arg lhs 1))
        (var ifelse (expr_arg expr 1))
        (compile_ifelse asm env cnd ifthen ifelse)
        )
    (if (== hd While)
        (compile_while asm env (expr_arg expr 0) (expr_arg expr 1))
    (if (== hd DefineVariable)
        (compile_defvar asm env (expr_arg_symbol expr 0) (expr_arg expr 1))
    (if (== hd Assign)
        (compile_assign asm env Nil (expr_arg expr 0) (expr_arg expr 1))
    (if (== hd PlusAssign)
        (compile_assign asm env Plus (expr_arg expr 0) (expr_arg expr 1))
    (if (== hd MinusAssign)
        (compile_assign asm env Minus (expr_arg expr 0) (expr_arg expr 1))
    (if (== hd TimesAssign)
        (compile_assign asm env Times (expr_arg expr 0) (expr_arg expr 1))
    (if (== hd DivideAssign)
        (compile_assign asm env Divide (expr_arg expr 0) (expr_arg expr 1))
    (if (== hd ModAssign)
        (compile_assign asm env Mod (expr_arg expr 0) (expr_arg expr 1))
        (do
            (output_error stderr)
            (output_string stderr "unknown expression '")
            (pretty_print stderr expr)
            (output_string stderr "'\n")
            (exit 1)
        )))))))))))))))))))
    (if ret (put_ireturn asm))
    ))

(export fun compile_operand (asm desc) (
    (var ty (expr_head desc))
    (if (== ty argument) (do
        (put_arg asm (expr_arg_int desc 0))
        return
        ))
    (if (== ty variable) (do
        (put_loadl asm (expr_arg_int desc 0))
        return
        ))
    (if (== ty list_at) (do
        (compile_operand asm (expr_arg desc 0))
        (put_list_at asm (expr_arg_int desc 1))
        return
        ))
    (if (== ty expr_at) (do
        (compile_operand asm (expr_arg desc 0))
        (put_field_get2 asm)
        (put_list_at asm (expr_arg_int desc 1))
        return
        ))
    (not_reachable "compile_operand")
    ))

(fun compile_call (asm env fun args) (
    (= args (list_reverse args))
    (var arity 0)
    (while args (do
        (compile asm env (car args) @FALSE)
        (= args (cdr args))
        (incr arity)
        ))

    (if (== (node_type fun) @SymbolE)
        (do
            (var code (lookup_func fun arity))
            (put_push asm code)
            (put_jcall asm (* 4 arity))
        )
        (do
            (put_imm_int asm arity)
            (compile asm env fun @FALSE)
            (put_imm_int32 asm lookup_func)
            (put_dcall asm 8)
            (put_jcall asm (* 4 arity))
        ))
    ))

(export fun compile_simple_function (asm arity func) (
    (var n arity)
    (while (> n 0) (do
        (decr n)
        (put_arg asm n)
        ))
    (compile_simple_call asm arity func)
    (put_ireturn asm)
    ))

(export fun compile_simple_call (asm arity func) (
    (if @(IS_PRIM func)
        (do
            (put_pcall asm @(PRIM_IDX func) (* 4 arity))
        )
        (do
            (put_imm_int32 asm func)
            (put_dcall asm (* 4 arity))
        ))
    ))

(fun compile_quote (asm env expr) (
    (var hd (expr_head expr))
    (if (== hd Symbol)
        (put_push asm expr)
    (if (== hd Int)
        (put_imm_int asm expr)
    (if (== hd String)
        (put_push asm expr)
    (if (== hd List)
        (if (! expr)
            (put_imm_int asm 0)
            (do
                (compile_quote asm env (cdr expr))
                (compile_quote asm env (car expr))
                (put_cons asm)
            )
        )
    (if (== hd Unquote)
        (compile asm env (expr_arg expr 0) @FALSE)
        (do
            (compile_quote asm env (expr_args expr))
            (put_push asm (expr_head expr))
            (compile_simple_call asm 2 make_expr)
        )
        )))))
    ))

(fun compile_block (asm env exprs) (
    (symtable_push (tuple_at env 0))
    (while exprs (do
        (compile asm env (car exprs) @FALSE)
        (= exprs (cdr exprs))
        (if exprs (put_drop asm)) ; drop values except the last one
        ))
    (symtable_pop (tuple_at env 0))
    ))

(fun compile_ifelse (asm env cnd ifthen ifelse) (
    (var cnd_hd (expr_head cnd))
    (if (== cnd_hd LogicalOr) (return (compile_ifelse_or asm env cnd ifthen ifelse)))
    (if (== cnd_hd LogicalAnd) (return (compile_ifelse_and asm env cnd ifthen ifelse)))
    (if (== cnd_hd Not) (return (compile_ifelse asm env (expr_arg cnd 0) ifelse ifthen)))
    (var else_lbl (fresh_label asm))
    (var exit_lbl (fresh_label asm))
    (compile asm env cnd @FALSE)
    (put_if_false asm else_lbl)
    (compile asm env ifthen @FALSE)
    (put_goto asm exit_lbl)
    (set_label asm else_lbl)
    (compile asm env ifelse @FALSE)
    (set_label asm exit_lbl)
    ))

(fun compile_ifelse_or (asm env cnd ifthen ifelse) (
    (var ifthen_lbl (fresh_label asm))
    (var exit_lbl   (fresh_label asm))
    (exit_if_true asm env (expr_arg cnd 0) ifthen_lbl)
    (exit_if_true asm env (expr_arg cnd 1) ifthen_lbl)
    (compile asm env ifelse @FALSE)
    (put_goto asm exit_lbl)
    (set_label asm ifthen_lbl)
    (compile asm env ifthen @FALSE)
    (set_label asm exit_lbl)
    ))

(fun compile_ifelse_and (asm env cnd ifthen ifelse) (
    (var ifelse_lbl (fresh_label asm))
    (var exit_lbl   (fresh_label asm))
    (exit_if_false asm env (expr_arg cnd 0) ifelse_lbl)
    (exit_if_false asm env (expr_arg cnd 1) ifelse_lbl)
    (compile asm env ifthen @FALSE)
    (put_goto asm exit_lbl)
    (set_label asm ifelse_lbl)
    (compile asm env ifelse @FALSE)
    (set_label asm exit_lbl)
    ))

(fun exit_if_true (asm env expr exit) (
    (var hd (expr_head expr))
    (if (== hd Not) (return (exit_if_false asm env (expr_arg expr 0) exit)))
    (if (== hd LogicalOr) (do
        (exit_if_true asm env (expr_arg expr 0) exit)
        (exit_if_true asm env (expr_arg expr 1) exit)
        return
        ))
    (if (== hd LogicalAnd) (do
        (var fail (fresh_label))
        (exit_if_false asm env (expr_arg expr 0) fail)
        (exit_if_true asm env (expr_arg env 1) exit)
        (set_label asm fail)
        return
        ))
    (compile asm env expr @FALSE)
    (put_if_true asm exit)
    ))

(fun exit_if_false (asm env expr exit) (
    (var hd (expr_head expr))
    (if (== hd Not) (return (exit_if_true asm env (expr_arg expr 0) exit)))
    (if (== hd LogicalOr) (do
        (var fail (fresh_label))
        (exit_if_true asm env (expr_arg expr 0) fail)
        (exit_if_false asm env (expr_arg expr 1) exit)
        (set_label asm fail)
        return
        ))
    (if (== hd LogicalAnd) (do
        (exit_if_false asm env (expr_arg expr 0) exit)
        (exit_if_false asm env (expr_arg env 1) exit)
        return
        ))
    (compile asm env expr @FALSE)
    (put_if_false asm exit)
    ))

; while (c) body
; =>
; if (not c) goto exit
; label head
; body
; if (c) goto head
; label exit
(fun compile_while (asm env cnd body) (
    (var exit_lbl (fresh_label asm))
    (var head_lbl (fresh_label asm))
    (put_nil asm)
    (compile asm env cnd @FALSE)
    (put_if_false asm exit_lbl)
    (set_label asm head_lbl)
    (put_drop asm)
    (compile asm env body @FALSE)
    (compile asm env cnd @FALSE)
    (put_if_true asm head_lbl)
    (set_label asm exit_lbl)
    ))

(fun compile_defvar (asm env sym val) (
    (var idx (add_local_variable env sym))
    (compile asm env val @FALSE)
    (put_storel asm idx)
    ))

(extern fun rewrite_expr)
(fun compile_assign (asm env op lhs rhs) (
    (var hd (expr_head lhs))
    (if (== op Nil)
        (compile asm env rhs @FALSE)
        (compile asm env (rewrite_expr (make_expr op (list2 lhs rhs))) @FALSE)
        )
    (var (== hd Symbol) (do
        (var v (symtable_find (tuple_at env 0) lhs 0))
        (if v
            (compile_local_assign asm env op v lhs)
            (compile_global_assign asm env op (find_global_variable lhs) lhs)
            )
        return
        ))
    (not_implemented "compile_assign")
    ))

(fun compile_local_assign (asm env op loc sym) (
    (var vty (expr_head loc))
    (if (== vty variable) (do
        (put_storel asm (expr_arg_int loc 0))
        return
        ))
    (if (== vty argument) (do
        (put_store_arg asm (expr_arg_int loc 0))
        return
        ))
    (output_error stderr)
    (pretty_print stderr sym)
    (output_string stderr " is not lvalue\n")
    (exit 1)
    ))

(fun compile_global_assign (asm env op info sym) (
    (put_push asm info)
    (put_setcar asm)
    ))

    ))
