;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-object.rlc 2014-02-04 11:30:53 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-compile")
(import "rowl1-error")

(extern object current_loc)

(var slots (make_wrtable))
(var parent (to_sym "parent"))
(var parent_tbl (make_wrtable))
(var dummy (wrtable_add slots parent parent_tbl))
(var initialize (to_sym "initialize"))
(var parent_special null)
(var root_object @C_UNDEF)

(extern fun tuple_at)
(extern fun _copy)

(export fun make_clone (obj) (
    (var clone (_copy obj))
    (set_slot clone parent obj)
    (var init (get_slot_nocheck clone initialize))
    (if (!= init @C_UNDEF)
        (= clone (runcode (get_bytecode init) clone))
        )
    (return clone)
    ))

(fun remove_slot (obj sym) (
    (var tbl (wrtable_find slots sym))
    (if (!= tbl @C_UNDEF) (wrtable_del tbl sym))
    (return @C_UNDEF)
    ))

(export fun set_slot (obj sym val) (
    (if (&& (== obj root_object) (== sym parent))
        (throw (logic_error current_loc (string "Can not set parent of root-object")))
        ) 
    (if (== obj @C_UNDEF)
        (throw (logic_error current_loc (string "Can not set slots of undef")))
        )
    (var v (get_slot_nocheck_noalias obj sym))
    (if (== (node_type v) @AliasE) (do
        (var f (field_get v 2))
        (if f
            (return (runcode_with_self obj (get_bytecode f) val))
            (throw (logic_error2 current_loc
                (string "Immutable Slot") obj sym))
            )
        ))
    (if (== val @C_UNDEF) (return (remove_slot obj sym)))
    (var tbl (wrtable_find slots sym))
    (if (== tbl @C_UNDEF) (do
        (= tbl (make_wrtable))
        (wrtable_add slots sym tbl)
        ))
    (wrtable_add tbl obj val)
    (return val)
    ))

(export fun set_slot_incremental (obj sym val) (
    (var f (get_slot_nocheck obj sym))
    (if (&& (is_function f) (is_function val))
        (return (set_slot obj sym (fusion_function val f)))
        )
    (return (set_slot obj sym val))
    ))

(export fun set_undef_slot (obj sym val) (
    (var v (get_slot_nocheck obj sym))
    (if (!= v @C_UNDEF) (return v))
    (return (set_slot obj sym val))
    ))

(export fun overwrite_slot (obj sym val) (
    (var v (get_slot_norec obj sym))
    (while (== v @C_UNDEF) (do
        (= obj (get_parent obj))
        (if (== obj @C_UNDEF) 
            (throw (undefined_var current_loc sym))
            )
        (= v (get_slot_norec obj sym))
        ))
    (return (set_slot obj sym val))
    ))

(fun get_parent (obj) (
    (if (== obj root_object) (return @C_UNDEF))
    (var p (wrtable_find parent_tbl obj))
    (if (!= p @C_UNDEF) (return p))
    (= p (array_get object parent_special (node_type obj)))
    (if (!= p @C_UNDEF) (return p))
    (return root_object)
    ))

(fun get_slot_nocheck_noalias (obj sym) (
    (if (== sym parent) (return (get_parent obj)))
    (var tbl (wrtable_find slots sym))
    (if (== tbl @C_UNDEF) (return @C_UNDEF))
    (label retry)
    (var v (wrtable_find tbl obj))
    (if (== v @C_UNDEF) (do
        (= obj (get_parent obj))
        (if (!= obj @C_UNDEF) (goto retry))
        ))
    (return v)
    ))

(export fun get_slot_nocheck (obj sym) (
    (var v (get_slot_nocheck_noalias obj sym))
    (if (&& (== (node_type v) @AliasE) (field_get v 1))
        (return (runcode_with_self obj (get_bytecode (field_get v 1))))
        (return v)
        )
    ))

(export fun get_slot (obj sym) (
    (var v (get_slot_nocheck obj sym))
    (if (== v @C_UNDEF)
        (throw (undefined_var current_loc sym))
        )
    (return v)
    ))


(export fun get_slot_norec (obj sym _) (
    (if (== sym parent) (return (get_parent obj)))
    (var tbl (wrtable_find slots sym))
    (if (== tbl @C_UNDEF) (return @C_UNDEF))
    (var v (wrtable_find tbl obj))
    (if (&& (== (node_type v) @AliasE) (field_get v 1))
        (return (runcode_with_self obj (get_bytecode (field_get v 1))))
        )
    (return v)
    ))

(export fun set_special_parent (ty obj) (
    (array_set object parent_special ty obj)
    ))

(export fun has_slot_p (obj sym) (
    (if (!= (get_slot_norec obj sym) @C_UNDEF)
        (return @C_TRUE)
        (return @C_FALSE)
        )
    ))

(fun alias_r (reader) (
    (return (variant @AliasE 2 reader 0))
    ))

(fun alias_rw (reader writer) (
    (return (variant @AliasE 2 reader writer))
    ))

(export fun setup_object_pre () (
    (= parent_special (allocate_array @NUM_NODE_TYPE))
    (for i 0 @NUM_NODE_TYPE
        (array_set object parent_special i @C_UNDEF)
        )
    (= root_object (make_object1 (to_sym "Trait") (to_sym "Object")))
    ))

(export fun setup_object (mod) (
    (set_slot mod (to_sym "ObjectTrait") root_object)

    (add_function1 mod (to_sym "clone") DontCare make_clone 0)
    (add_function3 mod (to_sym "set_slot") DontCare symT DontCare set_slot 0)
    (add_function4 mod (to_sym "set_slot") DontCare symT DontCare (quote (to_sym "incremental")) set_slot_incremental 0)
    (add_function2 mod (to_sym "get_slot") DontCare DontCare get_slot 0)
    (add_function3 mod (to_sym "get_slot") DontCare DontCare (quote (to_sym "norec")) get_slot_norec 0)
    (add_function2 mod (to_sym "has_slot?") DontCare symT has_slot_p 0)

    (add_function1 mod (to_sym "alias") funT alias_r 0)
    (add_function2 mod (to_sym "alias") funT funT alias_rw 0)
    ))

    ))
