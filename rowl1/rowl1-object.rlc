;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-object.rlc 2014-01-21 20:03:07 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-compile")
(import "rowl1-error")

(extern object current_loc)

(var slots (make_wrtable))
(var prototype (to_sym "proto"))
(var prototype_tbl (make_wrtable))
(var initialize (to_sym "initialize"))

(extern fun tuple_at)
(extern fun _copy)

(export fun make_clone (obj) (
    (var clone (_copy obj))
    (set_slot clone prototype obj)
    (var init (get_slot clone initialize))
    (if (!= init @C_UNDEF)
        (= clone (runcode (get_bytecode init) clone))
        )
    (return clone)
    ))

(export fun set_slot (obj sym val) (
    (if (|| (!= (node_type sym) @SymbolE) (is_special sym))
        (throw (invalid_slotname current_loc sym))
        )
    (var tbl (wrtable_find slots sym))
    (if (== tbl @C_UNDEF) (do
        (= tbl (make_wrtable))
        (wrtable_add slots sym tbl)
        ))
    (wrtable_add tbl obj val)
    (return val)
    ))

(export fun set_undef_slot (obj sym val) (
    (if (|| (!= (node_type sym) @SymbolE) (is_special sym))
        (throw (invalid_slotname current_loc sym))
        )
    (var v (get_slot obj sym))
    (if (!= v @C_UNDEF) (return v))
    (return (set_slot obj sym val))
    ))

(export fun get_slot (obj sym) (
    (if (|| (!= (node_type sym) @SymbolE) (is_special sym))
        (throw (invalid_slotname current_loc sym))
        )
    (var tbl (wrtable_find slots sym))
    (if (== tbl @C_UNDEF) (return @C_UNDEF))
    (label retry)
    (var v (wrtable_find tbl obj))
    (if (== v @C_UNDEF) (do
        (= obj (wrtable_find prototype_tbl obj))
        (if (== obj @C_UNDEF) (return (wrtable_find tbl @C_UNDEF)))
        (goto retry)
        ))
    (return v)
    ))

(export fun setup_object (global) (
    (wrtable_add slots prototype prototype_tbl)

    (add_function1 global (to_sym "clone") DontCare make_clone 0)
    (add_function3 global (to_sym "set_slot") DontCare symT DontCare set_slot 0)
    (add_function2 global (to_sym "get_slot") DontCare DontCare get_slot 0)
    ))

    ))
