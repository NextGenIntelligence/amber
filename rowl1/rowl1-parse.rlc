;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-parse.rlc 2011-10-14 03:02:36 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-lex")
(import "rowl1-node")

; Prog      ::= Expr*
; Expr      ::= Secondary
;             | prefix Expr
;             | Expr postfix
;             | Expr infix Expr
;             | constr Expr*
; Secondary ::= Primary
;             | Secondary '(' Expr, ... ')'
;             | Secondary '[' Expr, ... ']'
;             | Secondary '{' Expr, ... '}'
; Primary   ::= Symbol
;             | Literal
;             | '(' Expr, ... ')'
;             | '[' Expr, ... ']'
;             | '{' Expr ... '}'
;
; NB:
; - postfix operator must be unique

(var comma_op null)

(export fun init_parser (file ichan) (
    (= comma_op (variant @OP_INFIX 1 (to_sym "Comma") @FALSE @ASSOC_COMMA))
    (init_lexer file ichan)
    ))

(export fun push_parser (file ichan) (
    (push_lexer file ichan)
    ))

(export fun pop_parser () (
    (pop_lexer)
    ))

(export fun parse () (
    (var t (lex))
    (if (== t @TOK_EOF) (return 0))
    (var begin (get_loc))
    (var e (parse_expr_top t (get_clmn)))
    (var end (get_loc))
    (return (make_located (merge_loc begin end) e))
    ))

(fun parse_expr_top (tok offs) (
    (if (== tok @TOK_COMMAND) (do
        (var op (get_token_value))
        (var head (field_get op 1))
        (= tok (lex_sub offs))
        (if (== tok @TOK_END)
            (return (make_expr_user head 0))
            (return (make_expr_user head (cons (parse_expr tok offs @FALSE) 0)))
            )
        ))
    (return (parse_expr tok offs @FALSE))
    ))

(fun parse_expr (tok offs in_seq) (
    (var expr_stack 0)
    (var op_stack 0)
    (var next_op)

    (= op_stack (cons (cons (variant @OP_START 0) (get_loc)) op_stack))

    (label parse_expr_front)
    (while (== tok @TOK_PREFIX) (do
        (= op_stack (cons (cons (get_token_value) (get_loc)) op_stack))
        (= tok (lex_sub offs))
        ))
    (var e (parse_primary tok))
    (while (&& op_stack (< (associativity (caar op_stack)) @ASSOC_SECONDARY)) (do
        (var op (caar op_stack))
        (= e (make_expr_user (field_get op 1) (list1 e)))
        (= op_stack (cdr op_stack))
        ))
    (= e (parse_secondary e offs))
    (= expr_stack (cons e expr_stack))


    (label parse_expr_infix)
    (= tok (lex_infix offs))
    (if (|| (== tok @TOK_INFIX) (== tok @TOK_POSTFIX))
        (= next_op (cons (get_token_value) (get_loc)))
    (if (&& (! in_seq) (== tok ','))
        (= next_op (cons comma_op (get_loc)))
        (do
            (if (&& (!= tok @TOK_END) (&& (!= tok ',') (&& (!= tok ')') (&& (!= tok '}')
                (!= tok ']'))))) (do
                (output_loc stderr (get_loc))
                (output_string stderr "infix or postfix operator is required before `")
                (output_string stderr (get_token_text))
                (output_string stderr "'\n")
                (exit 1)
                ))
            (if (!= tok @TOK_END) (unput))
            (= next_op (cons (variant @OP_END 0) (get_loc)))
        )))

    (while 1 (do
        (var comp (compare_associativity (car op_stack) next_op))
        (if (== comp 0) (goto parse_expr_end)
        (if (> comp 0)
            (do
                ; reduce
                (var op (car op_stack))
                (if (== (car op) comma_op)
                    (do
                        (var elems (list1 (car expr_stack)))
                        (= expr_stack (cdr expr_stack))
                        (while (== (caar op_stack) comma_op) (do
                            (= elems (cons (car expr_stack) elems))
                            (= expr_stack (cdr expr_stack))
                            (= op_stack (cdr op_stack))
                            ))
                        (= expr_stack (cons
                            (make_expr_user Tuple elems)
                            expr_stack
                            ))
                    )
                    (do
                        (= op_stack (cdr op_stack))
                        (= expr_stack (reduce op expr_stack))
                    ))
                continue
            )
            (do
                (= op_stack (cons next_op op_stack))
                break
            )
            ))
        ))

    (if (|| (== tok @TOK_INFIX) (&& (! in_seq) (== tok ',')))
        (do (= tok (lex_sub offs)) (goto parse_expr_front))
    (if (== tok @TOK_POSTFIX) (goto parse_expr_infix)
        ))

    (output_loc stderr (get_loc))
    (output_string stderr "expect an infix or a postfix operator\n")
    (exit 1)

    (label parse_expr_end)

    (var len (list_len expr_stack))
    (if (== len 0) (return 0))
    (if (> len 1) (do
        (output_loc stderr (get_loc))
        (output_string stderr "irreducible expression\n")
        (exit 1)
        ))
    (return (car expr_stack))
    ))

(fun parse_secondary (e offs) (
    (label parse_secondary_loop)
    (var t (lex_sub offs))
    (if (== t '(') (do
        (var args (parse_comma_list (lex) ')'))
        (= e (make_expr_user Apply (list2 e args)))
        (goto parse_secondary_loop)
        )
    (if (== t '[') (do
        (var args (parse_comma_list (lex) ']'))
        (= e (make_expr_user Subscript (list2 e args)))
        (goto parse_secondary_loop)
        )))
    (if (&& (== t '{') (== (node_type e) @SymbolE)) (do
        (var args (parse_comma_list (lex) '}'))
        (if (== e List)
            (return args)
            (return (make_expr_user e args))
            )
        ))
    (unput)
    (return e)
    ))

(fun parse_primary (t) ((return (parse_primary_main t @TRUE))))
(fun try_parse_primary (t) ((return (parse_primary_main t @FALSE))))

(fun parse_primary_main (t error) (
    (if (== t @TOK_CHAR)   (return (get_token_value))
    (if (== t @TOK_INT)    (return (box (get_token_value)))
    (if (== t @TOK_FLOAT)  (return (make_float_from_string (get_token_text)))
    (if (== t @TOK_STRING) (return (get_token_value))
    (if (== t @TOK_SYMBOL) (return (get_token_value))
    (if (== t @TOK_CONSTR) (do
        (var op (get_token_value))
        (var head (field_get op 1))
        (var offs (get_clmn))
        (var args 0)
        (while 1 (do
            (var e (try_parse_primary (lex_sub offs)))
            (if (! e) break)
            (= args (cons e args))
            ))
        (return (make_expr_user head (list_reverse args)))
        )
    (if (== t '(') (return (parse_tuple (lex)))
    (if (== t '[') (return (parse_list (lex)))
    (if (== t '{') (return (parse_block (lex)))
        )))))))))

    (if error
        (do
            (output_loc stderr (get_loc))
            (output_string stderr "expect a literal expression")
            (exit 1)
        ))
    (unput)
    (return 0)
    ))

(fun parse_tuple (t) (
    (var elems (parse_comma_list t ')'))
    (if (&& elems (== (cdr elems) 0)) (return (car elems)))
    (return (make_expr_user Tuple elems))
    ))

(fun parse_list (t) (
    (var elems (parse_comma_list t ']'))
    (return elems)
    ))

(fun parse_comma_list (t end) (
    (if (== t end) (return 0))

    (var elems 0)
    (label parse_comma_list_loop)
    (var e (parse_expr t 0 @TRUE))
    (= elems (cons e elems))
    (= t (lex))
    (if (== t ',') (do
        (= t (lex))
        (goto parse_comma_list_loop)
        ))
    (eat t end)
    (return (list_reverse elems))
    ))

(fun parse_block (t) (
    (var elems 0)
    (if (!= t '}') (do
        (label parse_block_loop)

        (var begin (get_loc))
        (var e (parse_expr_top t (get_clmn)))
        (var end (get_loc))

        (= elems (cons (make_located (merge_loc begin end) e) elems))
        (= t (lex))
        (if (!= t '}') (goto parse_block_loop))
        ))
    (return (make_expr_user Block (list_reverse elems)))
    ))

(fun eat (tok expect) (
    (if (!= tok expect) (do
        (output_loc stderr (get_loc))
        (output_string stderr "expect '")
        (output_char stderr expect)
        (output_string stderr "' but got unknown token '")
        (output_string stderr (get_token_text))
        (output_string stderr "'\n")
        (exit 1)
        ))
    ))

(fun associativity (op) (
    (var type (field_get op 0))
    (if (== type @OP_PREFIX) (return (field_get op 2))
    (if (== type @OP_POSTFIX) (return (field_get op 2))
    (if (== type @OP_INFIX) (return (field_get op 3))
    (if (== type @OP_CONSTR) (return (field_get op 2))
    (if (== type @OP_START) (return @ASSOC_MAX)
    (if (== type @OP_END) (return @ASSOC_MAX)
        ))))))
    ))

(fun reduce (opinfo exprs) (
    (var op (car opinfo))
    (var type (field_get op 0))
    (if (|| (== type @OP_PREFIX) (== type @OP_POSTFIX))
        (do
            (var arg (car exprs))
            (var expr (make_expr_user (field_get op 1) (cons arg 0)))
            (return (cons expr (cdr exprs)))
        )
    (if (== type @OP_INFIX)
        (do
            (var lhs (cadr exprs))
            (var rhs (car exprs))
            (var expr (make_expr_user (field_get op 1) (cons lhs (cons rhs 0))))
            (return (cons expr (cddr exprs)))
        )
        ))
    ))

(fun compare_associativity (lop_info rop_info) (
    (var lop (car lop_info))
    (var rop (car rop_info))
    (var lassoc (associativity lop))
    (var rassoc (associativity rop))
    (if (!= lassoc rassoc) (return (- rassoc lassoc)))
    (var ltype (field_get lop 0))
    (var rtype (field_get rop 0))
    (if (== ltype @OP_START) (return 0))
    (if (&& (== ltype @OP_INFIX) (== rtype @OP_INFIX)) (do
        (var is_left_l (field_get lop 2))
        (var is_left_r (field_get rop 2))
        (if (== is_left_l is_left_r) (if is_left_l (return 1) (return -1)))
        ))
    (output_loc stderr (merge_loc (cdr lop_info) (cdr rop_info)))
    (output_string stderr "undetermined associativity ")
    (output_symbol stderr (field_get lop 1))
    (output_string stderr " <-> ")
    (output_symbol stderr (field_get rop 1))
    (output_char stderr '\n')
    (exit 1)
    ))

    ))
