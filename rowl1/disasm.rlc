;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: disasm.rlc 2010-11-04 22:53:53 nineties $
;

(import "config")
(import "rlvm-compile")
(import "vm-prim-inc")
(import "vm-insn")

(var insn_name_values ())
(var insn_len_values ())
(var tswitch_entries ())

(var print_func `(
    (byte   . (output_opd_byte oc ic))
    (short  . (output_opd_short oc ic))
    (ushort . (output_opd_short oc ic))
    (int    . (output_opd_int oc ic))
    (prim   . (output_opd_prim oc ic))
    (addr   . (output_opd_short oc ic))
    (object . (output_opd_int oc ic))
    ))

(var code 0)
(foreach i vm_instructions (do
    (var name (symbol2s (car i)))
    (push insn_name_values name)
    (push insn_len_values (insn_length (cadr i)))
    (var operands (cadr i))
    (if operands
        (push tswitch_entries
            `(@code . (do (do . @(map (lambda (o) (assoc o print_func)) operands)) break)))
        (push tswitch_entries
            `(@code . break))
            )
    (incr code)
    ))
(set insn_name_values (reverse insn_name_values))
(set insn_len_values (reverse insn_len_values))

(push tswitch_entries `(default . nop))
(set tswitch_entries (reverse tswitch_entries))

(var prim_name_values (map (lambda (ent) (symbol2s (car ent))) prim_table))

(compile `executable `(

(array string insn_names @insn_name_values)
(array char insn_lens @insn_len_values)
(array string prim_names @prim_name_values)

(var output_file null)

(fun main (argc argv) (
    (parse_option (address argc) argv)

    (disasm (array_get string argv 0))

    (return 0)
    ))

(fun parse_option (argcp argv) (
    (var argc (get argcp))
    (var new_argc argc)
    (var i 0)
    (var j 0)
    (while (< j argc) (do
        (var arg (array_get string argv j))
        (if (streq arg "-o")
            (do
                (= output_file (array_get string argv (+ j 1)))
                (-= new_argc 2)
                (+= j 2)
            )
            (do
                (array_set string argv i arg)
                (incr i)
                (incr j)
            ))
        ))
    (set argcp new_argc)
    ))

(fun read_bytes_check (ichan ptr size) (
    (if (< (input_bytes ichan ptr size) 0)
        (error "load failed"))
    ))

(fun read_byte_check (ichan) (
    (var val 0)
    (if (< (input_char (address val) ichan) 0)
        (error "load failed"))
    (return val)
    ))

(fun read_short_check (ichan) (
    (var val 0)
    (if (< (input_short (address val) ichan) 0)
        (error "load failed"))
    (return val)
    ))

(fun read_int_check (ichan) (
    (var val 0)
    (if (< (input_int (address val) ichan) 0)
        (error "load failed"))
    (return val)
    ))

(fun disasm (file) (
    (var ic (open_in file))
    (var oc 0)
    (if (== output_file 0)
        (= oc (get_stdout))
        (= oc (open_out file))
        )

    (var magic (read_int_check ic))
    (if (&& (!= magic @OBJ_MAGIC) (!= magic @EXE_MAGIC))
        (error "invalid file format\n")
        )

    (output_head oc file)
    (output_nref oc ic)
    (output_values oc ic)
    (output_code (read_int_check ic) oc ic)

    (close_in ic)
    (if (!= output_file 0)
        (close_out oc)
        )
    ))

(fun newline (oc) (
    (output_char oc '\n')
    ))

(fun output_head (oc file) (
    (output_string oc "==== disasm result of \"")
    (output_string oc file)
    (output_string oc "\" ====\n")
    ))

(fun output_nref (oc ic) (
    (var nref (read_int_check ic))
    (output_string oc "- number of global objects = ")
    (output_int oc nref)
    (newline oc)
    ))

(fun output_values (oc ic) (
    (var vsize (read_int_check ic))
    (output_string oc "- static values = ")
    (output_int oc vsize)
    (output_string oc " bytes\n")

    (var v (array char vsize))
    (read_bytes_check ic v vsize)

    (var i 0)
    (while (< i (- vsize 16)) (do
        (output_hex oc i 8)
        (output_string oc ":")
        (var j i)
        (while (< j (+ i 16)) (do
            (output_char oc ' ')
            (output_hex oc (array_get char v j) 2)
            (+= j 1)
            ))
        (newline oc)
        (+= i 16)
        ))
    (if (< i vsize) (do
        (output_hex oc i 8)
        (output_string oc ":")
        (while (< i vsize) (do
            (output_char oc ' ')
            (output_hex oc (array_get char v i) 2)
            (+= i 1)
            ))
        (newline oc)
        ))
    ))

(fun output_opd_byte (oc ic) (
    (output_char oc ' ')
    (var val (read_byte_check ic))
    (output_int oc val)
    return
    ))

(fun output_opd_short (oc ic) (
    (output_char oc ' ')
    (var val (read_short_check ic))
    (output_int oc val)
    return
    ))

(fun output_opd_int (oc ic) (
    (output_char oc ' ')
    (var val (read_int_check ic))
    (output_int oc val)
    return
    ))

(fun output_opd_prim (oc ic) (
    (var id (read_short_check ic))
    (output_char oc ' ')
    (output_string oc (array_get string prim_names id))
    return
    ))

(fun output_init (initlen oc ic) (
    (output_string oc "- init = ")
    (output_int oc initlen)
    (output_string oc " bytes\n")

    (var i 0)
    (while (< i initlen) (do
        (var bytecode (read_byte_check ic))
        (output_int oc i)
        (output_string oc "\t: ")
        (var name (array_get string insn_names bytecode))
        (output_string oc name)
        (tswitch bytecode @tswitch_entries)
        (newline oc)

        (var len (array_get char insn_lens bytecode))
        (+= i len)
        ))
    ))

(fun output_code (codelen oc ic) (
    (output_string oc "- instructions = ")
    (output_int oc codelen)
    (output_string oc " bytes\n")

    (var i 0)
    (while (< i codelen) (do
        (var bytecode (read_byte_check ic))
        (output_int oc i)
        (output_string oc "\t: ")
        (var name (array_get string insn_names bytecode))
        (output_string oc name)

        (if (streq "tswitch" name)
            (do
                ; output jump table
                (var ncases (read_short_check ic))
                (output_char oc ' ')
                (output_int oc ncases)
                (newline oc)
                (for j 0 (+ ncases 1) (do
                    (var addr (read_short_check ic))
                    (output_string oc "\t")
                    (output_int oc j)
                    (output_string oc ": ")
                    (output_int oc addr)
                    (newline oc)
                    (+= i 2)
                    ))
            )
            (do
                (tswitch bytecode @tswitch_entries)
                (newline oc)
            )
            )
        (var len (array_get char insn_lens bytecode))
        (+= i len)
        ))

    ))

    ))
