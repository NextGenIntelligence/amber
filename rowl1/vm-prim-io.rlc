;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: vm-prim-io.rlc 2014-03-05 20:47:32 nineties $
;

(import "stdlib")
(import "vm-compile")

(var SYS_READ 3)
(var SYS_WRITE 4)
(var SYS_OPEN 5)
(var SYS_CLOSE 6)
(var SYS_CHDIR 12)
(var SYS_LSTAT 107)
(var SYS_FCHDIR 133)
(var SYS_GETCWD 183)

(var ST_MODE_OFFSET 24)
(var ST_MODE_SIZE 4)
(var IFLNK 0120000)
(var IFMT 0170000)

(var STDIN_FD 0)
(var STDOUT_FD 1)
(var STDERR_FD 2)

(var RDBUFSZ 512) ; read buffer size
(var WRBUFSZ 512) ; write buffer size
(var EOF -1)

(var vm-prim-code `(

(extern void* make_carray)
(extern void* prim_make_struct5)
(extern void* prim_string)
(extern void* prim_strncpy)
(extern void* prim_strlcat)

(fun strlen (str) (
    (int len 0)
    (while (!= (*8 str) '\0') (
        (incr str)
        (incr len)
        ))
    (return len)
    ))

(fun strchr (str c) (
    (while (!= (*8 str) '\0') (
        (if (== (*8 str) c) ((return str)))
        (incr str)
        ))
    (if (== c 0) ((return str)))
    (return 0)
    ))

(fun strrchr (str c) (
    (void* p (+ (+ str (strlen str)) 1))
    (while (&& (!= str p) (!= (*8 p) c)) (
        (decr p)
        ))
    (if (== (*8 p) c) ((return p)))
    (return 0)
    ))

; I/O functions
(void* ichan_list 0) ; list of opened ichan
(void* ochan_list 0) ; list of opened ochan
(void* stdin)
(void* stdout)
(void* stderr)

(export prim_get_stdin)
(export prim_get_stdout)
(export prim_get_stderr)
(fun prim_get_stdin  () ((return stdin)))
(fun prim_get_stdout () ((return stdout)))
(fun prim_get_stderr () ((return stderr)))

(export prim_open)
(fun prim_open (path) (
    (return (syscall @SYS_OPEN path @O_RDONLY))
    ))

(export prim_close)
(fun prim_close (fd) (
    (return (syscall @SYS_CLOSE fd))
    ))

(export prim_chdir)
(fun prim_chdir (path) (
    (return (syscall @SYS_CHDIR path))
    ))

(export prim_fchdir)
(fun prim_fchdir (fd) (
    (return (syscall @SYS_FCHDIR fd))
    ))

; ichan = (buf, fd, beg, end, binmode)
(fun make_ichan (fd bin) (
    (void* chan (prim_make_struct5 1 (make_carray @RDBUFSZ) fd 0 0 bin))
    (= ichan_list (make_cons chan ichan_list))
    (return chan)
    ))

; ochan = (buf, fd, pos in buf, pos, binmode)
(fun make_ochan (fd bin) (
    (void* chan (prim_make_struct5 1 (make_carray @WRBUFSZ) fd 0 0 bin))
    (= ochan_list (make_cons chan ochan_list))
    (return chan)
    ))

; iss = (buf, -1, pos, capa, binmode)    ; InputStringStream
(export prim_make_iss)
(fun prim_make_iss (str bin) (
    (void* ichan (prim_make_struct5 1 str -1 0 (strlen str) bin))
    (if (! bin) ((replace_input_newline ichan)))
    (return ichan)
    ))

; oss = (buf, -1, pos, capa, binmode)    ; OutputStringStream
(export prim_make_oss)
(fun prim_make_oss (bin) (
    (return (prim_make_struct5 1 (make_carray 10) -1 0 10 bin))
    ))

(fun reserve_oss (oss) (
    (int size (get oss 2))
    (int new_capa (* 2 (get oss 3)))
    (void* new_buf (make_carray new_capa))
    (prim_memcpy new_buf (get oss 0) (+ size 1))
    (set oss 0 new_buf)
    (set oss 3 new_capa)
    ))

(export prim_oss_get)
(fun prim_oss_get (oss) (
    (return (get oss 0))
    ))

(fun open_error (path) (
    (prim_output_string stderr "ERROR: failed to open '")
    (prim_output_string stderr path)
    (prim_output_string stderr "'\n")
    (exit 1)
    ))

(export prim_open_in)
(fun prim_open_in (path bin) (
    (int fd (syscall @SYS_OPEN path @O_RDONLY))
    (if (< fd 0) ((return 0)))
    (return (make_ichan fd bin))
    ))

(export prim_close_in)
(fun prim_close_in (ichan) (
    (if (! (member ichan_list ichan)) ((return @FALSE)))
    (= ichan_list (remove_from_list ichan_list ichan))
    (syscall @SYS_CLOSE (get ichan 1))
    (return @TRUE)
    ))

(export prim_file_exists)
(fun prim_file_exists (path) (
    (int fd (syscall @SYS_OPEN path @O_RDONLY))
    (if (< fd 0) ((return @FALSE)))
    (syscall @SYS_CLOSE fd)
    (return @TRUE)
    ))

(export prim_open_out)
(fun prim_open_out (path mode bin) (
    (int fd (syscall @SYS_OPEN path mode 0644))
    (if (< fd 0) ((return 0)))
    (return (make_ochan fd bin))
    ))

; Convert '\r' and '\r\n' to '\n'. This routine is hard coded for
; UNIX system.
(fun replace_input_newline (ichan) (
    (void* buf (get ichan 0))
    (int end (get ichan 3))
    (int read 0)
    (int write 0)
    (while (< read end) (
        (int c ([]8 buf read))
        (if (== c '\r')
            (
                ([]=8 buf write '\n')
                (incr write)
                (incr read)
                (if (== ([]8 buf read) '\n') (
                    (incr read)
                    ))
            )
            (
                ([]=8 buf write c)
                (incr write)
                (incr read)
            ))
        ))
    (set ichan 3 write)
    ))

(fun replace_output_newline (ochan) (
    (void* buf (get ochan 0))
    (int end (get ochan 2))
    (int read 0)
    (int write 0)
    (while (< read end) (
        (int c ([]8 buf read))
        (if (== c '\r')
            (
                ([]=8 buf write '\n')
                (incr write)
                (incr read)
                (if (== ([]8 buf read) '\n') (
                    (incr read)
                    ))
            )
            (
                ([]=8 buf write c)
                (incr write)
                (incr read)
            ))
        ))
    (set ochan 2 write)
    ))

(export prim_flush)
(fun prim_flush (ochan) (
    (int binmode (get ochan 4))
    (if (&& (>= (get ochan 1) 0) (> (get ochan 2) 0)) (
        (if (! binmode) ((replace_output_newline ochan)))
        (syscall @SYS_WRITE (get ochan 1) (get ochan 0) (get ochan 2))
        (set ochan 2 0)
        ))
    ))

(export prim_close_out)
(fun prim_close_out (ochan) (
    (if (! (member ochan_list ochan)) ((return @FALSE)))
    (= ochan_list (remove_from_list ochan_list ochan))
    (prim_flush ochan)
    (syscall @SYS_CLOSE (get ochan 1))
    (return @TRUE)
    ))

(export prim_eof)
(fun prim_eof (ichan) (
    (if (== (get ichan 3) (get ichan 2))
        ((return @TRUE))
        ((return @FALSE))
        )
    ))

(fun fill_ichan (ichan len) (
    (int remain (- (get ichan 3) (get ichan 2)))
    (if (>= remain len) (
        (return)
        ))
    (if (> remain 0) (
        (prim_memcpy (get ichan 0) (+ (get ichan 0) (get ichan 2)) remain)
        ))
    (if (< (get ichan 1) 0) ((return)))
    (int sz (syscall @SYS_READ (get ichan 1) (+ (get ichan 0) remain) (- @RDBUFSZ remain)))
    (set ichan 2 0)
    (set ichan 3 (+ sz remain))
    (if (! (get ichan 4)) ((replace_input_newline ichan)))
    ))

(export prim_input_bytes)
(fun prim_input_bytes (ichan ptr size) (
    (int beg (get ichan 2))
    (int end (get ichan 3))
    (void* chanp (+ (get ichan 0) beg))
    (int bufsz (- end beg))
    (if (<= size bufsz)
        (
            (prim_memcpy ptr chanp size)
            (set ichan 2 (+ beg size))
            (return size)
        )
        (
            (if (< (get ichan 1) 0) ((return -1)))
            (prim_memcpy ptr chanp bufsz)
            (set ichan 2 end)
            (-= size bufsz)
            (int r (syscall @SYS_READ (get ichan 1) (+ ptr bufsz) size))
            (if (< r size) ((return (+ r bufsz))))
            (return (+ size bufsz))
        ))
    ))

(export prim_lookahead)
(fun prim_lookahead (addr ichan) (
    (fill_ichan ichan 1)
    (if (== (get ichan 2) (get ichan 3)) (
        (return -1) ; EOF
        ))
    (int c (get8 (get ichan 0) (get ichan 2)))
    (set addr 0 c)
    (return 0)
    ))

(export prim_input_uchar)
(fun prim_input_uchar (addr ichan) (
    (fill_ichan ichan 1)
    (if (== (get ichan 2) (get ichan 3)) (
        (return -1) ; EOF
        ))
    (int c (getu8 (get ichan 0) (get ichan 2)))
    (set addr 0 c)
    (set ichan 2 (+ (get ichan 2) 1))
    (return 0)
    ))

(export prim_input_char)
(fun prim_input_char (addr ichan) (
    (fill_ichan ichan 1)
    (if (== (get ichan 2) (get ichan 3)) (
        (return -1) ; EOF
        ))
    (int c (get8 (get ichan 0) (get ichan 2)))
    (set addr 0 c)
    (set ichan 2 (+ (get ichan 2) 1))
    (return 0)
    ))

(export prim_input_short)
(fun prim_input_short (addr ichan) (
    (fill_ichan ichan 2)
    (if (< (- (get ichan 3) (get ichan 2)) 2) (
        (return -1) ; EOF
        ))
    (int c (get16 (+ (get ichan 0) (get ichan 2)) 0))
    (set addr 0 c)
    (set ichan 2 (+ (get ichan 2) 2))
    (return 0)
    ))

(export prim_input_ushort)
(fun prim_input_ushort (addr ichan) (
    (fill_ichan ichan 2)
    (if (< (- (get ichan 3) (get ichan 2)) 2) (
        (return -1) ; EOF
        ))
    (int c (getu16 (+ (get ichan 0) (get ichan 2)) 0))
    (set addr 0 c)
    (set ichan 2 (+ (get ichan 2) 2))
    (return 0)
    ))

(export prim_input_string)
(fun prim_input_string (addr ichan) (
    (int capa 10)
    (int idx 0)
    (void* buf (prim_allocate_string capa))
    (while 1 (
        (int code)

        (if (== idx capa) (
            (int new_capa (* capa 2))
            (void* new_buf (prim_allocate_string new_capa))
            (prim_memcpy new_buf buf capa)
            (= capa new_capa)
            (= buf new_buf)
            ))

        (if (< (prim_input_uchar (address code) ichan) 0) (
            (set8 buf idx 0)
            (set addr 0 buf)
            (return 0)
            ))
        (set8 buf idx code)
        (+= idx 1)

        (if (== code '\0') (
            (set addr 0 buf)
            (return 0)
            ))
        ))
    ))

(export prim_input_line)
(fun prim_input_line (addr ichan) (
    (int capa 10)
    (int idx 0)
    (void* buf (prim_allocate_string capa))
    (while 1 (
        (int code)

        (if (== idx capa) (
            (int new_capa (* capa 2))
            (void* new_buf (prim_allocate_string new_capa))
            (prim_memcpy new_buf buf capa)
            (= capa new_capa)
            (= buf new_buf)
            ))

        (if (< (prim_input_uchar (address code) ichan) 0) (
            (if (== idx 0) ((return -1)))
            (set8 buf idx 0)
            (set addr 0 buf)
            (return 0)
            ))
        (set8 buf idx code)
        (+= idx 1)

        (if (|| (== code '\n') (== code '\0')) (
            (set8 buf idx 0)
            (set addr 0 buf)
            (return 0)
            ))
        ))
    ))

(export prim_input_int)
(fun prim_input_int (addr ichan) (
    (fill_ichan ichan 4)
    (if (< (- (get ichan 3) (get ichan 2)) 4) (
        (return -1) ; EOF
        ))
    (int c (get (+ (get ichan 0) (get ichan 2)) 0))
    (set addr 0 c)
    (set ichan 2 (+ (get ichan 2) 4))
    (return 0)
    ))

(export prim_output_bytes)
(fun prim_output_bytes (ochan ptr size) (
    (if (== (get ochan 1) @STDERR_FD) (
        ; Do not buffer outputs to stderr
        (syscall @SYS_WRITE @STDERR_FD ptr size)
        (return)
        ))
    (while (> size 0) (
        (prim_output_char ochan (*8 ptr))
        (incr ptr)
        (decr size)
        ))
    ))

(export prim_output_char)
(fun prim_output_char (ochan c) (
    (if (== (get ochan 1) @STDERR_FD) (
        ; Do not buffer outputs to stderr
        (syscall @SYS_WRITE @STDERR_FD (address c) 1)
        (return)
        ))
    (set8 (get ochan 0) (get ochan 2) c)
    (int new_size (+ (get ochan 2) 1))
    (set ochan 2 new_size)
    (if (> (get ochan 1) 0) ((set ochan 3 (+ (get ochan 3) 1))))
    (if (&& (< (get ochan 1) 0) (== new_size (- (get ochan 3) 1))) (
        (reserve_oss ochan)
        (return)
        ))
    (if (|| (== c '\n') (== new_size @WRBUFSZ)) (
        (prim_flush ochan)
        (return)
        ))
    ))

(export prim_output_string)
(fun prim_output_string (ochan str) (
    (if (== (get ochan 1) @STDERR_FD) (
        ; Do not buffer outputs to stderr
        (syscall @SYS_WRITE @STDERR_FD str (strlen str))
        (return)
        ))
    (while (!= (*8 str) '\0') (
        (prim_output_char ochan (*8 str))
        (incr str)
        ))
    ))

(char[] 10 output_int_digits)
(export prim_output_int)
(fun prim_output_int (ochan num) (
    (if (< num 0) (
        (if (== num 0x80000000) (
            ; neg num == neg
            (prim_output_string ochan "-2147483648")
            (return)
            ))
        (prim_output_char ochan '-')
        (prim_output_int ochan (neg num))
        (return)
        ))
    (set8 output_int_digits 0 (+ (% num 10) '0'))
    (/= num 10)
    (int i 0)
    (while (!= num 0) (
        (incr i)
        (set8 output_int_digits i (+ (% num 10) '0'))
        (/= num 10)
        ))
    (while (>= i 0) (
        (prim_output_char ochan (getu8 output_int_digits i))
        (decr i)
        ))
    ))

(char[] 8 output_hex_digits)
(export prim_output_hex)
(fun prim_output_hex (ochan num len) (
    (int i 0)
    (while (< i len) (
        (set8 output_hex_digits i (getu8 "0123456789abcdef" (% num 16)))
        (/= num 16)
        (+= i 1)
        ))
    (-= i 1)
    (while (>= i 0) (
        (prim_output_char ochan (getu8 output_hex_digits i))
        (-= i 1)
        ))
    ))

(export prim_read_bytes)
(fun prim_read_bytes (ptr size) (
    (return (prim_input_bytes stdin ptr size))
    ))

(export prim_read_uchar)
(fun prim_read_uchar (addr) (
    (return (prim_input_uchar addr stdin))
    ))

(export prim_read_char)
(fun prim_read_char (addr) (
    (return (prim_input_char addr stdin))
    ))

(export prim_read_short)
(fun prim_read_short (addr) (
    (return (prim_input_short addr stdin))
    ))

(export prim_read_int)
(fun prim_read_int (addr) (
    (return (prim_input_int addr stdin))
    ))

(export prim_read_string)
(fun prim_read_string (addr) (
    (return (prim_input_string addr stdin))
    ))

(export prim_read_line)
(fun prim_read_line (addr) (
    (return (prim_input_line addr stdin))
    ))

(export prim_print_bytes)
(fun prim_print_bytes (ptr size) (
    (return (prim_output_bytes stdout ptr size))
    ))

(export prim_print_char)
(fun prim_print_char (c) (
    (return (prim_output_char stdout c))
    ))

(export prim_print_string)
(fun prim_print_string (str) (
    (return (prim_output_string stdout str))
    ))

(export prim_print_int)
(fun prim_print_int (num) (
    (return (prim_output_int stdout num))
    ))

(export prim_print_hex)
(fun prim_print_hex (num len) (
    (return (prim_output_hex stdout num len))
    ))

(export prim_error)
(fun prim_error (msg) (
    (error msg)
    ))

(char[] @PATH_MAX resolved)
(char[] @PATH_MAX left)
(char[] @PATH_MAX next_token)
(char[] @PATH_MAX symlink)
(char[] 144 stat) ; sizeof(struct stat) XXX it should not be hardcoded.

(export prim_realpath)
(fun prim_realpath (path) (
    (int resolved_len 0)
    (int left_len 0)
    (int symlinks 0)
    (void* p 0)
    (void* q 0)
    (void* s 0)
    (if (== ([]8 path 0) '/')
        (
            ([]=8 resolved 0 '/')
            ([]=8 resolved 1 0)
            (if (! ([]8 path 1)) (
                (return (prim_string resolved))
                ))
            (= resolved_len 1)
            (= left_len (prim_strncpy left (+ path 1) @(- PATH_MAX 1)))
        )
        (
            (if (== (syscall @SYS_GETCWD resolved @PATH_MAX) 0) (
                (prim_output_string stderr "ERROR: failed to get current working directory\n")
                (exit 1)
                ))
            (= resolved_len (strlen resolved))
            (= left_len (prim_strncpy left path @(- PATH_MAX 1)))
        ))
    (if (|| (>= left_len @PATH_MAX) (>= resolved_len @PATH_MAX)) (
        (return 0)
        ))

    (while @TRUE (
        (label cont)
        (if (== left_len 0) ((break)))
        (= p (strchr left '/'))
        (if p
            ((= s p))
            ((= s (+ left left_len)))
            )
        (if (>= (- s left) @PATH_MAX) ((return 0)))
        (prim_memcpy next_token left (- s left))
        ([]=8 next_token (- s left) '\0')
        (-= left_len (- s left))
        (if p ((prim_memcpy left (+ s 1) (+ left_len 1))))
        (if (!= ([]8 resolved (- resolved_len 1)) '/') (
            (if (>= resolved_len @PATH_MAX) ((return 0)))
            ([]=8 resolved resolved_len '/')
            (+= resolved_len 1)
            ([]=8 resolved resolved_len '\0')
            ))
        (if (! ([]8 next_token 0)) ((goto cont)))
        (if (! (prim_strcmp next_token ".")) ((goto cont)))
        (if (! (prim_strcmp next_token "..")) (
            (if (> resolved_len 1) (
                ([]=8 resolved (- resolved_len 1) '\0')
                (= q (+ (strrchr resolved '/') 1))
                ([]=8 q 0 '\0')
                (= resolved_len (- q resolved))
                ))
            (goto cont)
            ))
        (= resolved_len (prim_strlcat resolved next_token @PATH_MAX))
        (if (>= resolved_len @PATH_MAX) ((return 0)))
        (if (syscall @SYS_LSTAT resolved stat) (
            (return 0)
            ))

        (if (== (& ([] (+ stat @ST_MODE_OFFSET) 0) @IFMT) @IFLNK) (
            (prim_output_string stderr "ERROR: symbolic link is not supported\n")
            (exit 1)
            ))
        ))

    (if (&& (> resolved_len 1) (== ([]8 resolved (- resolved_len 1)) '/')) (
        ([]=8 resolved (- resolved_len 1) 0)
        ))
    (return (prim_string resolved))
    ))

(export init_prim_io)
(fun init_prim_io () (
    (= stdin  (make_ichan @STDIN_FD @FALSE))
    (= stdout (make_ochan @STDOUT_FD @FALSE))
    (= stderr (make_ochan @STDERR_FD @FALSE))
    (register_static (address stdin))
    (register_static (address stdout))
    (register_static (address stderr))
    (register_static (address ichan_list))
    (register_static (address ochan_list))
    ))

(export finish_prim_io)
(fun finish_prim_io () (
    ; close unclosed channels
    (while ichan_list (
        (prim_close_in (get ichan_list 0))
        ))
    (while ochan_list (
        (prim_close_out (get ochan_list 0))
        ))
    ))

))

(vtable_push)
(compile vm-prim-code)
(vtable_pop)
