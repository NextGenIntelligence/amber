;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rlvm-compile.rlc 2014-01-20 17:01:57 nineties $
;

(import "stdlib")
(import "rlvm-assemble")
(import "vm-prim-inc")
(import "config")

(var vtable ()) ; variable table
(define vtable_push () (set vtable (cons () vtable)))
(define vtable_pop  () (set vtable (cdr vtable)))
(define try_lookup_var (sym) (do
    (define loop (sym tab)
        (if (nil? tab) nil (do
            (var v (assoc sym (car tab)))
            (if v v (loop sym (cdr tab)))
            )))
    (loop sym vtable)
    ))
(define lookup_var (sym) (do
    (var v (try_lookup_var sym))
    (if v v (error "undefined variable : " sym))
    ))

(define add_var (name opd) (setcar vtable (cons `(@name . @opd) (car vtable))))

(define unboxed_type? (type) (member? type `(char int)))
(define unboxed_type_size (type) (assoc type `((char . 1) (int . 4))))

(var label_id 0)
(define mklabel () (do
    (incr label_id)
    (tosym (++ "label." label_id))
    ))

(var break_labels ())
(var continue_labels ())
(var current_fun nil)

(define label (name) (do
    `(label @(s++ current_fun '.' name))
    ))

(define push_exit_label () (do
    (var blbl (mklabel))
    (var clbl (mklabel))
    (push break_labels blbl)
    (push continue_labels clbl)
    ))
(define pop_exit_label () (do
    (var blbl (car break_labels))
    (set break_labels (cdr break_labels))
    (set continue_labels (cdr continue_labels))
    (emit_insn (label blbl))
    ))

(var num_local_var 0)
(define register_local_var (name) (do
    (var idx num_local_var)
    (add_var name `(local @idx))
    (incr num_local_var)
    idx
    ))

(var insn_seq ())
(define reset_insn_seq () (set insn_seq ()))
(define get_insn_seq () (reverse insn_seq))
(define last_insn () (car insn_seq))

(define emit_insn (insn) (push insn_seq insn))
(define emit_nil () (emit_insn `(imm_int16 (short @C_NIL))))

(var startup_code ())
(define push_startup_code (code) (set startup_code (append startup_code code)))

(define gen_startup_func () (do
    (reset_insn_seq)
    (compile_expr `(exit (main (cmd_argc) (cmd_argv))) true)
    (var call_main (get_insn_seq))
    `(function @nil __startup__ @(append startup_code call_main))
    ))

(define gen_init_func () (do
    (reset_insn_seq)
    (push_startup_code `(return))
    `(function @nil __init__ @startup_code)
    ))

(define arg_insn (idx)
    (cond
        ((== idx 0) `arg0)
        ((== idx 1) `arg1)
        ((== idx 2) `arg2)
        ((== idx 3) `arg3)
        ((== idx 4) `arg4)
        (otherwise `(@loadl (byte @(arg_offs idx))))
        ))

(define compile_var (sym drop) (do
    (if (not drop) (do
        (var loc (lookup_var sym))
        (cond
            ((== `arg (car loc)) (emit_insn (arg_insn (cadr loc))))
            ((== `local (car loc)) (compile_local_var loc))
            ((== `value (car loc)) (compile_value loc))
            ((== `object (car loc)) (compile_object loc))
            ((== `fun (car loc)) (compile_fun loc))
            ((== `extfun (car loc)) (compile_extfun loc))
            ((== `prim (car loc)) (compile_prim loc))
            ((== `extvalue (car loc)) (compile_value loc))
            ((== `extobject (car loc)) (compile_object loc))
            (otherwise (error "compile_var: not implemented " loc))
            )
        ))
    ))

(define compile_value ((opdtype type name)) (do
    (cond
        ((== `char type)    (emit_insn `(loadbv (@opdtype @name))))
        ((== `int type)     (emit_insn `(loadv (@opdtype @name))))
        ((== `void* type)   (emit_insn `(loadav (@opdtype @name))))
        ((== `string type)  (emit_insn `(loadav (@opdtype @name))))
        (otherwise (error "compile_value: not implemented"))
        ))
    )

(define compile_object ((opdtype name)) (do
    (emit_insn `(loado (@opdtype @name)))
    ))

(define compile_local_var ((_ idx))
    (cond
        ((== idx 0) (emit_insn `loadl0))
        ((== idx 1) (emit_insn `loadl1))
        ((== idx 2) (emit_insn `loadl2))
        ((== idx 3) (emit_insn `loadl3))
        ((== idx 4) (emit_insn `loadl4))
        ((== idx 5) (emit_insn `loadl5))
        ((< idx 256) (emit_insn `(loadl (byte @(local_offs idx)))))
        (otherwise (error "too many local variables"))
        ))

(define compile_fun ((_ name)) (do
    (emit_insn `(fun (label @name)))
    ))

(define compile_extfun ((_ name)) (do
    (emit_insn `(lfun (extfun @name)))
    ))

(define compile_prim ((_ idx)) (do
    (emit_insn `(prim (short @idx)))
    ))

(define compile_int_lit (val drop) (do
    (if (not drop) 
        (cond
            ((== val 0)  (emit_insn `imm_i0))
            ((== val 1)  (emit_insn `imm_i1))
            ((== val 2)  (emit_insn `imm_i2))
            ((== val 3)  (emit_insn `imm_i3))
            ((== val 4)  (emit_insn `imm_i4))
            ((== val 5)  (emit_insn `imm_i5))
            ((== val -1) (emit_insn `imm_im1))
            ((and (<= val 32768) (> val -32769)) (emit_insn `(imm_int16 (short @val))))
            (otherwise (emit_insn `(imm_int32 (long @val))))
            ))
    ))

(var string_decls ())
(define compile_string_lit (str drop) (do
    (if (not drop) (do
        (var strlbl (mklabel))
        (add_var strlbl `(value string @strlbl))
        (push string_decls `(string @nil @strlbl @str))
        (emit_insn `(loadav (value @strlbl)))
        ))
    ))

(define compile_exit (expr drop) (do
    (assert "exit" drop)
    (compile_expr (cadr expr) nil)
    (emit_insn `exit)
    ))

(define compile_return (expr drop) (do
    (assert "return" drop)
    (compile_expr (cadr expr) nil)
    (emit_insn `ireturn)
    ))

(define compile_local_incrdecr (op (_ idx)) (do
    (if (< idx 6)
        (do
            (var insn (tosym (++ op 'l' idx)))
            (emit_insn insn)
        )
        (do
            (var insn (tosym (++ op 'l')))
            (emit_insn `(@insn (byte @(local_offs idx))))
        )
        )
    ))

(define compile_incrdecr ((op v) drop) (do
    (assert "incrdecr" drop)
    (var loc (lookup_var v))
    (cond
        ((== `local (car loc)) (compile_local_incrdecr op loc))
        ((== `incr op) (compile_expr `(+= @v 1) true))
        ((== `decr op) (compile_expr `(-= @v 1) true))
        )
    ))

(var binary_operator
    `((+ . iadd) (- . isub) (* . imul) (/ . idiv) (% . imod) (<< . sal) (>> . sar)
    (& . and) (| . or) (^ . xor) (udiv . udiv) (umod . umod)
    (bigadd . badd) (bigsub . bsub) (bigmul . bmul) (bigcmp . bcmp) (bigshl . bshl) (bigshr . bshr)
    (fadd . fadd) (fsub . fsub) (fmul . fmul) (fdiv . fdiv) (fpow . fpow) (flog . flog)
    )
    )
(var unary_operator `((~ . not) (- . ineg) (f- . fneg) (fabs . fabs) (fsqrt . fsqrt) (fsin . fsin) (fcos . fcos) (ftan . ftan) (itof . itof) (bsr . bsr)))
(var assignment_operator `((= . nop) (+= . iadd) (-= . isub) (*= . imul)
    (/= . idiv) (%= . imod) (<<= . sal) (>>= . sar) (&= . and) (|= . or) (^= . xor)))
(var conditional_operator `(== != < > <= >= ! && ||))

(define binary_operator? (op) (assoc op binary_operator))
(define unary_operator? (op) (assoc op unary_operator))
(define assignment_operator? (op) (assoc op assignment_operator))
(define conditional_operator? (op) (member? op conditional_operator))

(define compile_binexpr (expr drop) (do
    (var insn (assoc (car expr) binary_operator))
    (var lhs (cadr expr))
    (var rhs (caddr expr))
    (compile_expr lhs nil)
    (compile_expr rhs nil)
    (emit_insn insn)
    (if drop (emit_insn `drop))
    ))

(define compile_unexpr (expr drop) (do
    (var insn (assoc (car expr) unary_operator))
    (var arg (cadr expr))
    (compile_expr arg nil)
    (emit_insn insn)
    (if drop (emit_insn `drop))
    ))

(define compile_ludiv (expr drop) (do
    (compile_expr (cadr expr) nil)
    (compile_expr (caddr expr) nil)
    (compile_expr (cadddr expr) nil)
    (emit_insn `ludiv)
    (if drop (emit_insn `drop))
    ))

(define arg_offs (idx) (* 4 (+ 5 idx)))
(define local_offs (idx) (* -4 (+ 1 idx)))

(define gen_storel (idx) (do
    (cond
        ((== idx 0) (emit_insn `storel0))
        ((== idx 1) (emit_insn `storel1))
        ((== idx 2) (emit_insn `storel2))
        ((== idx 3) (emit_insn `storel3))
        ((== idx 4) (emit_insn `storel4))
        ((== idx 5) (emit_insn `storel5))
        ((< idx 256) (emit_insn `(storel (byte @(local_offs idx)))))
        (otherwise (error "too many local variables"))
        )
    ))
(define compile_local_assign (insn loc rhs drop) (do
    (if (!= `nop insn)
        (do
            (compile_local_var loc)
            (compile_expr rhs nil)
            (emit_insn insn)
        )
        (do
            (compile_expr rhs nil)
        )
        )
    (gen_storel (cadr loc))
    (if (not drop) (emit_nil))
    ))

(define compile_arg_assign (insn loc rhs drop) (do
    (if (!= `nop insn)
        (do
            (emit_insn (arg_insn (cadr loc)))
            (compile_expr rhs nil)
            (emit_insn insn)
        )
        (do
            (compile_expr rhs nil)
        )
        )
    (var idx (cadr loc))
    (emit_insn `(storel (byte @(arg_offs idx))))
    (if (not drop) (emit_nil))
    ))

(define compile_value_assign (insn (_ type name) rhs drop) (do
    (var load_store_op (assoc type `((char . (loadbv storebv)) (int . (loadv storewv)))))
    (if (!= `nop insn)
        (do
            (emit_insn `(@(car load_store_op) (value @name)))
            (compile_expr rhs nil)
            (emit_insn insn)
            (emit_insn `(@(cadr load_store_op) (value @name)))
        )
        (do
            (compile_expr rhs nil)
            (emit_insn `(@(cadr load_store_op) (value @name)))
        )
        )
    (if (not drop) (emit_nil))
    ))

(define compile_object_assign (insn (_ name) rhs drop) (do
    (if (!= `nop insn)
        (do
            (emit_insn `(loado (object @name)))
            (compile_expr rhs nil)
            (emit_insn insn)
            (emit_insn `(storeo (object @name)))
        )
        (do
            (compile_expr rhs nil)
            (emit_insn `(storeo (object @name)))
        ))
    (if (not drop) (emit_nil))
    ))

(define compile_assign (expr drop) (do
    (var insn (assoc (car expr) assignment_operator))
    (var lhs (cadr expr))
    (var rhs (caddr expr))
    (var loc (lookup_var lhs))
    (cond
        ((== `local (car loc)) (compile_local_assign insn loc rhs drop))
        ((== `arg (car loc)) (compile_arg_assign insn loc rhs drop))
        ((== `value (car loc)) (compile_value_assign insn loc rhs drop))
        ((== `object (car loc)) (compile_object_assign insn loc rhs drop))
        (otherwise (error "compile_assign: not implemented"))
        )
    ))

; translate (cmp a b) to 
(define compile_conditional (expr drop) (do
    (compile_block `(
        (var ret 0)
        (if @expr (incr ret))
        ret
        ) drop)
    ))

(define compile_prim_call (idx args drop) (do
    (var narg (length args))
    (foreach a (reverse args) (compile_expr a nil))
    (emit_insn `(pcall (short @idx) (byte @(* 4 narg))))
    (if drop (emit_insn `drop))
    ))

(define compile_localcall (fun args drop) (do
    (var narg (length args))
    (foreach a (reverse args) (compile_expr a nil))
    (emit_insn `(call (label @fun) (byte @(* 4 narg))))
    (if drop (emit_insn `drop))
    ))

(define compile_extcall (fun args drop) (do
    (var narg (length args))
    (foreach a (reverse args) (compile_expr a nil))
    (emit_insn `(lcall (extfun @fun) (byte @(* 4 narg))))
    (if drop (emit_insn `drop))
    ))

(define compile_dynamiccall (fun args drop) (do
    (var narg (length args))
    (foreach a (reverse args) (compile_expr a nil))
    (compile_expr fun nil)
    (emit_insn `(acall (byte @(* 4 narg))))
    (if drop (emit_insn `drop))
    ))

(define compile_call (expr drop) (do
    (var fun (car expr))
    (var loc (try_lookup_var fun))
    (cond
        ((nil? loc) (compile_localcall fun (cdr expr) drop))
        ((== `prim (car loc)) (compile_prim_call (cadr loc) (cdr expr) drop))
        ((== `extfun (car loc)) (compile_extcall fun (cdr expr) drop))
        ((== `fun (car loc)) (compile_localcall fun (cdr expr) drop))
        ((cons? loc) (compile_dynamiccall fun (cdr expr) drop))
        (otherwise (error "compile_call: not reachable here"))
        )))

(define compile_runcode ((_ bytecode . args) drop) (do
    (var narg (length args))
    (foreach a (reverse args) (compile_expr a nil))
    (compile_expr bytecode nil)
    (emit_insn `(jcall (byte @(* 4 narg)) (byte 0)))
    (if drop (emit_insn `drop))
    ))

(define compile_runcode_with_self ((_ self bytecode . args) drop) (do
    (var narg (length args))
    (foreach a (reverse args) (compile_expr a nil))
    (compile_expr self nil)
    (compile_expr bytecode nil)
    (emit_insn `(jcall (byte @(* 4 narg)) (byte 1)))
    (if drop (emit_insn `drop))
    ))

(var comparison_operator
    `((< . if_ge) (> . if_le) (<= . if_gt) (>= . if_lt) (u< . if_uge) (u> . if_ule) (u<= . if_ugt) (u>= . if_ult) (== . if_ne) (!= . if_eq)
      (f< . if_fge) (f> . if_fle) (f<= . if_fgt) (f>= . if_flt) (f== . if_fne) (f!= . if_feq)))
(define comparison_expr? (expr) (and (cons? expr) (assoc (car expr) comparison_operator)))

(define compile_comp_if (expr drop) (do
    (assert "comp_if" drop)
    (var condexpr (cadr expr))
    (var insn (assoc (car condexpr) comparison_operator))
    (var lhs (cadr condexpr))
    (var rhs (caddr condexpr))
    (var ifthen (caddr expr))
    (var ifelse (if (cdddr expr) (cadddr expr) `nop))
    (var ifelse_label (mklabel))
    (var end_label (mklabel))
    (compile_expr lhs nil)
    (compile_expr rhs nil)
    (emit_insn `(@insn @(label ifelse_label)))
    (compile_expr ifthen true)
    (emit_insn `(goto @(label end_label)))
    (emit_insn (label ifelse_label))
    (compile_expr ifelse true)
    (emit_insn (label end_label))
    ))

(define compile_unless (expr ifthen ifelse drop) (do
    (compile_expr `(if @expr @ifelse @ifthen) drop)
    ))

(define compile_seqand_if (lhs rhs ifthen ifelse drop) (do
    (assert "seqand_if" drop)
    (var ifend_label (mklabel))
    (compile_expr `(if @lhs (if @rhs (do @ifthen (goto @ifend_label)))) true)
    (compile_expr ifelse true)
    (emit_insn (label ifend_label))
    ))

(define compile_seqor_if (lhs rhs ifthen ifelse drop) (do
    (compile_expr `(if (&& (! @lhs) (! @rhs)) @ifelse @ifthen) drop)
    ))

(define compile_if (expr drop) (do
    (assert "if" drop)
    (var e (cadr expr))
    (var ifthen (caddr expr))
    (var ifelse (if (cdddr expr) (cadddr expr) `nop))
    (cond
        ((and (cons? e) (== `! (car e))) (compile_unless (cadr e) ifthen ifelse drop))
        ((and (cons? e) (== `&& (car e))) (compile_seqand_if (cadr e) (caddr e) ifthen ifelse drop))
        ((and (cons? e) (== `|| (car e))) (compile_seqor_if (cadr e) (caddr e) ifthen ifelse drop))
        ((comparison_expr? e) (compile_comp_if expr drop))
        (otherwise  (do
            (var ifelse_label (mklabel))
            (var end_label (mklabel))
            (compile_expr e nil)
            (emit_insn `(if_zero @(label ifelse_label)))
            (compile_expr ifthen true)
            (emit_insn `(goto @(label end_label)))
            (emit_insn (label ifelse_label))
            (compile_expr ifelse true)
            (emit_insn (label end_label))
            ))
        )))

; while (e1) e2
;
; is equal to
;
; if (e1) {
; loop:
;     e2;
;     if (e1) goto loop;
; }

(define compile_while ((_ expr body) drop) (do
    (var loop_label (mklabel))
    (push_exit_label)
    (compile_if
        `(if @expr (do
            (label @loop_label)
            @body
            (label @(car continue_labels))
            (if @expr (goto @loop_label))
            )) drop)
    (pop_exit_label)
    ))

; for v low high body
;
; is equal to
;
; v = low;
; e = high;
; if (v < e) {
; loop:
;     body;
;     incr v;
;     if (v < e) goto loop;
; }

(define compile_for ((_ it low high body) drop) (do
    (var loop_label (mklabel))
    (push_exit_label)
    (compile_block `(
        (var @it @low)
        (var end @high)
        (if (< @it end) (do
            (label @loop_label)
            @body
            (label @(car continue_labels))
            (incr @it)
            (if (< @it end) (goto @loop_label))
            ))
        ) drop)
    (pop_exit_label)
    ))

; rfor v low high body
;
; is equal to
;
; v = high-1;
; e = low;
; if (v >= e) {
; loop:
;     body;
;     decr v;
;     if (v >= e) goto loop;
; }

(define compile_rfor ((_ it low high body) drop) (do
    (var loop_label (mklabel))
    (push_exit_label)
    (compile_block `(
        (var @it (- @high 1))
        (var end @low)
        (if (>= @it end) (do
            (label @loop_label)
            @body
            (label @(car continue_labels))
            (decr @it)
            (if (>= @it end) (goto @loop_label))
            ))
        ) drop)
    (pop_exit_label)
    ))

(define compile_list_for ((_ it ls body) drop) (do
    (push_exit_label)
    (compile_block `(
            (var tmp @ls)
            (while tmp (do
                (var @it (car tmp))
                @body
                (= tmp (cdr tmp))
                ))
        ) drop)
    (pop_exit_label)
    ))

(define compile_tswitch ((_ e cases) drop) (do
    (assert "tswitch" drop)
    (var ncase (length cases))
    (var idx 0)
    (var labels ())
    (foreach c cases (do
        (if (and last? (!= (car c) `default)) (error "default case is missing"))
        (if (and (not last?) (!= (car c) idx)) (error "case " idx " is missing"))
        (push labels (mklabel))
        (incr idx)
        ))
    (set labels (reverse labels))

    (compile_expr e nil)

    (push_exit_label)
    (emit_insn `(tswitch (short @(- ncase 1))))
    (foreach l labels (do
        (emit_insn `(tswitch_ent @(label l)))
        ))
    (foreach c cases (do
        (emit_insn (label (car labels)))
        (compile_expr (cdr c) true)
        (set labels (cdr labels))
        ))
    (pop_exit_label)
    ))

(define compile_lswitch ((_ e cases) drop) (do
    (assert "lswitch" drop)
    (var ncase (length cases))
    (var val nil)
    (var labels ())
    (foreach c cases (do
        (if last?
            (do
                (if (!= (car c) `default) (error "default case is missing"))
                (+= val 1)
            )
            (do
                (if (and val (>= val (car c))) (error "case values are not ascending"))
                (= val (car c))
            ))
        (push labels `(@val . @(mklabel)))
        ))
    (= labels (reverse labels))

    (compile_expr e nil)

    (push_exit_label)
    (emit_insn `(lswitch (long @val)))
    (foreach l labels (do
        (emit_insn `(lswitch_ent (long @(car l)) @(label (cdr l))))
        ))
    (foreach c cases (do
        (emit_insn (label (cdar labels)))
        (compile_expr (cdr c) true)
        (= labels (cdr labels))
        ))
    (pop_exit_label)
    ))

(define compile_try ((_ body (_ v handler)) drop) (do
    (assert "try" drop)
    (var handler_lbl (mklabel))
    (var cont_lbl (mklabel))

    (emit_insn `(unwind_push @(label handler_lbl)))
    (compile_expr body true)
    (emit_insn `unwind_pop)
    (emit_insn `(goto @(label cont_lbl)))
    (emit_insn (label handler_lbl))
    
    (gen_storel (register_local_var v))
    (compile_expr handler true)
a   (emit_insn (label cont_lbl))
    ))

(define compile_throw ((_ e) drop) (do
    (assert "throw" drop)
    (compile_expr e nil)
    (emit_insn `throw)
    ))

(define compile_label ((_ name) drop) (do
    (assert "label" drop)
    (emit_insn (label name))
    ))

(define compile_goto ((_ name) drop) (do
    (assert "goto" drop)
    (emit_insn `(goto @(label name)))
    ))

(define compile_break (_) (do
    (var break_label (car break_labels))
    (emit_insn `(goto @(label break_label)))
    ))

(define compile_continue (_) (do
    (var continue_label (car continue_labels))
    (emit_insn `(goto @(label continue_label)))
    ))

(define compile_local_vardecl ((_ name . valopt) drop) (do
    (var idx (register_local_var name))
    (var val (if valopt (car valopt) 0))
    (compile_expr val nil)
    (gen_storel idx)
    (if (not drop) (emit_nil))
    ))

(define compile_arg_addressof   ((_ idx)) (emit_insn `(addrl (byte @(arg_offs idx)))))
(define compile_local_addressof ((_ idx)) (emit_insn `(addrl (byte @(local_offs idx)))))

(define compile_addressof ((_ sym) drop) (do
    (if (not drop) (do
        (var loc (lookup_var sym))
        (cond
            ((== `arg (car loc)) (compile_arg_addressof loc))
            ((== `local (car loc)) (compile_local_addressof loc))
            (otherwise (error "compile_var: not implemented" loc))
            )
        ))
    ))

(define compile_unboxed_array (type len) (do
    (var elem_sz (unboxed_type_size type))
    (compile_expr `(* @elem_sz @len) nil)
    (emit_insn `(plain (byte @PLAIN_OTHER)))
    ))

(define compile_boxed_array (_ len) (do
    (compile_expr len nil)
    (emit_insn `array)
    ))

(define compile_array ((_ type len) drop)
    (if (not drop)
        (if (unboxed_type? type)
            (compile_unboxed_array type len)
            (compile_boxed_array type len)
            )
        )
    )

(define compile_array_get ((_ type ary idx) drop) (do
    (var insn (assoc type
        `((uchar . array_getu8) (char . array_get8) (short . array_get16) (int . array_get32) (string . array_get32)
          (object . array_get32)
        )))
    (if (not insn) ((error "ERROR: array_get: invalid type " type)))
    (compile_expr ary drop)
    (compile_expr idx drop)
    (if (not drop) (emit_insn insn))
    ))

(define compile_array_set ((_ type ary idx val) drop) (do
    (assert "array_set" drop)
    (var insn (assoc type
        `((int . array_set32) (short . array_set16) (char . array_set8) (string . array_set32)
          (object . array_set32)
        )))
    (if (not insn) ((error "ERROR: array_set: invalid type " type)))
    (compile_expr ary nil)
    (compile_expr idx nil)
    (compile_expr val nil)
    (emit_insn insn)
    ))

(define compile_cons ((_ hd tl) drop) (do
    (compile_expr tl drop)
    (compile_expr hd drop)
    (if (not drop) (emit_insn `cons))
    ))

(define compile_struct ((_ nboxed . args) drop) (do
    (var nelem (length args))
    (set args (reverse args))
    (foreach a args (compile_expr a drop))
    (if (not drop) (emit_insn `(struct (byte @nelem) (byte @nboxed))))
    ))

(define compile_variant ((_ tag nboxed . args) drop) (do
    (var nelem (length args))
    (set args (reverse args))
    (foreach a args (compile_expr a drop))
    (if (not drop) (emit_insn `(variant (short @tag) (byte @nelem) (byte @nboxed))))
    ))

(define compile_field_get ((_ tup idx) drop) (do
    (compile_expr tup drop)
    (if (not drop) (do
        (emit_insn (cond
            ((== idx 0) `field_get0)
            ((== idx 1) `field_get1)
            ((== idx 2) `field_get2)
            ((== idx 3) `field_get3)
            ((== idx 4) `field_get4)
            ((== idx 5) `field_get5)
            (otherwise  `(field_get (byte @idx)))
            ))
        ))
    ))

(define compile_field_set ((_ tup idx val) drop) (do
    (compile_expr val nil)
    (compile_expr tup nil)
    (emit_insn (cond
        ((== idx 0) `field_set0)
        ((== idx 1) `field_set1)
        ((== idx 2) `field_set2)
        ((== idx 3) `field_set3)
        ((== idx 4) `field_set4)
        ((== idx 5) `field_set5)
        (otherwise  `(field_set (byte @idx)))
        ))
    (if (not drop) (emit_nil))
    ))

(define compile_list_at ((_ ls idx) drop) (do
    (compile_expr ls drop)
    (compile_expr idx drop)
    (if (not drop) (emit_insn `list_at))
    ))

(define compile_list_len ((_ ls) drop) (do
    (compile_expr ls drop)
    (if (not drop) (emit_insn `list_len))
    ))

(define compile_expr (expr drop) (do
    (cond
        ((== `nop expr)    (if (not drop) (emit_insn `imm_i0)))
        ((== `null expr)   (if (not drop) (emit_insn `imm_i0)))
        ((== `return expr) (do (assert "return" drop) (emit_insn `return)))
        ((== `break expr) (do (assert "break" drop) (compile_break expr)))
        ((== `continue expr) (do (assert "continue" drop) (compile_continue expr)))
        ((== `getself expr) (if (not drop) (emit_insn `self)))
        ((char? expr) (compile_int_lit (char2int expr) drop))
        ((int? expr) (compile_int_lit expr drop))
        ((string? expr) (compile_string_lit expr drop))
        ((symbol? expr) (compile_var expr drop))
        ((== `var (car expr)) (compile_local_vardecl expr drop))
        ((== `address (car expr)) (compile_addressof expr drop))
        ((== `if (car expr)) (compile_if expr drop))
        ((== `while (car expr)) (compile_while expr drop))
        ((== `for (car expr)) (compile_for expr drop))
        ((== `rfor (car expr)) (compile_rfor expr drop))
        ((== `lfor (car expr)) (compile_list_for expr drop))
        ((== `tswitch (car expr)) (compile_tswitch expr drop))
        ((== `lswitch (car expr)) (compile_lswitch expr drop))
        ((and (== `try (car expr)) (== `catch (caaddr expr))) (compile_try expr drop))
        ((== `throw (car expr)) (compile_throw expr drop))
        ((== `label (car expr)) (compile_label expr drop))
        ((== `goto (car expr)) (compile_goto expr drop))
        ((== `do (car expr)) (compile_block (cdr expr) drop))
        ((== `exit (car expr)) (compile_exit expr drop))
        ((== `return (car expr)) (compile_return expr drop))
        ((== `incr (car expr)) (compile_incrdecr expr drop))
        ((== `decr (car expr)) (compile_incrdecr expr drop))
        ((== `array (car expr)) (compile_array expr drop))
        ((== `array_get (car expr)) (compile_array_get expr drop))
        ((== `array_set (car expr)) (compile_array_set expr drop))
        ((== `load (car expr)) (compile_array_get expr drop))
        ((== `store (car expr)) (compile_array_set expr drop))
        ((== `cons (car expr)) (compile_cons expr drop))
        ((== `struct (car expr)) (compile_struct expr drop))
        ((== `variant (car expr)) (compile_variant expr drop))
        ((== `field_get (car expr)) (compile_field_get expr drop))
        ((== `field_set (car expr)) (compile_field_set expr drop))
        ((== `get (car expr)) (compile_field_get `(field_get @(cadr expr) 0) drop))
        ((== `set (car expr)) (compile_field_set `(field_set @(cadr expr) 0 @(caddr expr)) drop))
        ((== `car (car expr)) (compile_field_get `(field_get @(cadr expr) 0) drop))
        ((== `cdr (car expr)) (compile_field_get `(field_get @(cadr expr) 1) drop))
        ((== `caar (car expr)) (compile_expr `(car (car @(cadr expr))) drop))
        ((== `caadr (car expr)) (compile_expr `(car (car (cdr @(cadr expr)))) drop))
        ((== `cadar (car expr)) (compile_expr `(car (cdr (car @(cadr expr)))) drop))
        ((== `caaar (car expr)) (compile_expr `(car (car (car @(cadr expr)))) drop))
        ((== `caaadr (car expr)) (compile_expr `(car (car (car (cdr @(cadr expr))))) drop))
        ((== `cdar (car expr)) (compile_expr `(cdr (car @(cadr expr))) drop))
        ((== `cdaar (car expr)) (compile_expr `(cdr (car (car @(cadr expr)))) drop))
        ((== `cadr (car expr)) (compile_expr `(car (cdr @(cadr expr))) drop))
        ((== `caddr (car expr)) (compile_expr `(car (cdr (cdr @(cadr expr)))) drop))
        ((== `cddr (car expr)) (compile_expr `(cdr (cdr @(cadr expr))) drop))
        ((== `setcar (car expr)) (compile_field_set `(field_set @(cadr expr) 0 @(caddr expr)) drop))
        ((== `setcdr (car expr)) (compile_field_set `(field_set @(cadr expr) 1 @(caddr expr)) drop))
        ((== `list_at (car expr)) (compile_list_at expr drop))
        ((== `list_len (car expr)) (compile_list_len expr drop))
        ((== `box (car expr)) (compile_expr `(+ (<< @(cadr expr) 1) 1) drop))
        ((== `unbox (car expr)) (compile_expr `(>> @(cadr expr) 1) drop))
        ((== `runcode (car expr)) (compile_runcode expr drop))
        ((== `runcode_with_self (car expr)) (compile_runcode_with_self expr drop))
        ((== `ludiv (car expr)) (compile_ludiv expr drop))
        ((and (== 3 (length expr)) (binary_operator? (car expr)))
            (compile_binexpr expr drop))
        ((and (== 2 (length expr)) (unary_operator? (car expr)))
            (compile_unexpr expr drop))
        ((and (== 3 (length expr)) (assignment_operator? (car expr)))
            (compile_assign expr drop))
        ((and (cons? expr) (conditional_operator? (car expr)))
            (compile_conditional expr drop))
        (otherwise (compile_call expr drop))
        )))

(define compile_block (block drop) (do
    (vtable_push)
    (foreach e block
        (if last?
            (compile_expr e drop)
            (compile_expr e true)
            )
        )
    (vtable_pop)
    ))

(define compile_fundecl ((_ name params body) export) (do
    (= current_fun name)

    (add_var name `(fun @name))
    (vtable_push)
    (reset_insn_seq)
    (set num_local_var 0)
    (var pidx 0) ; parameter index
    (foreach p params (do
        (add_var p `(arg @pidx))
        (incr pidx)
        ))

    (compile_block body true)
    (if (or (nil? insn_seq) (and (!= (last_insn) `return) (!= (last_insn) `ireturn)))
        (emit_insn `return)
        )

    (var insn_seq (get_insn_seq))
    (if (> num_local_var 0)
        (set insn_seq (cons `(allocate (byte @num_local_var)) insn_seq)))
    (vtable_pop)

    (= current_fun nil)

    `(function @export @name @insn_seq)
    ))

; (array type name length)
; (array type name length value_list)
; (array type name value_list)
(define compile_arraydecl ((_ type name . args) export) (do
    (var arrlen (if (int? (car args)) (car args) (length (car args))))
    (var value_list (if (cons? (car args)) (car args)
        (if (nil? (cdr args)) nil (cadr args))
        ))

    ; XXX: temporal implementation
    (if (and value_list (== `string type))
        (do
            (add_var name `(object @name))

            (reset_insn_seq)
            (compile_expr `(= @name (array string @arrlen)) true)
            (var i 0)
            (foreach s value_list (do
                (compile_expr `(array_set string @name @i @s) true)
                (+= i 1)
            ))
            (var insn_seq (get_insn_seq))
            (push_startup_code insn_seq)
            `(object @export @name)
        )
        (do
            (add_var name `(value void* @name))
            `((array @type @arrlen) @export @name @value_list)
        ))
    ))

(define compile_import ((_ file)) (do
    (= file (++ file ".rlo"))
    (var ichan (open_in file))
    (var magic (getint ichan))
    (if (!= magic OBJ_MAGIC) (error "invalid file: " file))
    (getint ichan) ; nref
    (var vsize (getint ichan))
    (upto i 1 vsize (getchar ichan)) ; values
    (var codelen (getint ichan))
    (upto i 1 codelen (getchar ichan)) ; code

    ; relocate table
    (var nent (getint ichan))
    (upto i 1 nent (do
        (var type (getchar ichan))
        (if (and (!= type RELOC_SVALUE) (!= type RELOC_SOBJECT)) (getstr ichan))
        (var naddr (getint ichan))
        (upto j 1 naddr (getint ichan))
        ))

    ; load export table
    (= nent (getint ichan))
    (upto i 1 nent (do
        (var type (getchar ichan))
        (if (>= type 0) (do
            (var name (tosym (getstr ichan)))
            (getint ichan) ; skip addr
            (= type (cond
                ((== type RELOC_FUNCTION)   `fun)
                ((== type RELOC_VALUE)      `value)
                ((== type RELOC_OBJECT)     `object)
                (otherwise  (error "compile_import: not reachable here" type))
                ))
            (compile_extern `(extern @type @name))
            ))
        ))
    (close_in ichan)
    ))

(define compile_extern ((_ type name)) (do
    (cond
        ((== `fun type) (add_var name `(extfun @name)))
        ((== `string type) (add_var name `(extvalue string @name)))
        ((== `object type) (add_var name `(extobject @name)))
        ((== `value type) (add_var name `(extvalue int @name)))
        (otherwise (error "compile_extern: not implemented"))
        )
    nil
    ))

(define compile_object_decl (export name value) (do
    (add_var name `(object @name))
    (reset_insn_seq)
    (compile_expr value nil)
    (emit_insn `(storeo (object @name)))
    (var insn_seq (get_insn_seq))
    (push_startup_code insn_seq)
    `(object @export @name)
    ))

(define compile_value_decl (export name value) (do
    (var type (cond
        ((char? value) `char)
        ((int? value) `int)
        ((string? value) `string)
        (otherwise (error "compile_value_decl: not implemented"))
        ))
    (add_var name `(value @type @name))
    `(@type @export @name @value)
    ))

(define is_object (value)
    (cond
        ((== `null value) true)
        ((cons? value) true)
        (otherwise nil)
        ))

(define compile_vardecl ((_ name value) export)
    (if (is_object value)
        (compile_object_decl export name value)
        (compile_value_decl export name value)
    ))

(define compile_export ((_ . decl)) (compile_decl decl true))

(define compile_decl (decl export)
    (cond
        ((== `fun (car decl)) (compile_fundecl decl export))
        ((== `array (car decl)) (compile_arraydecl decl export))
        ((== `extern (car decl)) (compile_extern decl))
        ((== `import (car decl)) (compile_import decl))
        ((== `export (car decl)) (compile_export decl))
        (otherwise (compile_vardecl decl export))
        ))

(define extern_primitives () (do
    (compile_extern `(extern object stdin))
    (compile_extern `(extern object stdout))
    (compile_extern `(extern object stderr))
    ))

(define compile_main (code) (do
    (var asm_code ())

    (extern_primitives)
    (foreach decl code (do
        (var asm (compile_decl decl nil))
        (if asm (push asm_code asm))
        ))
    (append string_decls (reverse asm_code))
    ))

(define compile (mode code) (do
    (vtable_push)

    ; register primitive functions
    (foreach ent prim_table (add_var (car ent) `(prim @(cadr ent))))

    (var asm_code (compile_main code))
    (if (== mode `executable)
        (do
            (var startup_func (gen_startup_func))
            (set asm_code (cons startup_func asm_code))
        )
        (do
            (var init_func (gen_init_func))
            (set asm_code (cons init_func asm_code))
        ))


    (vtable_pop)
    (assemble mode asm_code)
    ))
