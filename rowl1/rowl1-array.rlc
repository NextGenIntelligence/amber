;
; rowl - 1st generation
; Copyright (C) 2012 nineties
;
; $Id: rowl1-array.rlc 2013-01-27 23:40:19 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-module")
(import "rowl1-compile")
(import "rowl1-assemble")
(import "rowl1-error")

(extern object current_loc)
(extern object current_mod)

(fun index_out_of_range (ary idx) (
    (throw (out_of_range current_loc ary (box idx)))
    ))

(export fun ary_new () (
    (var capa 10)
    (var buf (allocate_array capa))
    (for i 0 capa (do
        (array_set object buf i @C_UNDEF)
        ))
    (return (variant @ArrayE 1 buf 0 capa))
    ))

(export fun ary_new2 (len) (
    (= len (unbox len))
    (var buf (allocate_array len))
    (for i 0 len (do
        (array_set object buf i @C_UNDEF)
        ))
    (return (variant @ArrayE 1 buf len len))
    ))

(export fun ary_new3 (len v) (
    (= len (unbox len))
    (var buf (allocate_array len))
    (for i 0 len (do
        (array_set object buf i v)
        ))
    (return (variant @ArrayE 1 buf len len))
    ))

(export fun array_size (ary) (
    (return (field_get ary 2))
    ))

(fun ary_size (ary) (
    (return (box (field_get ary 2)))
    ))

(fun ary_resize (ary new_size) (
    (if (< new_size 0)
        (throw (invalid_argument current_loc "size of array must not be negative"))  
        )
    (var buf (field_get ary 1))
    (var size (field_get ary 2))
    (var capa (field_get ary 3))
    (if (<= new_size size) (do
        (for i new_size size (array_set object buf i @C_UNDEF))
        (field_set ary 2 new_size)
        (return ary)
        ))
    (if (<= new_size capa) (do
        (field_set ary 2 new_size)
        (return ary)
        ))
    (var new_buf (allocate_array new_size))
    (memcpy new_buf buf (* 4 size))
    (for i size new_size (array_set object new_buf i @C_UNDEF))
    (field_set ary 1 new_buf)
    (field_set ary 2 new_size)
    (field_set ary 3 new_size)
    (return ary)
    ))

(export fun array_at (ary i) (
    (var size (array_size ary))
    (if (< i size) (return (array_get object (field_get ary 1) i)))
    (index_out_of_range ary i)
    ))

(fun ary_at (ary i) (
    (return (array_at ary (unbox i)))
    ))

(export fun array_store (ary i v) (
    (var size (array_size ary))
    (if (< i size) (do
        (array_set object (field_get ary 1) i v)
        (return v)
        ))
    (ary_resize ary (+ i 1))
    (array_set object (field_get ary 1) i v)
    (return v)
    ))

(export fun ary_store (ary i v) (
    (return (array_store ary (unbox i) v))
    ))

(export fun ary_push (ary v) (
    (ary_store ary (ary_size ary) v)
    (return ary)
    ))

(export fun array_restof (ary i) (
    (var ls 0)
    (var size (field_get ary 2))
    (var buf (field_get ary 1))
    (rfor j i size (do
        (= ls (cons (array_get object buf j) ls))
        ))
    (return ls)
    ))

(export fun ary_to_list (ary) (
    (var ls 0)
    (var size (field_get ary 2))
    (var buf (field_get ary 1))
    (rfor i 0 size (do
        (= ls (cons (array_get object buf i) ls))
        ))
    (return ls)
    ))

(export fun list_to_ary (ls) (
    (var size (list_len ls))
    (var buf (allocate_array size))
    (for i 0 size (do
        (array_set object buf i (car ls))
        (= ls (cdr ls))
        ))
    (return (variant @ArrayE 1 buf size size))
    ))

(export fun setup_array (std) (
    (var ModArray (find_module no_loc std (to_sym "Array") @TRUE))
    (var ModList  (find_module no_loc std (to_sym "List") @TRUE))
    (add_function0 ModArray (to_sym "new") ary_new 0)
    (add_function1 ModArray (to_sym "new") intT ary_new2 0)
    (add_function2 ModArray (to_sym "new") intT DontCare ary_new3 0)
    (add_function1 ModArray (to_sym "from_list") listT list_to_ary 0)
    (add_function1 ModList  (to_sym "from_array") arrayT ary_to_list 0)

    (add_function1 std (to_sym "length") arrayT ary_size 0)
    (add_function1 std (to_sym "size") arrayT ary_size 0)
    (add_function2 std (to_sym "at") arrayT intT ary_at 0)
    (add_function3 std (to_sym "store") arrayT intT DontCare ary_store 0)
    (add_function2 std (to_sym "push") arrayT DontCare ary_push 0)

    ))

    ))
