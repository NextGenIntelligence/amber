;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: vm-prim-vector.rlc 2010-10-21 20:39:24 nineties $
;

(import "stdlib")
(import "vm-compile")

(define vector_code_gen (name esize alloc getter setter) `(

(fun @(s++ `make_ name `_with_capa) (size capa) (
    (void* buf (@alloc capa))
    (memset buf 0 (* @esize capa))
    (void* tup (allocate_tuple 3 1))
    (set tup 0 buf)
    (set tup 1 size)
    (set tup 2 capa)
    (return tup)
    ))

(export @(s++ `prim_make_ name))
(fun @(s++ `prim_make_ name) (size) (
    (if (!= size 0)
        (return (@(s++ `make_ name `_with_capa) size size))
        (return (@(s++ `make_ name `_with_capa) 0 10))
        )
    ))

(export @(s++ `prim_ name `_size))
(fun @(s++ `prim_ name `_size) (vec) (
    (return (get vec 1))
    ))

(export @(s++ `prim_ name `_ptr))
(fun @(s++ `prim_ name `_ptr) (vec) (
    (return (get vec 0))
    ))

(export @(s++ `prim_ name `_at))
(fun @(s++ `prim_ name `_at) (vec idx) (
    (return (@getter (get vec 0) idx))
    ))

(export @(s++ `prim_ name `_put))
(fun @(s++ `prim_ name `_put) (vec idx val) (
    (@setter (get vec 0) idx val)
    ))

(export @(s++ `prim_ name `_reserve))
(fun @(s++ `prim_ name `_reserve) (vec capa) (
    (if (< (get vec 2) capa) (
        (void* new_buf (@alloc capa))
        (prim_memcpy new_buf (get vec 0) (* @esize (get vec 1)))
        (set vec 0 new_buf)
        (set vec 2 capa)
        ))
    ))

(export @(s++ `prim_ name `_resize))
(fun @(s++ `prim_ name `_resize) (vec new_size) (
    (if (> new_size (get vec 2))
        (
            (@(s++ `prim_ name `_reserve) vec new_size)
        )
        (
            (void* ptr (+ (get vec 0) (* @esize new_size)))
            (prim_memset ptr 0 (* @esize (- (get vec 1) new_size)))
        ))
    (set vec 1 new_size)
    ))

(export @(s++ `prim_ name `_pushback))
(fun @(s++ `prim_ name `_pushback) (vec value) (
    (if (== (get vec 1) (get vec 2)) (
        (@(s++ `prim_ name `_reserve) vec (* 2 (get vec 2)))
        ))
    (int sz (get vec 1))
    (@(s++ `prim_ name `_put) vec sz value)
    (set vec 1 (+ sz 1))
    ))

))

(vtable_push)
(compile (vector_code_gen `vector  4 `allocate_array  `get `set))
(compile (vector_code_gen `ivector 4 `allocate_iarray `get `set))
(compile (vector_code_gen `cvector 1 `allocate_carray `get8 `set8))
(vtable_pop)
