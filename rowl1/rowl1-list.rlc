;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-list.rlc 2014-04-05 21:51:16 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-object")
(import "rowl1-compile")
(import "rowl1-assemble")
(import "rowl1-error")
(import "rowl1-table")

(extern object global)
(extern fun tuple2)
(extern fun tuple_at)

(fun index_out_of_range (list idx) (
    (throw (out_of_range list (box idx)))
    ))

(export fun list_at_check (ls i) (
    (var orig ls)
    (var j i)
    (while (&& (> j 0) ls) (do
        (-= j 1)
        (= ls (cdr ls))
        ))
    (if (! ls) (index_out_of_range orig i))
    (return (car ls))
    ))

(fun ls_at (ls i) (
    (if (! @(UFIX i)) (throw (invalid_argument (string "invalid index") i)))
    (return (list_at_check ls (unbox i)))
    ))

(export fun list_store_check (ls i v) (
    (var orig ls)
    (var j i)
    (while (&& (> j 0) ls) (do
        (-= j 1)
        (= ls (cdr ls))
        ))
    (if (! ls) (index_out_of_range orig i))
    (setcar ls v)
    (return v)
    ))

(fun ls_store (ls i v) (
    (if (! @(UFIX i)) (throw (invalid_argument (string "invalid index") i)))
    (return (list_store_check ls (unbox i) v))
    ))

(fun ls_length (ls) (
    (return (box (list_len ls)))
    ))

(export fun ls_equal (a b) (
    (var eql (lookup_func global (to_sym "equal?")))
    (while (&& a b) (do
        (if (== (runcode eql (car a) (car b)) @C_FALSE) (return @C_FALSE))
        (= a (cdr a))
        (= b (cdr b))
        ))
    (if (|| a b)
        (return @C_FALSE)
        (return @C_TRUE)
        )
    ))

(fun ls_cons (a b) (
    (return (cons a b))
    ))
(fun ls_car (a) (
    (if (! a) (index_out_of_range a 0))
    (return (car a))
    ))
(fun ls_cdr (a) (
    (if (! a) (index_out_of_range a 1))
    (return (cdr a))
    ))

(fun ls_map (f ls) (
    (var new_ls 0)
    (var code (get_bytecode f))
    (while ls (do
        (= new_ls (cons (runcode code (car ls)) new_ls))
        (= ls (cdr ls))
        ))
    (return (list_reverse new_ls))
    ))

(fun ls_map_wi (f ls) (
    (var new_ls 0)
    (var idx 0)
    (var code (get_bytecode f))
    (while ls (do
        (= new_ls (cons (runcode code (car ls) (box idx)) new_ls))
        (+= idx 1)
        (= ls (cdr ls))
        ))
    (return (list_reverse new_ls))
    ))

(fun ls_diff (ls1 ls2) (
    (var tbl (table_new))
    (while ls2 (do
        (table_store tbl (car ls2) @C_TRUE)
        (= ls2 (cdr ls2))
        ))
    (var new 0)
    (while ls1 (do
        (if (!= (table_at tbl (car ls1)) @C_TRUE) 
            (= new (cons (car ls1) new))
            )
        (= ls1 (cdr ls1))
        ))
    (return (list_reverse new))
    ))

(fun ls_foreach (f ls) (
    (var code (get_bytecode f))
    (while ls (do
        (runcode code (car ls))
        (= ls (cdr ls))
        ))
    (return @C_NIL)
    ))

(fun ls_include (v ls) (
    (var eql (lookup_func global (to_sym "equal?")))
    (while ls (do
        (if (!= (runcode eql v (car ls)) @C_FALSE)
            (return @C_TRUE)
            )
        (= ls (cdr ls))
        ))
    (return @C_FALSE)
    ))

(fun ls_assoc (ls x) (
    (var ls_ ls)
    (var eql (lookup_func global (to_sym "equal?")))
    (while ls (do
        (var t (car ls))
        (if (!= (node_type t) @TupleE)
            (throw (invalid_argument (string "Not a list of pairs") ls_))
            )
        (if (!= (runcode eql (tuple_at t 0) x) @C_FALSE)
            (return (tuple_at t 1))
            )
        (= ls (cdr ls))
        ))
    (return @C_NIL)
    ))

(fun assoc_set (eql ls x v) (
    (if (! ls) (return (list1 (tuple2 x v))))
    (var t (car ls))
    (if (|| (!= (node_type t) @TupleE) (!= (node_size t) 2))
        (throw (invalid_argument (string "Not a pair") t))
        )
    (if (!= (runcode eql (tuple_at t 0) x) @C_FALSE)
        (return (cons (tuple2 x v) (cdr ls)))
        (return (cons (car ls) (assoc_set eql (cdr ls) x v)))
        )
    ))

(fun ls_assoc_set (ls x v) (
    (var ls_ ls)
    (var eql (lookup_func global (to_sym "equal?")))
    (return (assoc_set eql ls x v))
    ))

(fun ls_insert_uniq (v ls) (
    (if (!= (ls_include v ls) @C_FALSE) (return ls))
    (return (cons v ls))
    ))

(fun ls_flatten (ls) (
    (if (! ls) (return 0))
    (var d (car ls))
    (if (== (node_type d) @ListE)
        (return (list_append (ls_flatten d) (ls_flatten (cdr ls))))
        (return (cons d (ls_flatten (cdr ls))))
        )
    ))

(fun ls_join (ls1 ls2) (
    (while ls1 (do
        (= ls2 (ls_insert_uniq (car ls1) ls2))
        (= ls1 (cdr ls1))
        ))
    (return ls2)
    ))

(fun ls_foldl (f v ls) (
    (if (! ls) (return v))
    (var code (get_bytecode f))
    (while ls (do
        (= v (runcode code v (car ls)))
        (= ls (cdr ls))
        ))
    (return v)
    ))

(fun ls_foldl1 (f ls) (
    (if (! ls)
        (throw (invalid_argument (string "empty list") ls))
        )
    (var v (car ls))
    (= ls (cdr ls))
    (var code (get_bytecode f))
    (while ls (do
        (= v (runcode code v (car ls)))
        (= ls (cdr ls))
        ))
    (return v)
    ))

(fun foldr (ls v code) (
    (if (! ls) (return v))
    (return (runcode code (car ls) (foldr (cdr ls) v code)))
    ))

(fun ls_foldr (f ls v) (
    (return (foldr ls v (get_bytecode f)))
    ))

(fun foldr1 (ls code) (
    (if (! (cdr ls))
        (return (car ls))
        (return (runcode code (car ls) (foldr1 (cdr ls) code)))
        )
    ))

(fun ls_foldr1 (f ls) (
    (if (! ls)
        (throw (invalid_argument (string "empty list") ls))
        )
    (var code (get_bytecode f))
    (var v (foldr1 ls code))
    (return v)
    ))

(fun ls_zip (a b) (
    (var new_ls 0)
    (while (&& a b) (do
        (= new_ls (cons (tuple2 (car a) (car b)) new_ls))
        (= a (cdr a))
        (= b (cdr b))
        ))
    (return (list_reverse new_ls))
    ))

(fun ls_unzip (ls) (
    (var left 0)
    (var right 0)
    (while ls (do
        (var t (car ls))
        (if (!= (node_type t) @TupleE)
            (throw (invalid_argument (string "not a pair") t)))
        (= left (cons (tuple_at t 0) left))
        (= right (cons (tuple_at t 1) right))
        (= ls (cdr ls))
        ))
    (return (tuple2 (list_reverse left) (list_reverse right)))
    ))

(fun ls_rem_ (ls a eql) (
    (if (! ls) (return 0))
    (if (!= (runcode eql (car ls) a) @C_FALSE)
        (return (cdr ls))
        (return (cons (car ls) (ls_rem_ (cdr ls) a eql)))
        )
    ))
; Remove elements of b from a, if a has multiple elements only the first one 
; will be removed. For example  ls_sub([1,0,1],[1,2]) == [0,1]
(fun ls_sub_ (a b eql) (
    (if (! b) (return a))
    (return (ls_sub_ (ls_rem_ a (car b) eql) (cdr b) eql))
    ))

(fun ls_sub (a b) (
    (var eql (lookup_func global (to_sym "equal?")))
    (return (ls_sub_ a b eql))
    ))

(fun ls_weave (a ls) (
    (var ret 0)
    (while ls (do
        (= ret (cons (car ls) ret))
        (= ls (cdr ls))
        (if ls (= ret (cons a ret)))
        ))
    (return (list_reverse ret))
    ))

(export fun ls_hash (ls) (
    (var hash (lookup_func global (to_sym "hash")))
    (var h (hashnext 0 (field_get List @SymbolIndex)))
    (while ls (do
        (= h (hashnext h (unbox (runcode hash (car ls)))))
        (= ls (cdr ls))
        ))
    (return (box h))
    ))

(fun merge (ls1 ls2 cmp) (
    (if (! ls2) (return ls1))
    (if (! ls1) (return ls2))
    (var result 0)
    (while @TRUE (do
        (if (! ls1) break)
        (if (! ls2) break)
        (var r (runcode cmp (car ls1) (car ls2)))
        (if (! (& r 1))
            (throw (logic_error (string "Comparison function must returns integer.")))
            )
        (= r (unbox r))
        (if (<= r 0)
            (do
                (= result (cons (car ls1) result))
                (= ls1 (cdr ls1))
            )
            (do
                (= result (cons (car ls2) result))
                (= ls2 (cdr ls2))
            ))
        ))
    (while ls1 (do
        (= result (cons (car ls1) result))
        (= ls1 (cdr ls1))
        ))
    (while ls2 (do
        (= result (cons (car ls2) result))
        (= ls2 (cdr ls2))
        ))
    (return (list_reverse result))
    ))

(fun merge_sort (head guard cmp) (
    (if (! head) (return 0))
    (if (== (cdr head) guard) (return (list1 (car head))))

    ; find middle point.
    (var left head)
    (var right head)
    (while (!= right guard) (do
        (= left (cdr left))
        (= right (cdr right))
        (if (== right guard) break)
        (= right (cdr right))
        ))
    (return (merge
        (merge_sort head left cmp)
        (merge_sort left right cmp)
        cmp))
    ))

(fun ls_sort (ls cmp) (
    (= cmp (get_bytecode cmp))
    (return (merge_sort ls 0 cmp))
    ))

(export fun setup_list (mod) (
    (add_function2 mod (to_sym "list_cons") DontCare listT ls_cons 0)
    (add_function1 mod (to_sym "list_first") listT ls_car 0)
    (add_function1 mod (to_sym "list_rest") listT ls_cdr 0)
    (add_function1 mod (to_sym "list_length") listT ls_length 0)
    (add_function2 mod (to_sym "list_at") listT intT ls_at 0)
    (add_function3 mod (to_sym "list_store") listT intT DontCare ls_store 0)
    (add_function1 mod (to_sym "list_reverse") listT list_reverse 0)
    (add_function2 mod (to_sym "list_append") listT listT list_append 0)
    (add_function2 mod (to_sym "list_diff") listT listT ls_diff 0)
    (add_function2 mod (to_sym "list_map") funT listT ls_map 0)
    (add_function2 mod (to_sym "list_map_with_index") funT listT ls_map_wi 0)
    (add_function2 mod (to_sym "list_foreach") funT listT ls_foreach 0)
    (add_function2 mod (to_sym "list_include?") DontCare listT ls_include 0)
    (add_function2 mod (to_sym "list_assoc") listT DontCare ls_assoc 0)
    (add_function3 mod (to_sym "list_assoc_set") listT DontCare DontCare ls_assoc_set 0)
    (add_function2 mod (to_sym "list_insert_unique") DontCare listT ls_insert_uniq 0)
    (add_function1 mod (to_sym "list_flatten") listT ls_flatten 0)
    (add_function2 mod (to_sym "list_join") listT listT ls_join 0)
    (add_function3 mod (to_sym "list_foldl") funT DontCare listT ls_foldl 0)
    (add_function2 mod (to_sym "list_foldl1") funT listT ls_foldl1 0)
    (add_function3 mod (to_sym "list_foldr") funT listT DontCare ls_foldr 0)
    (add_function2 mod (to_sym "list_foldr1") funT listT ls_foldr1 0)
    (add_function2 mod (to_sym "list_subtract") listT listT ls_sub 0)
    (add_function2 mod (to_sym "list_weave") DontCare listT ls_weave 0)
    (add_function2 mod (to_sym "list_sort") listT funT ls_sort 0)
    ))

    ))
