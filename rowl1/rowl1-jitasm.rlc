;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl1-jitasm.rlc 2010-11-03 21:54:49 nineties $
;

; -- Just in time assembler
; (byte code (cvector), labels (ivector), replaces (list of repl info), label indx counter)
; -- repl info
; (pointer to the next info, index of the labels, offset of operand)

(import "rlvm-compile")


(var code-base `(

(export fun make_jitassembler (size_hint) (
    (return (tuple 3 (make_cvector_with_capa 0 size_hint) (make_ivector 0) 0 0))
    ))

(export fun get_code (c) (
    (if (tuple_at c 2) (replace_labels c))
    (return (tuple_at c 0))
    ))

(export fun get_code_ptr (c) (
    (return (cvector_ptr (get_code c)))
    ))

(fun get_address (c) (
    (return (cvector_size (tuple_at c 0)))
    ))

(export fun put_code (c cvec) (
    (for i 0 (cvector_size cvec) (do
        (emit_byte c (cvector_at cvec i))
        ))
    ))

(export fun put_imm_int (c value) (
    (if (== value -1) (do
        (put_imm_im1 c)
        return
        ))
    (tswitch value (
        (0 . (do (put_imm_i0 c) return))
        (1 . (do (put_imm_i1 c) return))
        (2 . (do (put_imm_i2 c) return))
        (3 . (do (put_imm_i3 c) return))
        (4 . (do (put_imm_i4 c) return))
        (5 . (do (put_imm_i5 c) return))
        (default . break)
        ))
    (if (&& (<= -32768 value) (<= value 32767))
        (put_imm_int16 c value)
        (put_imm_int32 c value)
        )
    ))

(export fun put_arg (c idx) (
    (tswitch idx (
        (0 . (do (put_arg0 c) return))
        (1 . (do (put_arg1 c) return))
        (2 . (do (put_arg2 c) return))
        (3 . (do (put_arg3 c) return))
        (4 . (do (put_arg4 c) return))
        (default . (do
            (put_loadl c (+ (* 4 idx) 8))
            return
            ))
        ))
    ))

(fun emit_byte (c v) (
    (cvector_pushback (tuple_at c 0) v)
    ))

(fun emit_short (c v) (
    (var vec (tuple_at c 0))
    (cvector_pushback vec (& v 0xff))
    (cvector_pushback vec (>> v 8))
    ))

(fun emit_int (c v) (
    (var vec (tuple_at c 0))
    (cvector_pushback vec (& v 0xff))
    (cvector_pushback vec (& (>> v 8) 0xff))
    (cvector_pushback vec (& (>> v 16) 0xff))
    (cvector_pushback vec (& (>> v 24) 0xff))
    ))

(fun emit_prim (c v) (
    (emit_short c (& v 0xffff))
    ))

(export fun fresh_label (c) (
    (var n (tuple_at c 3))
    (tuple_set c 3 (+ n 1))
    (ivector_pushback (tuple_at c 1) -1)
    (return n)
    ))

(export fun set_label (c v) (
    (var addr (get_address c))
    (ivector_put (tuple_at c 1) v addr)
    ))

(export fun emit_label (c v) (
    (var offs (get_address c))
    (var info (tuple 1 (tuple_at c 2) v offs))
    (tuple_set c 2 info)
    (emit_short c 0)
    ))

(fun replace_labels (c) (
    (var repls (tuple_at c 2))
    (var vec (tuple_at c 0))
    (var labels (tuple_at c 1))
    (while repls (do
        (var label (tuple_at repls 1))
        (var offs  (tuple_at repls 2))
        (if (>= label (ivector_size labels)) (error "undefined label"))
        (var addr (ivector_at labels label))
        (-= addr (- offs 1))
        (cvector_put vec offs (& addr 0xff))
        (cvector_put vec (+ offs 1) (>> addr 8))
        (= repls (tuple_at repls 0))
        ))
    (tuple_set c 2 0)
    ))

    ))

(var put_func `(
    (byte   . emit_byte)
    (short  . emit_short)
    (ushort . emit_short)
    (int    . emit_int)
    (prim   . emit_prim)
    (addr   . emit_label)
    ))

(var code 0)
(foreach i vm_instructions (do
    (var args `(c))
    (var body `((emit_byte c @code)))
    (var name (symbol2s (car i)))
    (var operands (cadr i))
    (var j 0)
    (foreach opd operands (do
        (var arg (s++ `arg j))
        (push body `(@(assoc opd put_func) c @arg))
        (push args arg)
        (incr j)
        ))
    (= body (reverse body))
    (= args (reverse args))
    (push code-base `(export fun @(s++ `put_ name) @args @body))
    (incr code)
    ))

(compile `object code-base)
