;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: vm-eval.rlc 2010-12-16 12:47:31 nineties $
;

; rowlVM register usage
;   %eax, %ecx : general purpose register
;   %ebx       : program counter
;   %edx       : zero register
;   %esi       : stack pointer
;   %edi       : base pointer

(import "stdlib")
(import "vm-compile")
(import "vm-insn")
(import "vm-prim-inc")

(eprintln "# of VM instructions = " (length vm_instructions))

; instructions
(var insn_entries ())
(foreach e vm_instructions (do
    (var label (mklabel (car e)))
    (var len (insn_length (cadr e)))
    (var code (cadddr e))
    (if (caddr e) (set code (append code `((vmsucc @len) (vmfetch)))))
    (set insn_entries (cons `(@label @code) insn_entries))
    ))
(set insn_entries (reverse insn_entries))

(define emit_vmpush ((_ val) _ _) (do
    (emit "cmpl %esi, stack")
    (emit "jne 1f")
    (emit "call stack_over_flow")
    (emit "1:")
    (emit "subl" 4 `%esi)
    (movl val `(deref %esi 0))
    ))

(define emit_vmpop ((_ reg) _ _) (do
    (movl `(deref %esi 0) reg)
    (emit "addl" 4 `%esi)
    ))

(define emit_vmsucc ((_ len) _ _)
    (if (== len 1) (emit "incl" `%ebx) (emit "addl" len `%ebx))
    )

(define emit_vmfetch ((_) _ _) (do
    (emit "movzbl" `(deref %ebx 0) `%eax)
    (emit "jmp *insn_table(,%eax,4)")
    ))

(define emit_vmubyte ((_ offs reg) _ _) (do
    (emit "movzbl" `(deref %ebx @offs) reg)
    ))

(define emit_vmsbyte ((_ offs reg) _ _) (do
    (emit "movsbl" `(deref %ebx @offs) reg)
    ))

(define emit_vmushort ((_ offs reg) _ _) (do
    (emit "movzwl" `(deref %ebx @offs) reg)
    ))

(define emit_vmsshort ((_ offs reg) _ _) (do
    (emit "movswl" `(deref %ebx @offs) reg)
    ))

(define emit_vmint ((_ offs reg) _ _) (do
    (emit "movl" `(deref %ebx @offs) reg)
    ))

; switch implementation using table jump
(define emit_vmtable ((_ tblname body) _ ret) (do
    ; table area
    (change_area `rodata)
    (emit ".align 4")
    (emit ".align 4")
    (print_label tblname)
    (foreach case body (emit ".long" (car case)))

    ; code area
    (push_break_point)
    (change_area `text)
    (foreach case body (do
        (print_label (car case))
        (emit_block (cadr case) nil)
        ))
    (emit_break_point)
    (pop_break_point)

    (if ret (emit_return `(return) nil nil))
    ))

(define emit_vmbin ((_ asmcode) _ ret) (do
    (emit_expr `(vmpop %eax) nil nil)
    (emit_expr `(asm @asmcode " %eax, (%esi)") nil ret)
    ))

(define emit_vmsave ((_) _ _) (do
    (pushl `%ebx)
    ))

(define emit_vmrestore ((_) _ _) (do
    (popl `%ebx)
    (movl 0 `%edx)
    ))

(add_new_expr `vmpush    emit_vmpush)
(add_new_expr `vmpop     emit_vmpop)
(add_new_expr `vmsucc    emit_vmsucc)
(add_new_expr `vmfetch   emit_vmfetch)
(add_new_expr `vmubyte   emit_vmubyte)
(add_new_expr `vmsbyte   emit_vmsbyte)
(add_new_expr `vmushort  emit_vmushort)
(add_new_expr `vmsshort  emit_vmsshort)
(add_new_expr `vmint     emit_vmint)
(add_new_expr `vmtable   emit_vmtable)
(add_new_expr `vmbin     emit_vmbin)
(add_new_expr `vmsave    emit_vmsave)
(add_new_expr `vmrestore emit_vmrestore)

(var vm-eval-code `(

(export stack_size)
(export stack)

(int  stack_size) ; in bytes
(int* stack)

(export value_area_base)
(void*  value_area_base)
(export gobject_area_base)
(void*  gobject_area_base)
(export num_gobject)
(int    num_gobject)
(void*  code_base)

(export cmd_argc)
(int    cmd_argc)
(export cmd_argv)
(void*  cmd_argv)
(export environ)
(void*  environ)

(void*[] 65536 funtable @(map caddr prim_table))

(export init_vmstack)
(fun init_vmstack (stsize) (
    (= stack (alloc_block stsize))
    (= stack_size stsize)
    ))

(export vm_eval)
(fun vm_eval (argc argv env insn nref) (

    (-= argc 2)
    (+= argv 8) ; sizeof(void*) * 2

    (= cmd_argc argc)
    (= cmd_argv argv)
    (= environ env)

    (= num_gobject nref)

    (asm "pushl %ebx")
    (asm "pushl %esi")
    (asm "movl stack, %esi")
    (asm "movl stack_size, %eax")
    (asm "addl %eax, %esi")
    (asm "movl " insn ", %ebx")
    (asm "movl %ebx, code_base")
    (asm "xorl %edx, %edx") ; initialize zero register

    ; allocate area for global reference objects
    (asm "movl " nref ", %eax")
    (asm "shll $2, %eax")
    (asm "subl %eax, %esi")
    (asm "movl %esi, %edi") ; set base pointer

    (asm "movl %esi, gobject_area_base")

    (vmfetch)
    (vmtable insn_table @insn_entries)
    (asm "popl %esi")
    (asm "popl %ebx")
    ))

(fun vm_pcall (idx argsz argv) (
    (while (> argsz 0) (
        (-= argsz 4)
        (int arg ([] (+ argv argsz) 0))
        (asm "pushl " arg)
        ))
    (int ret (indcall ([] funtable idx)))
    (int off argsz)
    (asm "addl " off ", %esp")
    (return ret)
    ))

(fun stack_over_flow () (
    (error "stack over flow\n")
    ))
))

(vtable_push)
(compile vm-eval-code)
(vtable_pop)
