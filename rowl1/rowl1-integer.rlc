;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-integer.rlc 2014-02-02 13:58:18 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-node")
(import "rowl1-object")
(import "rowl1-compile")
(import "rowl1-util")
(import "rowl1-error")
(import "rowl1-bigint")
(import "rowl1-float")

(extern object current_loc)
(extern object global)

(fun int_uplus (x) (
    (return x)
    ))

(fun int_uminus (x) (
    (return (+ (- x) 2))
    ))

(fun int_add (x y) (
    (return (- (+ x y) 1))
    ))

(fun int_sub (x y) (
    (return (+ (- x y) 1))
    ))

(fun int_mul (x y) (
    (return (box (* (unbox x) (unbox y))))
    ))

(fun int_pow (x y) (
    (var v 1)
    (= x (unbox x))
    (= y (unbox y))
    (if (< y 0) (throw (invalid_argument current_loc
        (string "negative exponent") (box y))))
    (var m 0x40000000)
    (while (! (& y m)) (>>= m 1))
    (while (> m 0) (do
        (*= v v)
        (if (& y m) (*= v x))
        (>>= m 1)
        ))
    (return (box v))
    ))

(fun nonzero_check (x) (
    (if (== x 1) ; box(0) == 1
        (throw (division_by_zero current_loc))
        )
    ))

(fun int_div (x y) (
    (nonzero_check y)
    (return (box (/ (unbox x) (unbox y))))
    ))

(fun int_mod (x y) (
    (nonzero_check y)
    (return (box (% (unbox x) (unbox y))))
    ))

(fun int_shiftL (x y) (
    (if (< y 0) (return (int_shiftR x (+ (- y) 2))))
    (= y (unbox y))
    (if (>= y 32) (return (box 0)))
    (= x (unbox x))
    (if (> x 0)
        (return (box (<< x y)))
        (return (box (- (<< (- x) y))))
        )
    ))

(fun int_shiftR (x y) (
    (if (< y 0) (return (int_shiftL x (+ (- y) 2))))
    (= y (unbox y))
    (if (>= y 32) (return (box 0)))
    (= x (unbox x))
    (if (> x 0)
        (return (box (>> x y)))
        (return (box (- (>> (- x) y))))
        )
    ))

(fun int_compare (x y) (
    (if (< x y) (return (box -1))
    (if (== x y) (return (box 0))
        (return (box 1))
        ))
    ))
(fun int_lt (x y) ((if (< x y) (return @C_TRUE) (return @C_FALSE))))
(fun int_gt (x y) ((if (> x y) (return @C_TRUE) (return @C_FALSE))))
(fun int_le (x y) ((if (<= x y) (return @C_TRUE) (return @C_FALSE))))
(fun int_ge (x y) ((if (>= x y) (return @C_TRUE) (return @C_FALSE))))

(fun int_abs (n) (
    (if (> n 0)
        (return n)
        (return (+ (- n) 2))
        )
    ))

(export fun int_to_s (n) (
    (return (itos (unbox n)))
    ))

(fun int_hash (n) (
    (return n)
    ))

(export fun setup_numeric (mod) (
    (var trait (make_object1 (to_sym "Trait") (to_sym "Int")))
    (set_slot mod (to_sym "Int") trait)
    (set_special_parent @IntE trait)

    (add_function1 mod (to_sym "int_uplus") intT int_uplus 0)
    (add_function1 mod (to_sym "int_uminus") intT int_uminus 0)
    (add_function2 mod (to_sym "int_add") intT intT int_add 0)
    (add_function2 mod (to_sym "int_sub") intT intT int_sub 0)
    (add_function2 mod (to_sym "int_mul") intT intT int_mul 0)
    (add_function2 mod (to_sym "int_div") intT intT int_div 0)
    (add_function2 mod (to_sym "int_mod") intT intT int_mod 0)
    (add_function2 mod (to_sym "int_pow") intT intT int_pow 0)
    (add_function2 mod (to_sym "int_compare") intT intT int_compare 0)
    (add_function2 mod (to_sym "int_less_than?") intT intT int_lt 0)
    (add_function2 mod (to_sym "int_greater_than?") intT intT int_gt 0)
    (add_function2 mod (to_sym "int_less_equal?") intT intT int_le 0)
    (add_function2 mod (to_sym "int_greater_equal?") intT intT int_ge 0)
    (add_function2 mod (to_sym "int_shiftL") intT intT int_shiftL 0)
    (add_function2 mod (to_sym "int_shiftR") intT intT int_shiftR 0)

    (add_function1 mod (to_sym "int_abs") intT int_abs 0)
    (add_function1 mod (to_sym "int_to_string") intT int_to_s 0)
    (add_function1 mod (to_sym "int_hash") intT int_hash 0)
    (set_slot mod (to_sym "INTEGER_MIN") (box @FIXNUM_MIN))
    (set_slot mod (to_sym "INTEGER_MAX") (box @FIXNUM_MAX))
    ))

    ))
