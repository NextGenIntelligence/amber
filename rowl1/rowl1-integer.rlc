;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-integer.rlc 2014-04-02 20:50:18 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-node")
(import "rowl1-object")
(import "rowl1-compile")
(import "rowl1-util")
(import "rowl1-error")
(import "rowl1-bigint")
(import "rowl1-float")

(extern object global)
(extern fun tuple2)

(fun int_add (x y) (
    (return (- (+ x y) 1))
    ))

(fun int_sub (x y) (
    (return (+ (- x y) 1))
    ))

(fun int_mul (x y) (
    (return (box (* (unbox x) (unbox y))))
    ))

(fun int_pow (x y) (
    (var v 1)
    (= x (unbox x))
    (= y (unbox y))
    (if (< y 0) (return (fpow (itof x) (itof y))))
    (var m 0x40000000)
    (while (! (& y m)) (>>= m 1))
    (while (> m 0) (do
        (*= v v)
        (if (& y m) (*= v x))
        (>>= m 1)
        ))
    (return (box v))
    ))

; compute x^y mod z
(fun int_powmod (x y z) (
    (var v 1)
    (= x (unbox x))
    (= y (unbox y))
    (= z (unbox z))
    (if (< y 0) (throw (invalid_argument (string "Negative exponent") (box y))))
    (if (< z 0) (throw (invalid_argument (string "Negative modulus") (box z))))
    (var m 0x40000000)
    (while (! (& y m)) (>>= m 1))
    (while (> m 0) (do
        (*= v v)
        (if (& y m) (*= v x))
        (%= v z)
        (>>= m 1)
        ))
    (return (box v))
    ))

(fun nonzero_check (x) (
    (if (== x 1) ; box(0) == 1
        (throw (division_by_zero))
        )
    ))

(fun int_quo (x y) (
    (nonzero_check y)
    (return (fdiv (itof (unbox x)) (itof (unbox y))))
    ))

(fun int_quo2 (x y) (
    (nonzero_check y)
    (return (fdiv (copy_float x) (itof (unbox y))))
    ))

(fun int_div (x y) (
    (nonzero_check y)
    (if (> y 0)
        (return (box (/ (unbox x) (unbox y))))
        (return (box (- (/ (unbox x) (- (unbox y))))))
        )
    ))

(fun int_mod (x y) (
    (nonzero_check y)
    (if (> y 0)
        (return (box (% (unbox x) (unbox y))))
        (return (box (% (unbox x) (- (unbox y)))))
        )
    ))

(fun int_divmod (x y) (
    (nonzero_check y)
    (= x (unbox x))
    (= y (unbox y))
    (return (tuple2 (box (/ x y)) (box (% x y))))
    ))

(fun int_shiftL (x y) (
    (if (< y 0) (return (int_shiftR x (+ (- y) 2))))
    (= y (unbox y))
    (if (>= y 32) (return (box 0)))
    (= x (unbox x))
    (if (> x 0)
        (return (box (<< x y)))
        (return (box (- (<< (- x) y))))
        )
    ))

(fun int_shiftR (x y) (
    (if (< y 0) (return (int_shiftL x (+ (- y) 2))))
    (= y (unbox y))
    (if (>= y 32) (return (box 0)))
    (= x (unbox x))
    (if (> x 0)
        (return (box (>> x y)))
        (return (box (- (>> (- x) y))))
        )
    ))

(fun int_lt (x y) ((if (< x y) (return @C_TRUE) (return @C_FALSE))))
(fun int_gt (x y) ((if (> x y) (return @C_TRUE) (return @C_FALSE))))
(fun int_le (x y) ((if (<= x y) (return @C_TRUE) (return @C_FALSE))))
(fun int_ge (x y) ((if (>= x y) (return @C_TRUE) (return @C_FALSE))))

(export fun int_hash (n) (
    (return (box (hashnext 0 n)))
    ))

(fun int_lnot (a) (
    (return (| 1 (~ a)))
    ))

(fun int_land (a b) (
    (return (| 1 (& a b)))
    ))
(fun int_lor (a b) (
    (return (| 1 (| a b)))
    ))
(fun int_lxor (a b) (
    (return (| 1 (^ a b)))
    ))
(fun int_lshift (a m) (
    (= m (unbox m))
    (if (< m 0) (throw (out_of_domain (to_sym "lshift") m)))
    (return (box (<< (unbox a) m)))
    ))
(fun int_rshift (a m) (
    (= m (unbox m))
    (if (< m 0) (throw (out_of_domain (to_sym "rshift") m)))
    (return (box (>> (unbox a) m)))
    ))
(fun int_logic_rshift (a m) (
    (= m (unbox m))
    (if (< m 0) (throw (out_of_domain (to_sym "logic_rshift") m)))
    (return (box (shr a (+ m 1))))
    ))

    ))
