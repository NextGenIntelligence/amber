;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-matching.rlc 2014-04-09 11:20:03 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-assemble")
(import "rowl1-compile")
(import "rowl1-error")

; pattern matrix (((p11 p12 .. ) e1 g1) ((p21 p22 ..) e2 g2) ..)

(var dontcareP (to_unique_sym "%DontCare"))
(var restP     (to_unique_sym "%Rest"))
(var varP      (to_unique_sym "%Var"))
(var domP      (to_unique_sym "%Domain"))

(extern fun tuple2)
(extern fun tuple_at)

(fun trace_func (msg val) (
    (debugs msg)
    (debugpf val)
    (return val)
    ))

(fun trace (asm msg) (
    (put_push asm (string msg))
    (compile_simple_call asm 2 trace_func)
    ))

(fun matching_failed_error (obj def self args) (
    (throw (matching_failed obj def self args))
    ))

(export fun compile_matching (obj def) (
    (if (! (is_function def))
        (throw (type_error (string "function") def))
        )

    (var cache (field_get def 1))
    (if cache (return cache))

    (var asm (make_assembler))
    (var exit_lbl (fresh_label asm))

    (var nocheck (compile_matching_function asm obj def exit_lbl))

    (set_label asm exit_lbl)
    (if nocheck
        (do
            (put_undef asm)
            (put_ireturn asm)
        )
        (do
            (put_args asm 0)
            (put_self asm)
            (put_push asm def)
            (put_push asm obj)
            (compile_simple_call asm 4 matching_failed_error)
            (put_ireturn asm)
        ))

    (var code (get_code asm))
    (field_set def 1 code) ; caching
    (return code)
    ))

(fun compile_matching_function (asm obj def exit) (
    (if (! (is_function def))
        (throw (type_error (string "function") def))
        )

    ; here, `def' has form of Function{ ... }, BuiltinFunction{ ...} or BoundFunction{ ... }

    ; construct pattern matrix 
    (var mat (construct_pattern_matrix def 0))
    (var t (max_arity_and_nocheck_flag mat))
    (var idx     (unbox (tuple_at t 0)))
    (var nocheck (unbox (tuple_at t 1)))

    (var args 0)
    (while (> idx 0) (do
        (decr idx)
        (= args (cons (make_arg idx) args))
        ))
    (= args (cons (get_arity) args))
    (compile_matching_main asm args mat exit)
    (return nocheck)
    ))

(fun max_arity_and_nocheck_flag (mat) (
    (var max 0)
    (var nocheck 1)
    (while mat (do
        (var fun (field_get (car mat) 1))
        (if (== (node_type fun) @FunctionE)
            (&= nocheck (field_get fun 11))
            (= nocheck 0)
            )
        (var m (list_len (field_get (car mat) 0)))
        (if (> m max) (= max m))
        (= mat (cdr mat))
        ))
    (return (tuple2 (box max) (box nocheck)))
    ))

(fun construct_pattern_matrix (def tl) (
    (var ty (node_type def))
    (if (|| (== ty @FunctionE) (== ty @BuiltinFunctionE))
        (return (cons (construct_row def) tl))
        )
    (if (== ty @BoundFunctionE) (do
        (var fun1 (field_get def 2))
        (var fun2 (field_get def 3))
        (= tl (construct_pattern_matrix fun2 tl))
        (return (construct_pattern_matrix fun1 tl))
        ))
    (if (== ty @ContinuationE) (do
        (return (cons
            (struct 2 (setup_patterns (list2 (box 1) DontCare)) def)
            tl))
        ))
    (throw (string "BUG: construct_pattern_matrix"))
    ))

(fun construct_row (def) (
    (var args  (field_get def 2))
    (return (struct 2 (setup_patterns args) def))
    ))

(fun setup_patterns (args) (
    (if (! args) (return 0))
    (return (cons (setup_pattern (car args)) (setup_patterns (cdr args))))
    ))

(fun setup_pattern (pat) (
    (if (== pat DontCare)
        (return dontcareP)
        )
    (if (is_special pat)
        (return pat)
        )
    (if (is_symbol pat)
        (return varP)
        )
    (var hd (node_head pat))
    (if (|| (== hd Int) (== hd String))
        (return pat)
        )
    (if (== hd Domain) (do
        (var lhs (setup_pattern (node_arg pat 0)))
        (var dom (node_arg pat 1))
        (if (is_symbol dom)
            (return (make_node2 domP lhs dom))
            (return (setup_pattern dom))
            )
        ))
    (if (== hd Rest)
        (return restP)
        )
    (if (== hd List)
        (return (setup_pat_list pat))
        )
    (if (== hd Tuple)
        (return (setup_pat_tuple pat))
        )
    (if (== hd Quote)
        (return (node_arg pat 0))
        )
    (if (== hd Quasiquote)
        (return (qquote_pattern (node_arg pat 0) 0))
        )
    (= pat (copy pat))
    (for i 0 (node_size pat)
        (node_arg_set pat i (setup_pattern (node_arg pat i)))
        )
    (return pat)
    ))

(fun setup_pat_list (list) (
    (if (! list) (return 0))
    (return (cons (setup_pattern (car list)) (setup_pat_list (cdr list))))
    ))

(fun setup_pat_tuple (t) (
    (var n (seq_size t))
    (var p (allocate_tuple n))
    (for i 0 n (do
        (array_set object p i (setup_pattern (array_get object t i)))
        ))
    (return p)
    ))

(fun qquote_pattern_list (pat level) (
    (var ret 0)
    (while pat (do
        (= ret (cons (qquote_pattern (car pat) level) ret))
        (= pat (cdr pat))
        ))
    (return (list_reverse ret))
    ))

(fun qquote_pattern_tuple (pat level) (
    (var n (seq_size pat))
    (var p (allocate_tuple n))
    (for i 0 n (do
        (array_set object p i (qquote_pattern (array_get object pat i) level))
        ))
    (return p)
    ))

(fun qquote_pattern (pat level) (
    (var hd (node_head pat))
    (if (|| (== hd Symbol) (|| (== hd Int) (== hd String)))
        (return pat)
    (if (== hd List)
        (return (qquote_pattern_list pat level))
    (if (== hd Tuple)
        (return (qquote_pattern_tuple pat level))
    (if (== hd Unquote)
        (if (== level 0)
            (return (setup_pattern (node_arg pat 0)))
            (return (qquote_pattern (node_arg pat 0) (- level 1)))
            )
    (if (== hd Quasiquote)
        (+= level 1)
        )))))
    (= pat (copy pat))
    (for i 0 (node_size pat)
        (node_arg_set pat i (qquote_pattern (node_arg pat i) level))
        )
    (return pat)
    ))

(fun matching_keywords (args keys) (
    (if (! args) (do
        (var n (seq_size keys))
        (var values (array object n))
        (for i 0 n (array_set object values i @C_UNDEF))
        (return values)
        ))
    (var vars (field_get args 0))
    (var vals (field_get args 1))
    (var argslen (seq_size vars))
    (var keyslen (seq_size keys))
    (var values (array object keyslen))
    (var i 0)
    (var j 0)
    (for j 0 keyslen (do
        (if (== i argslen)
            (do
                (array_set object values j @C_UNDEF)
                continue
            ))
        (var vi (array_get object vars i))
        (var vj (array_get object keys j))
        (if (== vi vj)
            (do
                (array_set object values j (array_get object vals i))
                (+= i 1)
            )
        (if (< (field_get vi @SymbolIndex) (field_get vj @SymbolIndex))
            (throw (undefined_keyword_argument vi))
            (do
                (array_set object values j @C_UNDEF)
            )))
        ))
    (if (< i argslen)
        (throw (undefined_keyword_argument (array_get object vars i)))
        )
    (return values)
    ))

(fun compile_matching_main (asm args pats exit) (
    (if (! (field_get (car pats) 0)) (do
        (label compile_matching_main_loop)
        (var func (field_get (car pats) 1))
        (var ty (node_type func))
        (var keys 0)
        (var code 0)
        (var guard 0)
        (var clos 0)
        (var use_self @FALSE)
        (var nlocal 0)
        (if (== ty @FunctionE)
            (do
                (= keys (field_get func 3))
                (= code (field_get func 5))
                (= guard (field_get func 6))
                (= clos (field_get func 7))
                (= use_self (field_get func 9))
                (= nlocal (field_get func 10))
            )
        (if (== ty @BuiltinFunctionE)
            (do 
                (= guard (field_get func 3))
                (= use_self (field_get func 5))
            )))

        (var check_failed (fresh_label asm))
        (if use_self (do
            (put_self asm)
            (put_if_undef asm check_failed)
            ))
        (if clos (do
            (put_push asm clos)
            (put_store_closure asm)
            ))
        (if (> nlocal 0) (put_allocate asm nlocal))
        (if keys (do
            (put_push asm keys)
            (put_keys asm)
            (compile_simple_call asm 2 matching_keywords)
            ))
        (if guard (do
            (put_code asm guard)
            (put_if_false asm check_failed)
            ))
        (if (== ty @FunctionE)
            (do
                (put_push asm code)
                (put_jjump asm)
            )
        (if (== ty @BuiltinFunctionE)
            (do
                (put_imm_int32 asm (field_get func 4))
                (put_aforward asm)
            )
            (do
                (put_push asm func)
                (put_callc asm)
            )))
        (if (|| guard (|| use_self keys)) (do
            (set_label asm check_failed)
            (put_deallocate asm)
            (if (cdr pats) (do
                (= pats (cdr pats))
                (goto compile_matching_main_loop)
                ))
            (put_goto asm exit)
            ))
        return
        ))
    (var x (split_pattern_matrix pats)) ; (single . remain)

    (if (cdr x)
        (do
            (var exit2 (fresh_label asm))
            (compile_matching_single asm args (car x) exit2)
            (set_label asm exit2)
            (compile_matching_main asm args (cdr x) exit)
        )
        (compile_matching_single asm args (car x) exit)
        )
    ))

(fun compile_matching_single (asm args pats exit) (
    (var p (caaar pats))
    (if (== p dontcareP) (do
        (= pats (shift_pat pats))
        (compile_matching_main asm (cdr args) pats exit)
        return
        ))
    (if (== p varP) (do
        (= pats (shift_pat pats))
        (compile_matching_main asm (cdr args) pats exit)
        return
        ))
    (if (== p restP) (do
        (= pats (shift_pat pats))
        (compile_matching_main asm (cdr args) pats exit)
        return
        ))
    (if (is_special p) (do
        (compile_operand asm (car args) @C_NIL)
        (put_imm_int16 asm p)
        (put_if_ne asm exit)
        (= pats (shift_pat pats))
        (compile_matching_main asm (cdr args) pats exit)
        return
        ))
    (var hd (node_head p))
    (if (== hd VariableLength) (do
        (if (!= (node_head (car args)) GetArity)
            (throw (bug (string "compile matching single")))
            )
        (compile_operand asm (car args) @C_NIL)
        (put_imm_int asm (node_arg_int p 0))
        (put_if_lt asm exit)
        (= pats (shift_pat pats))
        (compile_matching_main asm (cdr args) pats exit)
        return
        ))
    (if (== hd Symbol) (do
        (compile_operand asm (car args) @C_NIL)
        (put_push asm p)
        (put_if_ne asm exit)
        (= pats (shift_pat pats))
        (compile_matching_main asm (cdr args) pats exit)
        return
        ))
    (if (== hd Int) (do
        (if (!= (node_head (car args)) GetArity) (do
            (compile_operand asm (car args) @C_NIL)
            (put_check_int asm exit)
            ))
        (compile_matching_intlit asm args pats exit)
        return
        ))
    (if (== hd String) (do
        (compile_operand asm (car args) @C_NIL)
        (put_check_string asm exit)
        (compile_operand asm (car args) @C_NIL)
        (compile_matching_string_lit asm p exit)
        (= pats (shift_pat pats))
        (compile_matching_main asm (cdr args) pats exit)
        return
        ))
    (if (== hd domP) (do
        (var pat (node_arg_symbol p 1))
        (compile_operand asm (car args) @C_NIL)
        (compile_head_check asm pat exit)
        (= pats (shift_pat pats))
        (compile_matching_main asm (cdr args) pats exit)
        return
        ))
    (if (== hd List) (do
        (if (is_abbrev_list p)
            (do
                (var len (- (list_len p) 1))
                (compile_operand asm (car args) @C_NIL)
                (put_check_list2 asm exit len)

                ; flatten list pattern
                (= pats (expand_list_pat pats))

                ; add list elements to args
                (var ls (car args))
                (= args (cdr args))
                (= args (cons (make_list_from ls len) args))
                (while (> len 0) (do
                    (decr len)
                    (= args (cons (make_list_at ls len) args))
                    ))

                (compile_matching_main asm args pats exit)
            )
            (do
                (var len (list_len p))
                (compile_operand asm (car args) @C_NIL)
                (put_check_list asm exit len)

                ; flatten list pattern
                (= pats (expand_list_pat pats))

                ; add list elements to args
                (var ls (car args))
                (= args (cdr args))
                (while (> len 0) (do
                    (decr len)
                    (= args (cons (make_list_at ls len) args))
                    ))

                (compile_matching_main asm args pats exit)
            ))
        return
        ))

    (var size (node_size p))
    (compile_operand asm (car args) @C_NIL)
    (compile_head_check asm hd exit)

    (if (is_abbrev_node p size)
        (if (> size 1) (do
            (compile_operand asm (car args) @C_NIL)
            (compile_simple_call asm 1 node_size)
            (put_imm_int asm (- size 1))
            (put_if_lt asm exit)
            ))
        (do
            (compile_operand asm (car args) @C_NIL)
            (compile_simple_call asm 1 node_size)
            (put_imm_int asm size)
            (put_if_ne asm exit)
        ))

    ; flatten expression pattern
    (= pats (expand_composite_pat pats))
    ; add arguments to args
    (var expr (car args))
    (= args (cdr args))
    (rfor i 0 size
        (= args (cons (make_node_at p expr i) args))
        )
    (compile_matching_main asm args pats exit)
    ))

(fun is_abbrev_list (pats) (
    (while pats (do
        (if (== (car pats) restP) (do
            (if (cdr pats) (throw (exception (string "rest-pattern must be placed at the end of the list"))))
            (return @TRUE)
            ))
        (= pats (cdr pats))
        ))
    (return @FALSE)
    ))

(fun is_abbrev_node (expr size) (
    (if (== size 0) (return @FALSE))
    (if (== (node_arg expr (- size 1)) restP)
        (return @TRUE)
        (return @FALSE)
        )
    ))

(fun compile_head_check (asm ty exit_lbl) (
    (put_imm_int32 asm node_head)
    (put_acall asm 1)
    (put_push asm ty)
    (put_if_ne asm exit_lbl)
    ))

(fun compile_matching_intlit (asm args pats exit) (
    (= pats (sort_int_pat pats))
    (var r (scan_int_cases pats))
    (var continues (unbox (car r)))
    (var cases (cdr r))

    (if continues
        (compile_matching_intlit_tswitch asm args pats cases exit)
        (compile_matching_intlit_lswitch asm args pats cases exit)
        )
    ))

(fun compile_matching_intlit_tswitch (asm args pats cases exit) (
    (var ncases (list_len cases))
    (var case_lbls (array int ncases))
    (for i 0 ncases
        (array_set int case_lbls i (fresh_label asm))
        )

    (compile_operand asm (car args) @C_NIL)

    (if (!= (node_head (car args)) GetArity)
        (put_unbox asm)
        )

    (put_tswitch asm ncases)
    (for i 0 ncases
        (emit_tswitch_label asm (array_get int case_lbls i))
        )
    (emit_tswitch_label asm exit)
    (for i 0 ncases (do
        (var n (unbox (cdar cases)))
        (var r (list_split pats n))
        (= pats (cdr r))
        (set_label asm (array_get int case_lbls i))
        (compile_matching_main asm (cdr args) (shift_pat (car r)) exit)
        (= cases (cdr cases))
        ))
    ))

(fun compile_matching_intlit_lswitch (asm args pats cases exit) (
    (var ncases 0)
    (var max (caar cases))
    (var cases_copy cases)
    (while cases_copy (do
        (incr ncases)
        (if (< max (caar cases_copy))
            (= max (caar cases_copy))
            )
        (= cases_copy (cdr cases_copy))
        ))
    (= max (+ (unbox max) 1))

    (var case_lbls (array int ncases))
    (for i 0 ncases
        (array_set int case_lbls i (fresh_label asm))
        )

    (compile_operand asm (car args) @C_NIL)

    (if (!= (node_head (car args)) GetArity)
        (put_unbox asm)
        )

    (put_lswitch asm max)
    (= cases_copy cases)
    (for i 0 ncases (do
        (emit_int asm (unbox (caar cases_copy)))
        (emit_lswitch_label asm (array_get int case_lbls i))
        (= cases_copy (cdr cases_copy))
        ))
    (emit_int asm max)
    (emit_lswitch_label asm exit)
    (for i 0 ncases (do
        (var n (unbox (cdar cases)))
        (var r (list_split pats n))
        (= pats (cdr r))
        (set_label asm (array_get int case_lbls i))
        (compile_matching_main asm (cdr args) (shift_pat (car r)) exit)
        (= cases (cdr cases))
        ))
    ))

(fun sort_int_pat (pats) (
    (var ret 0)
    (while pats (do
        (var p (car pats))
        (= pats (cdr pats))
        (= ret (insert_int_pat p ret))
        ))
    (return ret)
    ))

(fun insert_int_pat (p ls) (
    (if (! ls) (return (cons p 0)))
    (var a (caar p))
    (var b (caaar ls))
    (if (< a b)
        (return (cons p ls))
        (return (cons (car ls) (insert_int_pat p (cdr ls))))
        )
    ))

(fun scan_int_cases (pats) (
    (var p (caaar pats))
    (var ret 0)
    (var num 0)
    (var continues @FALSE)
    (if (== (unbox p) 0) (do
        (= continues @TRUE)
        ))
    (while pats (do
        (if (== p (caaar pats))
            (do
                (incr num)
                (= pats (cdr pats))
            )
            (do
                (if (!= (+ p 2) (caaar pats))
                    (= continues @FALSE)
                    )
                (= ret (cons (cons p (box num)) ret))
                (= p (caaar pats))
                (= num 1)
                (= pats (cdr pats))
            ))
        ))
    (= ret (cons (cons p (box num)) ret))
    (return (cons (box continues) (list_reverse ret)))
    ))

(fun streq_ (s1 s2) (
    (return (streq s1 s2))
    ))

(fun compile_matching_string_lit (asm str exit_lbl) (
    (put_push asm str)
    (compile_simple_call asm 2 streq_)
    (put_if_zero asm exit_lbl)
    ))

(fun split_pattern_matrix (pats) (
    (var p (caaar pats))
    (if (== p varP) (return (split_any pats)))
    (if (is_special p) (return (split_special p pats)))
    (var hd (node_head p))
    (if (== hd Int) (return (split_int_pat pats)))
    (if (== hd String) (return (split_string_pat pats)))
    (if (== hd domP) (return (split_head_pat (node_arg_symbol p 1) pats)))
    (if (== hd Symbol) (return (split_symbol_pat 0 pats)))
    (if (== hd List) (return (split_list_pat pats)))
    (return (split_composite_pat pats))
    ))

(fun split_any (pats) (
    (var n 1)
    (var orig pats)
    (= pats (cdr pats))
    (while (&& pats (|| (== (caaar pats) dontcareP) (== (caaar pats) varP))) (do
        (= pats (cdr pats))
        (incr n)
        ))
    (return (list_split orig n))
    ))

(fun split_special (v pats) (
    (var n 1)
    (var orig pats)
    (= pats (cdr pats))
    (while (&& pats (== v (caaar pats))) (do
        (= pats (cdr pats))
        (incr n)
        ))
    (return (list_split orig n))
    ))

(fun split_int_pat (pats) (
    (var n 1)
    (var orig pats)
    (= pats (cdr pats))
    (while (&& pats (== (node_type (caaar pats)) @IntE)) (do
        (= pats (cdr pats))
        (incr n)
        ))
    (return (list_split orig n))
    ))

(fun split_string_pat (pats) (
    (var n 1)
    (var orig pats)
    (var str (caaar pats))
    (= pats (cdr pats))
    (while pats (do
        (var nd (caaar pats))
        (if (|| (!= (node_type nd) @StringE) (! (streq str nd))) break)
        (= pats (cdr pats))
        (incr n)
        ))
    (return (list_split orig n))
    ))

(fun head_check (hd node) (
    (if (&& (== (node_head node) domP) (== (node_arg_symbol node 1) hd))
        (return @TRUE)
        (return @FALSE)
        )
    ))

(fun split_head_pat (hd pats) (
    (var n 1)
    (var orig pats)
    (= pats (cdr pats))
    (while (&& pats (head_check hd (caaar pats))) (do
        (= pats (cdr pats))
        (incr n)
        ))
    (return (list_split orig n))
    ))

(fun same_symbol_pat (sym node) (
    (var hd (node_head node))
    (if (&& (== hd Symbol) (== node sym))
        (return @TRUE)
        (return @FALSE)
        )
    ))

(fun split_symbol_pat (sym pats) (
    (var n 1)
    (var orig pats)
    (= pats (cdr pats))
    (while (&& pats (same_symbol_pat sym (caaar pats))) (do
        (= pats (cdr pats))
        (incr n)
        ))
    (return (list_split orig n))
    ))

(fun split_list_pat (pats) (
    (= pats (sort_list_pat pats))
    (var n 1)
    (var orig pats)
    (var p (caaar pats))
    (var len (list_len (caaar pats)))
    (= pats (cdr pats))
    (if (is_abbrev_list p)
        (do
            (while pats (do
                (var nd (caaar pats))
                (if (|| (!= (node_head nd) List)
                    (|| (!= (list_len nd) len)
                        (! (is_abbrev_list nd))))
                    break)
                (= pats (cdr pats))
                (incr n)
                ))
            (return (list_split orig n))
        )
        (do
            (while pats (do
                (var nd (caaar pats))
                (if (|| (!= (node_head nd) List)
                    (|| (!= (list_len nd) len)
                        (is_abbrev_list nd)))
                    break)
                (= pats (cdr pats))
                (incr n)
                ))
            (return (list_split orig n))
        ))
    ))

(fun sort_list_pat (pats) (
    (var ret 0)
    (while pats (do
        (var p (car pats))
        (= pats (cdr pats))
        (= ret (insert_list_pat p ret))
        ))
    (return ret)
    ))

(fun insert_list_pat (p pats) (
    (if (! pats) (return (cons p 0)))
    (var a (caar p))
    (var b (caaar pats))
    (if (!= (node_head a) List) (return (cons (car pats) (insert_list_pat p (cdr pats)))))
    (if (!= (node_head b) List) (return (cons p pats)))
    (var alen (list_len a))
    (var blen (list_len b))
    (if (<= alen blen)
        (return (cons p pats))
        (return (cons (car pats) (insert_list_pat p (cdr pats))))
        )
    ))

(fun split_composite_pat (pats) (
    (var n 1)
    (var orig pats)
    (var p (caaar pats))
    (var hd (node_head p))
    (var size (node_size p))
    (= pats (cdr pats))
    (if (is_abbrev_node p size)
        (do
            (while pats (do
                (var nd (caaar pats))
                (if (|| (!= (node_head nd) hd)
                    (|| (!= (node_size nd) size)
                        (! (is_abbrev_node nd size))))
                    break)
                (= pats (cdr pats))
                (incr n)
                ))
            (return (list_split orig n))
        )
        (do
            (while pats (do
                (var nd (caaar pats))
                (if (|| (!= (node_head nd) hd)
                    (|| (!= (node_size nd) size)
                        (is_abbrev_node nd size)))
                    break)
                (= pats (cdr pats))
                (incr n)
                ))
            (return (list_split orig n))
        ))
    (return (list_split orig n))
    ))

(fun shift_pat (pats) (
    (var list pats)
    (while list (do
        (var st (car list))
        (field_set st 0 (cdr (field_get st 0)))
        (= list (cdr list))
        ))
    (return pats)
    ))

(fun expand_list_pat (pats) (
    (if (== pats 0) (return 0))
    (return (cons (cons (list_append (caaar pats) (cdaar pats)) (cdar pats))
        (expand_list_pat (cdr pats))))
    ))

(fun expand_composite_pat (pats) (
    (if (== pats 0) (return 0))
    (return (cons (cons (list_append (node_args (caaar pats)) (cdaar pats)) (cdar pats))
        (expand_composite_pat (cdr pats))))
    ))

    ))
