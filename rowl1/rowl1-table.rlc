;
; rowl - 1st generation
; Copyright (C) 2012 nineties
;
; $Id: rowl1-table.rlc 2014-04-16 16:49:55 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-object")
(import "rowl1-compile")
(import "rowl1-error")
(import "rowl1-pprint")

(extern object global)
(extern fun tuple2)

(array int prime_numbers (
    5 11 17 37 67 131 257 521 1031 2053 4099 8209 16411 32771 65537 131101
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    ))

; Fields of hashtable
; 0: TableE
; 1: bucket
; 2: hash-function
; 3: equal-function to compare keys
; 4: list of entries
; 5: # of entries

; Fields of hash entries
; 0: the key
; 1: the value
; 2: pointer to the next entry in bucket
; 3: pointer to the next entry in list of entries
; 4: the hash value

(fun table_new_with_hint (hint hash equal) (
    (var size (array_get int prime_numbers (bsr hint)))
    (return (variant @TableE 4 (allocate_array size) hash equal 0 0))
    ))

(export fun table_new () (
    (var hash (lookup_func global (to_sym "hash")))
    (var eql  (lookup_func global (to_sym "equal?")))
    (return (table_new_with_hint 10 hash eql))
    ))

(export fun table_copy (tbl) (
    (var hash (field_get tbl 2))
    (var eql  (field_get tbl 3))
    (var num  (field_get tbl 5))
    (var new_tbl (table_new_with_hint num hash eql))
    (var entry (field_get tbl 4))
    (while entry (do
        (table_store new_tbl (field_get entry 0) (field_get entry 1))
        (= entry (field_get entry 3))
        ))
    (return new_tbl)
    ))

(export fun table_size (tbl) (
    (return (box (field_get tbl 5)))
    ))

; resize bucket
(fun rehash (tbl) (
    (var num_ent (field_get tbl 5))
    (var new_size (array_get int prime_numbers (bsr num_ent)))
    (if (! new_size) (throw (exception (string "rehash: too many entries"))))
    (var bucket (allocate_array new_size))
    (var entry (field_get tbl 4))
    (while entry (do
        (var h (% (field_get entry 4) new_size))
        (field_set entry 2 (array_get object bucket h))
        (array_set object bucket h entry)
        (= entry (field_get entry 3))
        ))
    (field_set tbl 1 bucket)
    ))

(fun table_add (tbl h key val hash) (
    (var buf_size (seq_size (field_get tbl 1)))
    (var num_ent  (field_get tbl 5))
    (if (>= num_ent buf_size) (rehash tbl))
    
    (var bucket (field_get tbl 1))
    (var size   (seq_size bucket))
    (var entry (struct 4 key val 0 0 h))
    (%= h size)

    ; add new entry to the list
    (field_set entry 3 (field_get tbl 4))
    (field_set tbl 4 entry)

    ; add new entry to the bucket
    (field_set entry 2 (array_get object bucket h))
    (array_set object bucket h entry)

    ; increment the counter
    (field_set tbl 5 (+ (field_get tbl 5) 1))
    ))

(export fun table_store (tbl key val) (
    (var bucket (field_get tbl 1))
    (var hash (field_get tbl 2))
    (var eql  (field_get tbl 3))
    (var size (seq_size bucket))
    (var hash_value (unbox (runcode hash key)))
    (var h (% hash_value size))
    (var entry (array_get object bucket h))
    (while entry (do    
        (if (== (runcode eql (field_get entry 0) key) @C_TRUE) (do
            (field_set entry 1 val)
            (return val)
            ))
        (= entry (field_get entry 2))
        ))
    (table_add tbl hash_value key val hash)
    (return val)
    ))

(export fun table_at_by_idx (tbl idx) (
    (var num (field_get tbl 5))
    (if (|| (< idx 0) (>= idx num))
        (throw (out_of_range tbl (box idx)))
        )
    (= idx (- (- num idx) 1))
    (var entry (field_get tbl 4))
    (while entry (do
        (if (== idx 0)
            (return (tuple2 (field_get entry 0) (field_get entry 1)))
            )
        (-= idx 1)
        (= entry (field_get entry 3))
        ))
    (not_reachable "table_at_by_idx")
    ))

(export fun table_at (tbl key) (
    (var hash (field_get tbl 2))
    (var eql  (field_get tbl 3))
    (var bucket (field_get tbl 1))
    (var size (seq_size bucket))
    (var h (unbox (runcode hash key)))
    (%= h size)
    (var entry (array_get object bucket h))
    (while entry (do
        (var e_key (field_get entry 0))
        (if (== (runcode eql e_key key) @C_TRUE)
            (return (field_get entry 1))
            )
        (= entry (field_get entry 2))
        ))
    (return @C_NIL)
    ))

(fun table_keys (tbl) (
    (var keys 0)
    (var entries (field_get tbl 4))
    (while entries (do
        (= keys (cons (field_get entries 0) keys))
        (= entries (field_get entries 3))
        ))
    (return keys)
    ))

(fun table_values (tbl) (
    (var values 0)
    (var entries (field_get tbl 4))
    (while entries (do
        (= values (cons (field_get entries 1) values))
        (= entries (field_get entries 3))
        ))
    (return values)
    ))

(export fun pp_table (ochan tbl) (
    (var entries (table_to_list tbl))
    (output_string ochan "Table{")
    (while entries (do
        (var pair (car entries))
        (pprint ochan (array_get object pair 0))
        (output_string ochan " => ")
        (pprint ochan (array_get object pair 1))
        (= entries (cdr entries))
        (if entries (output_string ochan ", "))
        ))
    (output_string ochan "}")
    ))

(fun iter_to_table (it) (
    (var tbl (table_new))
    (= it (get_bytecode it))
    (while @TRUE (do
        (var v (runcode it))
        (if (== v @C_UNDEF) break)
        (if (|| (!= (node_head v) Tuple) (!= (node_size v) 2))
            (throw (invalid_argument (string "Given iterator returns non key-value pair.") v))
            )
        (table_store tbl (node_arg v 0) (node_arg v 1))
        ))
    (return tbl)
    ))

(export fun list_to_table (ls) (
    (var tbl (table_new))
    (while ls (do
        (var v (car ls))
        (if (|| (!= (node_head v) Tuple) (!= (node_size v) 2))
            (throw (invalid_argument (string "Given iterator returns non key-value pair.") v))
            )
        (table_store tbl (node_arg v 0) (node_arg v 1))
        (= ls (cdr ls))
        ))
    (return tbl)
    ))

(export fun table_to_list (tbl) (
    (var list 0)
    (var entry (field_get tbl 4))
    (while entry (do
        (= list (cons (tuple2 (field_get entry 0)
            (field_get entry 1)) list))
        (= entry (field_get entry 3))
        ))
    (return list)
    ))


(export fun table_restof (tbl i) (
    (var num (field_get tbl 5))
    (-= num i)
    (var entry (field_get tbl 4))
    (while (&& entry (> num 0)) (do
        (= entry (field_get entry 3))
        ))
    (var list 0)
    (while entry (do
        (= list (cons (tuple2 (field_get entry 0)
            (field_get entry 1)) list))
        (= entry (field_get entry 3))
        ))
    (return list)
    ))

(export fun table_hash (tbl) (
    (var hash (lookup_func global (to_sym "hash")))
    (var h (hashnext 0 (field_get Table @SymbolIndex)))
    (var entry (field_get tbl 4))
    (while entry (do
        (= h (hashnext h (unbox (runcode hash (field_get entry 0)))))
        (= h (hashnext h (unbox (runcode hash (field_get entry 1)))))
        (= entry (field_get entry 3))
        ))
    (return (box h))
    ))

(export fun setup_table (mod) (
    (add_function0 mod (to_sym "table_new") table_new 0)
    (add_function1 mod (to_sym "iterable_to_table") funT iter_to_table 0)
    (add_function2 mod (to_sym "table_at") tableT DontCare table_at 0)
    (add_function3 mod (to_sym "table_store") tableT DontCare DontCare table_store 0)
    (add_function1 mod (to_sym "table_size") tableT table_size 0)

    (add_function1 mod (to_sym "table_to_list") tableT table_to_list 0)

    (add_function1 mod (to_sym "table_keys") tableT table_keys 0) 
    (add_function1 mod (to_sym "table_values") tableT table_values 0)
    (add_function1 mod (to_sym "table_pairs") tableT table_to_list 0)
    ))

    ))
