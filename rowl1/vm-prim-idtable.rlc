;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: vm-prim-idtable.rlc 2013-02-02 22:49:22 nineties $
;

(import "stdlib")
(import "vm-compile")

(var vm-prim-code `(

; structure of objects
;
; table
;     0 : bucket
;     1 : pointer to the next table
;     2 : vector of entries
;     3 : size of the bucket
;     4 : # of identifiers
;
; table entry
;     0 : key
;     1 : value
;     2 : pointer to the next entry
;     3 : hash

(int[] 32 prime_numbers (
    5 11 17 37 67 131 257 521 1031 2053 4099 8209 16411 32771 65537 131101
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    ))

(export prim_make_idtable)
(fun prim_make_idtable () (
    (int size (get prime_numbers 0))
    (if (! size) (
        (error "too many local identifiers")
        ))
    (void* bucket (prim_allocate_array size))
    (return (prim_make_struct5 3 bucket 0 (prim_make_vector 0) size 0))
    ))

(fun hash (name) (
    (int h 0)
    (while (*8 name) (
        (*= h 7)
        (+= h (*8 name))
        (incr name)
        ))
    (return h)
    ))

(fun rehash (table) (
    (int old_size (get table 3))
    (int n_entry (get table 4))
    (if (> n_entry old_size) (
        (int size (get prime_numbers (bsr n_entry)))
        (if (! size) (
            (error "too many local identifiers")
            ))
        (void* bucket (prim_allocate_array size))
        (void* entries (get table 2))
        (for i 0 (prim_vector_size entries) (
            (void* entry (prim_vector_at entries i))
            (int h (% (get entry 3) size))
            (set entry 2 (get bucket h))
            (set bucket h entry)
            ))
        (set table 0 bucket)
        (set table 3 size)
        ))
    ))

(export prim_idtable_add)
(fun prim_idtable_add (table name val) (
    (rehash table)
    (int size (get table 3))
    (void* bucket (get table 0))
    (int h (hash name))
    (void* ent (prim_make_struct5 3 name val 0 h))
    (%= h size)

    ; add the entry to the bucket
    (set ent 2 (get bucket h))
    (set bucket h ent)

    ; add the entry to the vector of entries
    (prim_vector_pushback (get table 2) ent)

    ; increment counters
    (set table 4 (+ (get table 4) 1))
    ))

(export prim_idtable_find)
(fun prim_idtable_find (table name) (
    (int h (hash name))
    (int size (get table 3))
    (void* bucket (get table 0))
    (%= h size)
    (void* entry (get bucket h))
    (while entry (
        (void* key (get entry 0))
        (if (streq key name) ((return (get entry 1))))
        (= entry (get entry 2))
        ))
    (return 0)
    ))

    ))

(vtable_push)
(compile vm-prim-code)
(vtable_pop)
