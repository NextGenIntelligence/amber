;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-assemble.rlc 2011-01-10 09:59:44 nineties $
;

; -- Just in time assembler
; (byte code (cvector), labels (ivector), replaces (list of repl info),
;  indices of objects to be GCed (ivector), counter of label index)
; -- repl info
; (pointer to the next info, index of the labels, offset of operand)

(import "rlvm-compile")

(var code-base `(

(export fun make_assembler () (
    (return (tuple 4 (make_cvector 0) (make_ivector 0) 0 (make_ivector 0) 0))
    ))

(export fun get_code (c) (
    (if (tuple_at c 2) (replace_labels c))
    (var code (tuple_at c 0))
    (var indices (tuple_at c 3))
    (if (> (ivector_size indices) 0)
        (return (bytecode (cvector_raw code) (cvector_size code)
                        (ivector_raw indices) (ivector_size indices)))
        (return (bytecode (cvector_raw code) (cvector_size code) 0 0))
        )
    ))

(export fun set_code (b c) (
    (if (tuple_at c 2) (replace_labels c))
    (var code (tuple_at c 0))
    (var indices (tuple_at c 3))
    (if (> (ivector_size indices) 0)
        (bytecode_set b (cvector_raw code) (cvector_size code)
                        (ivector_raw indices) (ivector_size indices))
        (bytecode_set b (cvector_raw code) (cvector_size code) 0 0)
        )
    ))

(fun get_address (c) (
    (return (cvector_size (tuple_at c 0)))
    ))

(export fun put_code (c code) (
    ; setup object indices
    (var offs (cvector_size (tuple_at c 0)))
    (var ivec (tuple_at c 3))
    (var iarr (tuple_at code 2))
    (var nidx (tuple_at code 3))
    (for i 0 nidx (do
        (ivector_pushback ivec (+ offs (array_get int iarr i)))
        ))

    ; copy bytecode
    (var seq (tuple_at code 0))
    (var len (tuple_at code 1))
    (var cvec (tuple_at c 0))
    (for i 0 len (do
        (cvector_pushback cvec (array_get char seq i))
        ))
    ))

(export fun put_nil (c) (
    (put_imm_i0 c)
    ))

(export fun put_imm_int (c value) (
    (if (== value -1) (do
        (put_imm_im1 c)
        return
        ))
    (tswitch value (
        (0 . (do (put_imm_i0 c) return))
        (1 . (do (put_imm_i1 c) return))
        (2 . (do (put_imm_i2 c) return))
        (3 . (do (put_imm_i3 c) return))
        (4 . (do (put_imm_i4 c) return))
        (5 . (do (put_imm_i5 c) return))
        (default . break)
        ))
    (if (&& (<= -32768 value) (<= value 32767))
        (put_imm_int16 c value)
        (put_imm_int32 c value)
        )
    ))

(export fun put_arg (c idx) (
    (tswitch idx (
        (0 . (do (put_arg0 c) return))
        (1 . (do (put_arg1 c) return))
        (2 . (do (put_arg2 c) return))
        (3 . (do (put_arg3 c) return))
        (4 . (do (put_arg4 c) return))
        (default . (do
            (put_loadl c (* 4 (+ 2 idx)))
            return
            ))
        ))
    ))

(export fun emit_byte (c v) (
    (cvector_pushback (tuple_at c 0) v)
    ))

(export fun emit_short (c v) (
    (var vec (tuple_at c 0))
    (cvector_pushback vec (& v 0xff))
    (cvector_pushback vec (>> v 8))
    ))

(export fun emit_int (c v) (
    (var vec (tuple_at c 0))
    (cvector_pushback vec (& v 0xff))
    (cvector_pushback vec (& (>> v 8) 0xff))
    (cvector_pushback vec (& (>> v 16) 0xff))
    (cvector_pushback vec (& (>> v 24) 0xff))
    ))

(fun emit_prim (c v) (
    (emit_short c (& v 0xffff))
    ))

(fun emit_object (c obj) (
    (var offs (cvector_size (tuple_at c 0)))
    (ivector_pushback (tuple_at c 3) offs)
    (emit_int c obj)
    ))

(export fun fresh_label (c) (
    (var n (tuple_at c 4))
    (tuple_set c 4 (+ n 1))
    (ivector_pushback (tuple_at c 1) -1)
    (return n)
    ))

(export fun set_label (c v) (
    (var addr (get_address c))
    (ivector_put (tuple_at c 1) v addr)
    ))

(export fun emit_label (c v) (
    (var offs (get_address c))
    (var info (tuple 1 (tuple_at c 2) v offs (- offs 1)))
    (tuple_set c 2 info)
    (emit_short c 0)
    ))

(export fun emit_tswitch_label (c v) (
    (var offs (get_address c))
    (var info (tuple 1 (tuple_at c 2) v offs offs))
    (tuple_set c 2 info)
    (emit_short c 0)
    ))

(export fun emit_lswitch_label (c v) (
    (var offs (get_address c))
    (var info (tuple 1 (tuple_at c 2) v offs (- offs 4)))
    (tuple_set c 2 info)
    (emit_short c 0)
    ))

(fun replace_labels (c) (
    (var repls (tuple_at c 2))
    (var vec (tuple_at c 0))
    (var labels (tuple_at c 1))
    (while repls (do
        (var label (tuple_at repls 1))
        (var pos   (tuple_at repls 2))
        (var offs  (tuple_at repls 3))
        (if (>= label (ivector_size labels)) (error "undefined label"))
        (var addr (ivector_at labels label))
        (-= addr offs)
        (cvector_put vec pos (& addr 0xff))
        (cvector_put vec (+ pos 1) (>> addr 8))
        (= repls (tuple_at repls 0))
        ))
    (tuple_set c 2 0)
    ))

    ))

(var put_func `(
    (byte   . emit_byte)
    (short  . emit_short)
    (ushort . emit_short)
    (int    . emit_int)
    (prim   . emit_prim)
    (object . emit_object)
    (addr   . emit_label)
    ))

(var code 0)
(foreach i vm_instructions (do
    (var args `(c))
    (var body `((emit_byte c @code)))
    (var name (symbol2s (car i)))
    (var operands (cadr i))
    (var j 0)
    (foreach opd operands (do
        (var arg (s++ `arg j))
        (push body `(@(assoc opd put_func) c @arg))
        (push args arg)
        (incr j)
        ))
    (= body (reverse body))
    (= args (reverse args))
    (push code-base `(export fun @(s++ `put_ name) @args @body))
    (incr code)
    ))

(compile `object code-base)
