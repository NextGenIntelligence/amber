;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-base.rlc 2014-02-15 10:58:35 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-object")
(import "rowl1-compile")
(import "rowl1-assemble")
(import "rowl1-error")

(extern object global)
(extern object current_loc)

(fun _node_size (obj) (
    (return (box (node_size obj)))
    ))
(fun _equal (a b) (
    (var eql (lookup_func global (to_sym "equal?")))
    (return (_equal_sub a b eql))
    ))

(fun _equal_sub (a b eql) (
    (if (== a b) (return @C_TRUE))
    (if (|| (is_atom a) (is_atom b)) (return @C_FALSE))
    (var hd1 (node_head a))
    (var hd2 (node_head b))
    (if (!= hd1 hd2) (return @C_FALSE))
    (var n1 (node_size a))
    (var n2 (node_size b))
    (if (!= n1 n2) (return @C_FALSE))
    (for i 0 n1 (do
        (var v1 (node_arg a i))
        (var v2 (node_arg b i))
        (if (&& (!= v1 v2) (== (runcode eql v1 v2) @C_FALSE))
            (return @C_FALSE)
            )
        ))
    (return @C_TRUE)
    ))

(fun _identical (a b) (
    (if (== a b) (return @C_TRUE))
    (return @C_FALSE)
    ))

(fun _hash (obj) (
    (if (is_atom obj) (return (box (umod obj 65537))))
    (var hash (lookup_func global (to_sym "hash")))
    (var val 0)
    (for i 0 (node_size obj)
        (+= val (* (unbox (runcode hash (node_arg obj i))) 13))
        )
    (+= val (unbox (runcode hash (node_head obj))))
    (return (box val))
    ))

(fun get_arg (obj i) (
    (return (node_arg obj (unbox i)))
    ))

(fun _set_arg (obj i v) (
    (node_arg_set obj (unbox i) v)
    (return v)
    ))

(extern fun array_copy)
(extern fun tuple_copy)
(export fun _copy (obj) (
    (if (is_atom obj) (throw (make_object3 Exception current_loc (string "can not copy atomic object") obj)))
    (if (is_list obj) (return (list_copy obj)))
    (if (is_tuple obj) (return (tuple_copy obj)))
    (if (is_array obj) (return (array_copy obj)))
    (var n (expr_size obj))
    (var copy (allocate_expr n))
    (memcpy copy obj (* 4 (+ n 1)))
    (return copy)
    ))

(fun _is_atom (obj) (
    (if (is_atom obj)
        (return @C_TRUE)
        (return @C_FALSE)
        )
    ))

(export fun setup_base (mod) (
    (add_function1 mod (to_sym "head") DontCare node_head 0)
    (add_function1 mod (to_sym "arguments") DontCare node_args 0)
    (add_function1 mod (to_sym "arity") DontCare _node_size 0)
    (add_function2 mod (to_sym "equal?") DontCare DontCare _equal 0)
    (add_function2 mod (to_sym "identical?") DontCare DontCare _identical 0)
    (add_function1 mod (to_sym "atom?") DontCare _is_atom 0)
    (add_function2 mod (to_sym "get_arg") DontCare intT get_arg 0)
    (add_function3 mod (to_sym "set_arg") DontCare intT DontCare _set_arg 0)
    (add_function1 mod (to_sym "copy") DontCare _copy 0)
    ))

    ))
