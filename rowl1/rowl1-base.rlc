;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-base.rlc 2014-04-05 00:28:04 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-object")
(import "rowl1-compile")
(import "rowl1-assemble")
(import "rowl1-error")

(extern object global)

(fun _node_size (obj) (
    (return (box (node_size obj)))
    ))

(extern fun str_equal)
(extern fun float_equal)
(extern fun bint_equal)
(extern fun ls_equal)
(fun _equal (a b) (
    (if (== a b) (return @C_TRUE))
    (var ty1 (node_type a))
    (var ty2 (node_type b))
    (if (!= ty1 ty2) (return @C_FALSE))
    (if (== ty1 @StringE) (return (str_equal a b)))
    (if (== ty1 @FloatE) (return (float_equal a b)))
    (if (== ty1 @BigIntE) (return (bint_equal a b)))
    (if (== ty1 @ListE) (return (ls_equal a b)))
    (if (|| (is_atom a) (is_atom b)) (return @C_FALSE))
    (var hd1 (node_head a))
    (var hd2 (node_head b))
    (if (!= hd1 hd2) (return @C_FALSE))
    (var n1 (node_size a))
    (var n2 (node_size b))
    (if (!= n1 n2) (return @C_FALSE))
    (var eql (lookup_func global (to_sym "equal?")))
    (for i 0 n1 (do
        (var v1 (node_arg a i))
        (var v2 (node_arg b i))
        (if (&& (!= v1 v2) (== (runcode eql v1 v2) @C_FALSE))
            (return @C_FALSE)
            )
        ))
    (return @C_TRUE)
    ))

(fun _identical (a b) (
    (if (== a b) (return @C_TRUE))
    (return @C_FALSE)
    ))

(fun builtin_hash (obj) (
    (var hash (lookup_func global (to_sym "hash")))
    (var h (hashnext 0 (field_get (node_head obj) @SymbolIndex)))
    (for i 0 (node_size obj) (do
        (= h (hashnext h (unbox (runcode hash (node_arg obj i)))))
        ))
    (return (box h))
    ))

(extern fun sym_hash)
(extern fun ls_hash)
(extern fun ary_hash)
(extern fun table_hash)
(extern fun bint_hash)
(extern fun tuple_hash)
(extern fun str_hash)
(extern fun float_hash)
(fun _hash (obj) (
    ; We can't use addresses of objects because amber uses copy GC.
    (tswitch (node_type obj) (
        (@SymbolE             . (return (sym_hash obj)))
        (@ExprE               . (return (builtin_hash obj)))
        (@ListE               . (return (ls_hash obj)))
        (@ArrayE              . (return (ary_hash obj)))
        (@TableE              . (return (table_hash obj)))
        (@AssemblerE          . (return (builtin_hash obj)))
        (@BytecodeE           . (return (builtin_hash obj)))
        (@FunctionE           . (return (builtin_hash obj)))
        (@BuiltinFunctionE    . (return (builtin_hash obj)))
        (@BoundFunctionE      . (return (builtin_hash obj)))
        (@ContinuationE       . (return (builtin_hash obj)))
        (@AliasE              . (return (builtin_hash obj)))
        (@InputFileStreamE    . (return (builtin_hash obj)))
        (@OutputFileStreamE   . (return (builtin_hash obj)))
        (@InputStringStreamE  . (return (builtin_hash obj)))
        (@OutputStringStreamE . (return (builtin_hash obj)))
        (@ParserE             . (return (builtin_hash obj)))
        (@BigIntE             . (return (bint_hash obj)))
        (@LocE                . (return (builtin_hash obj)))
        (@TupleE              . (return (tuple_hash obj)))
        (@IntE                . (return (box (hashnext 0 obj))))
        (@StringE             . (return (str_hash obj)))
        (@FloatE              . (return (float_hash obj)))
        (@BuiltinTypeE        . (return (builtin_hash obj)))
        (default              . (not_reachable "node_head"))
        ))
    ))

(fun get_arg (obj i) (
    (if (! @(UFIX i))
        (throw (invalid_argument (string "invalid index") i))
        )
    (return (node_arg obj (unbox i)))
    ))

(fun _set_arg (obj i v) (
    (if (! @(UFIX i))
        (throw (invalid_argument (string "invalid index") i))
        )
    (node_arg_set obj (unbox i) v)
    (return v)
    ))

(extern fun array_copy)
(extern fun tuple_copy)
(export fun _copy (obj) (
    (if (is_atom obj) (throw (exception1 (string "can not copy atomic object") obj)))
    (if (is_list obj) (return (list_copy obj)))
    (if (is_tuple obj) (return (tuple_copy obj)))
    (if (is_array obj) (return (array_copy obj)))
    (var n (expr_size obj))
    (var copy (allocate_expr n))
    (memcpy copy obj (* 4 (+ n 1)))
    (return copy)
    ))

(fun _is_atom (obj) (
    (if (is_atom obj)
        (return @C_TRUE)
        (return @C_FALSE)
        )
    ))

(export fun setup_base (mod) (
    (add_function1 mod (to_sym "head") DontCare node_head 0)
    (add_function1 mod (to_sym "arguments") DontCare node_args 0)
    (add_function1 mod (to_sym "arity") DontCare _node_size 0)
    (add_function2 mod (to_sym "equal?") DontCare DontCare _equal 0)
    (add_function2 mod (to_sym "identical?") DontCare DontCare _identical 0)
    (add_function1 mod (to_sym "atom?") DontCare _is_atom 0)
    (add_function2 mod (to_sym "get_arg") DontCare intT get_arg 0)
    (add_function3 mod (to_sym "set_arg") DontCare intT DontCare _set_arg 0)
    (add_function1 mod (to_sym "hash") DontCare _hash 0)
    (add_function1 mod (to_sym "copy") DontCare _copy 0)
    ))

    ))
