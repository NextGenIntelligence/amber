;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-base.rlc 2012-12-15 11:15:28 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-compile")
(import "rowl1-assemble")
(import "rowl1-error")

(extern object current_loc)
(extern object current_mod)

(fun _equal (a b) (
    (var eql (lookup_func current_mod (to_sym "equal")))
    (return (_equal_sub a b eql))
    ))

(fun _equal_sub (a b eql) (
    (if (== a b) (return @C_TRUE))
    (if (|| (is_atom a) (is_atom b)) (return @C_FALSE))
    (var hd1 (node_head a))
    (var hd2 (node_head b))
    (if (!= hd1 hd2) (return @C_FALSE))
    (var n1 (node_size a))
    (var n2 (node_size b))
    (if (!= n1 n2) (return @C_FALSE))
    (for i 0 n1 (do
        (var v1 (node_arg a i))
        (var v2 (node_arg b i))
        (if (&& (!= v1 v2) (== (byterun eql v1 v2) @C_FALSE))
            (return @C_FALSE)
            )
        ))
    (return @C_TRUE)
    ))

(fun _hash (obj) (
    (if (is_atom obj) (return (box (umod obj 65537))))
    (var hash (lookup_func current_mod (to_sym "hash")))
    (var val 0)
    (for i 0 (node_size obj)
        (+= val (* (unbox (byterun hash (node_arg obj i))) 13))
        )
    (+= val (unbox (byterun hash (node_head obj))))
    (return (box val))
    ))

(fun _at (obj i) (
    (return (node_arg obj (unbox i)))
    ))

(fun _store (obj i v) (
    (node_arg_set obj (unbox i) v)
    (return v)
    ))

(fun _subst_loop (obj code) (
    (var new_obj @C_NIL)
    (label again)
    (= new_obj (byterun code obj))
    (if (!= new_obj obj) (do
        (= obj new_obj)
        (goto again)
        ))
    (if (is_atom obj) (return obj))
    (if (is_list obj) (do   
        (var ls obj)
        (while ls (do
            (setcar ls (_subst_loop (car ls) code))
            (= ls (cdr ls))
            ))
        (return obj)
        ))
    (for i 0 (node_size obj)
        (node_arg_set obj i (_subst_loop (node_arg obj i) code))
        )
    (return obj)
    ))

(fun _subst (obj fun) (
    (var code (get_bytecode fun))
    (return (_subst_loop obj code))
    ))

(export fun setup_base (mod) (
    (add_function2 mod (to_sym "equal") DontCare DontCare _equal 0)
    (add_function1 mod (to_sym "hash") DontCare _hash 0)
    (add_function2 mod (to_sym "at") DontCare intT _at 0)
    (add_function3 mod (to_sym "store") DontCare intT DontCare _store 0)

    (add_function2 mod (to_sym "_at") DontCare intT _at 0)
    (add_function3 mod (to_sym "_store") DontCare intT DontCare _store 0)

    (add_function2 mod (to_sym "subst") DontCare funT _subst 0)
    ))

    ))
