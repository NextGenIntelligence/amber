;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: linker.rlc 2010-10-19 15:30:04 nineties $
;

(import "config")
(import "rlvm-compile")
(import "vm-insn")
(import "vm-prim-inc")

(var call_info  (assoc `call vm_insn_table))
(var pcall_info (assoc `pcall vm_insn_table))
(var drop_info  (assoc `drop vm_insn_table))
(var exit_info  (assoc `exit vm_insn_table))
(var call_init_len (+ (cadr call_info) (cadr drop_info)))
(var call_main_len (+ (* 2 (cadr pcall_info)) (+ (cadr call_info) (cadr exit_info))))
(var cmd_argv_index (car (assoc `cmd_argv prim_table)))
(var cmd_argc_index (car (assoc `cmd_argc prim_table)))

(compile `executable `(

(var num_files 0)

(var codes (make_vector 0))
(var code_lens (make_ivector 0))
(var total_len 0)
(var startup_len 0)

(var values (make_vector 0))
(var value_sizes (make_ivector 0))
(var total_vsize 0)
(var nrefs (make_ivector 0))
(var total_nref 0)

(var output_file null)

; vector of (symbol, file index, type, address)
(var relocate_symbols (make_vector 0))
; vector of (symbol, file index, type, address)
(var exported_symbols (make_vector 0))

(fun main (argc argv) (
    (parse_option (address argc) argv)

    (= num_files (+ argc 1))
    (= startup_len (+ (* num_files @call_init_len) @call_main_len))
    (= total_len startup_len)

    (load_file 0 "startup.rlo")
    (for i 0  argc (do
        (var file (array_get string argv i))
        (load_file (+ i 1) file)
        ))


    (replace_addresses)
    (output_executable output_file)
    (return 0)
    ))

(fun parse_option (argcp argv) (
    (var argc (get argcp))
    (var new_argc argc)
    (var i 0)
    (var j 0)
    (while (< j argc) (do
        (var arg (array_get string argv j))
        (if (streq arg "-o")
            (do
                (= output_file (array_get string argv (+ j 1)))
                (-= new_argc 2)
                (+= j 2)
            )
            (do
                (array_set string argv i arg)
                (incr i)
                (incr j)
            ))
        ))
    (if (! output_file) (= output_file "a.rlx"))
    (set argcp new_argc)
    ))

(fun read_byte_check (ichan) (
    (var val 0)
    (if (< (input_char (address val) ichan) 0)
        (error "invalid file format1")
        )
    (return val)
    ))

(fun read_int_check (ichan) (
    (var val 0)
    (if (< (input_int (address val) ichan) 0)
        (error "invalid file format2")
        )
    (return val)
    ))

(fun read_string_check (ichan) (
    (var val 0)
    (if (< (input_string (address val) ichan) 0)
        (error "invalid file format3")
        )
    (return val)
    ))

(fun load_file (index file) (
    (var ic (open_in file))
    (var magic (read_int_check ic))
    (if (!= magic @OBJ_MAGIC)
        (error "invalid file format (magic number mismatch)"))

    (var nref (read_int_check ic))
    (ivector_pushback nrefs nref)
    (+= total_nref nref)

    (var vsize (read_int_check ic))
    (+= total_vsize vsize)
    (var v (array char vsize))
    (if (< (input_bytes ic v vsize) 0) (error "load failed"))
    (vector_pushback values v)
    (ivector_pushback value_sizes vsize)

    ; read byte codes
    (var codelen (read_int_check ic))

    (var code (array char codelen))
    (if (< (input_bytes ic code codelen) 0) (error "load failed"))
    (vector_pushback codes code)
    (ivector_pushback code_lens codelen)
    (+= total_len codelen)


    (load_relocate_table index ic)
    (load_export_table index ic)

    (close_in ic)
    ))

(fun load_relocate_table (index ichan) (
    (var nent (read_int_check ichan))
    (for i 0 nent (do
        (var type (read_byte_check ichan))
        (var name 0)
        (if (&& (!= type @RELOC_SVALUE) (!= type @RELOC_SOBJECT))
            (= name (read_string_check ichan))
            )
        (var naddr (read_int_check ichan))
        (for j 0 naddr (do
            (var addr (read_int_check ichan))
            ;(print_string "import: ")
            ;(if name (print_string name) (print_string "<unnamed>"))
            ;(print_string " type=")
            ;(print_int type)
            ;(print_string " index=")
            ;(print_int index)
            ;(print_string " addr=")
            ;(print_int addr)
            ;(print_char '\n')
            (vector_pushback relocate_symbols
                (make_tuple4 1 name index type addr)
                )
            ))
        ))
    ))

(fun load_export_table (index ichan) (
    (var nent (read_int_check ichan))
    (for i 0 nent (do
        (var type (read_byte_check ichan))
        (var name (read_string_check ichan))
        (var addr (read_int_check ichan))
        ;(print_string "export: ")
        ;(print_string name)
        ;(print_string " type=")
        ;(print_int type)
        ;(print_string " index=")
        ;(print_int index)
        ;(print_string " addr=")
        ;(print_int addr)
        ;(print_char '\n')
        (vector_pushback exported_symbols
            (make_tuple4 1 name index type addr)
            )
        ))
    ))

(fun output_byte  (ochan word) ((output_bytes ochan (address word) 1)))
(fun output_short (ochan word) ((output_bytes ochan (address word) 2)))
(fun output_word  (ochan word) ((output_bytes ochan (address word) 4)))

; XXX: should use hashtable
(fun lookup_symbol (sym) (
    (for i 0 (vector_size exported_symbols) (do
        (var ent (vector_at exported_symbols i))
        (if (streq sym (tuple_at ent 0))
            (return ent))
        ))
    (return 0)
    ))

(fun compute_real_address (addr idx) (
    (var offset startup_len)
    (for i 0 idx (+= offset (ivector_at code_lens i)))
    (return (+ offset addr))
    ))

(fun replace_function_address (reloc_info) (
    (var sym (tuple_at reloc_info 0))
    (var rfile_index (tuple_at reloc_info 1))
    (var operand_addr (tuple_at reloc_info 3))
    (var export_info (lookup_symbol sym))
    (if (! export_info) (error "undefined symbol"))
    (var efile_index (tuple_at export_info 1))
    (var real_addr (tuple_at export_info 3))

    (= real_addr (compute_real_address real_addr efile_index))
    (var real_operand_addr (compute_real_address operand_addr rfile_index))

    (array_set
        short
        (+ (vector_at codes rfile_index) operand_addr)
        0
        (+ (- real_addr real_operand_addr) 1)
        )
    ))

(fun replace_value_address (reloc_info) (
    (var sym (tuple_at reloc_info 0))
    (var rfile_index (tuple_at reloc_info 1))
    (var operand_addr (tuple_at reloc_info 3))
    (var export_info (lookup_symbol sym))
    (if (! export_info) (error "undefined symbol"))
    (var efile_index (tuple_at export_info 1))

    (var offset 0)
    (for i 0 efile_index (+= offset (ivector_at value_sizes i)))
    (var real_addr (+ offset (tuple_at export_info 3)))

    (array_set
        short
        (+ (vector_at codes rfile_index) operand_addr)
        0
        real_addr
        )
    ))

(fun replace_object_address (reloc_info) (
    (var sym (tuple_at reloc_info 0))
    (var rfile_index (tuple_at reloc_info 1))
    (var operand_addr (tuple_at reloc_info 3))
    (var export_info (lookup_symbol sym))
    (if (! export_info) (error "undefined symbol"))
    (var efile_index (tuple_at export_info 1))

    (var offset 0)
    (for i 0 efile_index (+= offset (ivector_at nrefs i)))
    (var real_index (+ offset (tuple_at export_info 3)))

    (array_set
        short
        (+ (vector_at codes rfile_index) operand_addr)
        0
        real_index
        )
    ))

(fun replace_svalue_address (reloc_info) (
    (var rfile_index (tuple_at reloc_info 1))
    (var operand_addr (tuple_at reloc_info 3))
    (var offset 0)
    (for i 0 rfile_index (+= offset (ivector_at value_sizes i)))
    (var real_addr (+ offset
        (array_get short (+ (vector_at codes rfile_index) operand_addr) 0)))
    (array_set
        short
        (+ (vector_at codes rfile_index) operand_addr)
        0
        real_addr
        )
    ))

(fun replace_sobject_address (reloc_info) (
    (var rfile_index (tuple_at reloc_info 1))
    (var operand_addr (tuple_at reloc_info 3))
    (var offset 0)
    (for i 0 rfile_index (+= offset (ivector_at nrefs i)))
    (var real_index (+ offset
        (array_get short (+ (vector_at codes rfile_index) operand_addr) 0)))
    (array_set
        short
        (+ (vector_at codes rfile_index) operand_addr)
        0
        real_index
        )
    ))

(fun replace_addresses () (
    (for i 0 (vector_size relocate_symbols) (do
        (var reloc_info (vector_at relocate_symbols i))
        (var type (tuple_at reloc_info 2))

        (if (== type @RELOC_FUNCTION)
            (replace_function_address reloc_info)
        (if (== type @RELOC_VALUE)
            (replace_value_address reloc_info)
        (if (== type @RELOC_OBJECT)
            (replace_object_address reloc_info)
        (if (== type @RELOC_SVALUE)
            (replace_svalue_address reloc_info)
        (if (== type @RELOC_SOBJECT)
            (replace_sobject_address reloc_info)
            )))))
        ))
    ))

(fun lookup_main () (
    (var main_info (lookup_symbol "main"))
    (if (! main_info) (error "undefined symbol main"))
    (var file_index (tuple_at main_info 1))
    (var real_addr (tuple_at main_info 3))
    (= real_addr (compute_real_address real_addr file_index))
    (return real_addr)
    ))

(fun output_startup (oc) (
    ; XXX: should not hardcode instructions

    (var call_addr 0)
    (var init_addr startup_len)
    (for i 0 num_files (do
        ; call init-function
        (output_byte oc @(car call_info))
        (output_short oc (- init_addr call_addr))
        (output_byte oc 0)
        (output_byte oc @(car drop_info))
        (+= call_addr @call_init_len)
        (+= init_addr (ivector_at code_lens i))
        ))

    (output_byte oc @(car pcall_info))
    (output_short oc @cmd_argv_index)
    (output_byte oc 0)
    (output_byte oc @(car pcall_info))
    (output_short oc @cmd_argc_index)
    (output_byte oc 0)

    (+= call_addr 8)

    (output_byte oc @(car call_info))
    (var main_address (lookup_main))
    (output_short oc (- main_address call_addr))
    (output_byte oc 8)

    (output_byte oc @(car exit_info))
    ))

(fun output_executable (file) (
    (var oc (open_out file))

    (output_word oc @EXE_MAGIC)

    (output_word oc total_nref)

    (output_word oc total_vsize)
    (for i 0 (vector_size values) (do
        (output_bytes oc (vector_at values i) (ivector_at value_sizes i))
        ))

    (output_word oc total_len)
    (output_startup oc)
    (for i 0 (vector_size codes) (do
        (var codelen (ivector_at code_lens i))
        (output_bytes oc (vector_at codes i) codelen)
        ))

    (close_out oc)
    ))

    ))
