;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-numeric.rlc 2011-09-28 14:06:58 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-node")
(import "rowl1-compile")

(fun compile_uplus (asm env expr)  ((compile_unary asm env expr "UnaryPlus")))
(fun compile_uminus (asm env expr) ((compile_unary asm env expr "UnaryMinus")))
(fun compile_not (asm env expr)    ((compile_unary asm env expr "Not")))
(fun compile_times (asm env expr)  ((compile_binary asm env expr "Times")))
(fun compile_divide (asm env expr) ((compile_binary asm env expr "Divide")))
(fun compile_mod (asm env expr)    ((compile_binary asm env expr "Mod")))
(fun compile_plus (asm env expr)   ((compile_binary asm env expr "Plus")))
(fun compile_minus (asm env expr)  ((compile_binary asm env expr "Minus")))
(fun compile_lt (asm env expr)     ((compile_binary asm env expr "LessThan")))
(fun compile_gt (asm env expr)     ((compile_binary asm env expr "GreaterThan")))
(fun compile_le (asm env expr)     ((compile_binary asm env expr "LessEqual")))
(fun compile_ge (asm env expr)     ((compile_binary asm env expr "GreaterEqual")))

(fun int_uplus (x) (
    (return x)
    ))

(fun int_uminus (x) (
    (return (+ (- x) 2))
    ))

(fun not (x) (
    (if (== x false)  ; box 0 = 1
        (return true) ; box 1 = 3
        (return false)
        )
    ))

(fun int_times (x y) (
    (return (box (* (unbox x) (unbox y))))
    ))

(fun int_divide (x y) (
    ; XXX: check division by 0
    (return (box (/ (unbox x) (unbox y))))
    ))

(fun int_mod (x y) (
    ; XXX: check division by 0
    (return (box (% (unbox x) (unbox y))))
    ))

(fun int_plus (x y) (
    (return (- (+ x y) 1))
    ))

(fun int_minus (x y) (
    (return (+ (- x y) 1))
    ))

(fun int_lt (x y) ((if (< x y) (return true) (return false))))
(fun int_gt (x y) ((if (> x y) (return true) (return false))))
(fun int_le (x y) ((if (<= x y) (return true) (return false))))
(fun int_ge (x y) ((if (>= x y) (return true) (return false))))

(export fun setup_numeric (env) (
    (var tbl (get_vartable env))
    ; compilers

    (add_compiler tbl (headP (to_sym "UnaryPlus")) compile_uplus)
    (add_compiler tbl (headP (to_sym "UnaryMinus")) compile_uminus)
    (add_compiler tbl (headP (to_sym "Not")) compile_not)
    (add_compiler tbl (headP (to_sym "Times")) compile_times)
    (add_compiler tbl (headP (to_sym "Divide")) compile_divide)
    (add_compiler tbl (headP (to_sym "Mod")) compile_mod)
    (add_compiler tbl (headP (to_sym "Plus")) compile_plus)
    (add_compiler tbl (headP (to_sym "Minus")) compile_minus)
    (add_compiler tbl (headP (to_sym "LessThan")) compile_lt)
    (add_compiler tbl (headP (to_sym "GreaterThan")) compile_gt)
    (add_compiler tbl (headP (to_sym "LessEqual")) compile_le)
    (add_compiler tbl (headP (to_sym "GreaterEqual")) compile_ge)

    ; integer arithmetic
    (var IntT (headP Int))
    (add_builtin_function1 tbl (to_sym "UnaryPlus") Int int_uplus)
    (add_builtin_function1 tbl (to_sym "UnaryMinus") Int int_uminus)
    (add_builtin_function1 tbl (to_sym "Not") DontCare not)
    (add_builtin_function2 tbl (to_sym "Times") Int Int int_times)
    (add_builtin_function2 tbl (to_sym "Divide") Int Int int_divide)
    (add_builtin_function2 tbl (to_sym "Mod") Int Int int_mod)
    (add_builtin_function2 tbl (to_sym "Plus") Int Int int_plus)
    (add_builtin_function2 tbl (to_sym "Minus") Int Int int_minus)
    (add_builtin_function2 tbl (to_sym "LessThan") Int Int int_lt)
    (add_builtin_function2 tbl (to_sym "GreaterThan") Int Int int_gt)
    (add_builtin_function2 tbl (to_sym "LessEqual") Int Int int_le)
    (add_builtin_function2 tbl (to_sym "GreaterEqual") Int Int int_ge)
    ))

    ))
