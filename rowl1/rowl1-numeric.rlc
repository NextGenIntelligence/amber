;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-numeric.rlc 2012-09-11 18:12:16 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-node")
(import "rowl1-compile")

(extern object current_loc)

(fun int_uplus (x) (
    (return x)
    ))

(fun int_uminus (x) (
    (return (+ (- x) 2))
    ))

(fun int_add (x y _) (
    (return (- (+ x y) 1))
    ))

(fun int_sub (x y _) (
    (return (+ (- x y) 1))
    ))

(fun int_mul (x y _) (
    (return (box (* (unbox x) (unbox y))))
    ))

(fun int_pow (x y _) (
    (var v 1)
    (= x (unbox x))
    (= y (unbox y))
    (var m 0x40000000)
    (while (! (& y m)) (>>= m 1))
    (while (> m 0) (do
        (*= v v)
        (if (& y m) (*= v x))
        (>>= m 1)
        ))
    (return (box v))
    ))

(fun nonzero_check (x) (
    (if (== x 1) ; box(0) == 1
        (do
            (output_error stderr current_loc)
            (output_string stderr "division by zero\n")
            (exit 1)
        ))
    ))

(fun int_div (x y _) (
    (nonzero_check y)
    (return (box (/ (unbox x) (unbox y))))
    ))

(fun int_mod (x y _) (
    (nonzero_check y)
    (return (box (% (unbox x) (unbox y))))
    ))

(fun int_lt (x y) ((if (< x y) (return true) (return false))))
(fun int_gt (x y) ((if (> x y) (return true) (return false))))
(fun int_le (x y) ((if (<= x y) (return true) (return false))))
(fun int_ge (x y) ((if (>= x y) (return true) (return false))))

(fun int_to_s (n) (
    (return (itos (unbox n)))
    ))

(fun int_hash (n) (
    (return n)
    ))

(fun int_times (n f) (
    (var code (get_bytecode (string "argument for times") f))
    (for i 0 (unbox n) (do
        (byterun code (box i))
        ))
    (return nil)
    ))

(export fun setup_numeric (mod) (
    ; integer arithmetic
    (add_builtin_function1 mod (to_sym "uplus") intT int_uplus 0)
    (add_builtin_function1 mod (to_sym "uminus") intT int_uminus 0)
    (add_builtin_function3 mod (to_sym "add") intT intT DontCare int_add 0)
    (add_builtin_function3 mod (to_sym "sub") intT intT DontCare int_sub 0)
    (add_builtin_function3 mod (to_sym "mul") intT intT DontCare int_mul 0)
    (add_builtin_function3 mod (to_sym "pow") intT intT DontCare int_pow 0)
    (add_builtin_function3 mod (to_sym "div") intT intT DontCare int_div 0)
    (add_builtin_function3 mod (to_sym "mod") intT intT DontCare int_mod 0)
    (add_builtin_function2 mod (to_sym "lt") intT intT int_lt 0)
    (add_builtin_function2 mod (to_sym "gt") intT intT int_gt 0)
    (add_builtin_function2 mod (to_sym "le") intT intT int_le 0)
    (add_builtin_function2 mod (to_sym "ge") intT intT int_ge 0)
    (add_builtin_function1 mod (to_sym "to_s") intT int_to_s 0)
    (add_builtin_function1 mod (to_sym "hash") intT int_hash 0)

    (add_builtin_function2 mod (to_sym "times") intT funT int_times 0) 
    ))

    ))
