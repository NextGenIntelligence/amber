;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl1-node.rlc 2010-11-26 21:19:30 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")

(var symbol_table (make_idtable))
(var symbol_index_gen 0)

; special symbols
(export var AnySym (to_symbol "_"))
(export var GlobalFunctionSym (to_symbol "%global-function"))
(export var LocalFunctionSym (to_symbol "%local-function"))
(export var ArgumentC (to_symbol "%argument"))
(export var TypePatC (to_symbol "%type-pattern"))

(export var IntType (to_symbol "Int"))

(export var DeclOp (to_symbol ":"))
(export var TypeAnnotOp (to_symbol "!"))

(export fun to_symbol (name) (
    (var sym (idtable_find symbol_table name))
    (if sym (return sym))
    (= name (strdup name))
    (= sym (variant @Symbol 1 name symbol_index_gen))
    (+= symbol_index_gen 1)
    (idtable_add symbol_table name sym)
    (return sym)
    ))

(export fun make_float_from_string (str) (
    (error "floating-point literals are not supported yet")
    ))

(export fun node_type (obj) (
    (if (! obj) (error "node_type: null object"))
    (if (& obj 1) (return @Int))
    (var tag (get_tag obj))
    (if (== tag @TAG_VARIANT) (return (field_get obj 0)))
    (return (+ (get_plain_tag obj) @BUILTIN_TYPE_OFFSET))
    ))

; XXX: output precise information
(export fun check_type (name type obj) (
    (if (|| (! obj) (!= (node_type obj) type)) (do
        (output_string stderr name)
        (output_string stderr ": invalid argument\n")
        (exit 1)
        ))
    ))

; Pretty Printing
(var indent_depth 0)
(var indent_width 4)
(export fun pp_prog (ochan prog) (
    (= indent_depth 0)
    (pp_list_body ochan (field_get prog 1))
    ))

(export fun pp_expr (ochan node) (
    (tswitch (node_type node) (
    (@Symbol  . (return (pp_symbol ochan node)))
    (@List    . (return (pp_list ochan node)))
    (@Tuple   . (return (pp_tuple ochan node)))
    (@Array   . (return (pp_array ochan node)))
    (@Node    . (return (pp_node ochan node)))
    (@Prefix  . (return (pp_prefix ochan node)))
    (@Postfix . (return (pp_postfix ochan node)))
    (@Infix   . (return (pp_infix ochan node)))
    (@Call    . (return (pp_call ochan node)))
    (@Subscr  . (return (pp_subscr ochan node)))
    (@Int     . (return (pp_int ochan node)))
    (@Float   . (return (pp_float ochan node)))
    (@String  . (return (pp_string ochan node)))
    (default  . (error "pp_expr: not reachable"))
        ))
    ))

(fun pp_symbol (ochan node) (
    (var name (field_get node 1))
    (output_string ochan name)
    ))

(fun pp_int (ochan node) (
    (var value (field_get node 1))
    (output_int ochan value)
    ))

(array char pp_float_digits 10)
(fun pp_float (ochan node) (
    (var sign (field_get node 1))
    (if sign (output_char ochan '-'))
    (var man  (field_get node 2))
    (array_set char pp_float_digits 0 (+ (% man 10) '0'))
    (/= man 10)
    (var i 0)
    (while (!= man 0) (do
        (incr i)
        (array_set char pp_float_digits i (+ (% man 10) '0'))
        (/= man 10)
        ))
    (output_char ochan (array_get char pp_float_digits i))
    (output_char ochan '.')
    (decr i)
    (if (< i 0)
        (output_char ochan '0')
        (while (>= i 0) (do
            (output_char ochan (array_get char pp_float_digits i))
            (decr i)
            ))
        )
    (var exp  (field_get node 3))
    (if (!= exp 0) (do
        (output_char ochan 'e')
        (output_int ochan exp)
        ))
    ))

(fun pp_string (ochan node) (
    (var str (field_get node 1))
    (var len (strlen str))
    (output_char ochan '"')
    (for i 0 len (do
        (output_char_escape ochan (array_get char str i))
        ))
    (output_char ochan '"')
    ))

(fun put_indent (ochan) (
    (for i 0 (* indent_width indent_depth) (output_char ochan ' '))
    ))

(fun pp_list (ochan node) (
    (output_string ochan "{\n")
    (+= indent_depth 1)
    (pp_list_body ochan (field_get node @ListValues))
    (-= indent_depth 1)
    (output_char ochan '}')
    ))

(fun pp_list_body (ochan list) (
    (while list (do
        (put_indent ochan)
        (pp_expr ochan (car list))
        (output_char ochan '\n')
        (= list (cdr list))
        ))
    ))

(fun pp_tuple (ochan node) (
    (output_char ochan '(')
    (pp_comma_list ochan (field_get node @TupleValues))
    (output_char ochan ')')
    ))

(fun pp_array (ochan node) (
    (output_char ochan '[')
    (pp_comma_list ochan (field_get node @ArrayValues))
    (output_char ochan ']')
    ))

(fun pp_comma_list (ochan list) (
    (while list (do
        (pp_expr ochan (car list))
        (= list (cdr list))
        (if list (output_string ochan ", "))
        ))
    ))

(fun pp_node (ochan node) (
    (var sym (field_get node @NodeConstr))
    (var size (variant_size node))
    (output_char ochan '(')
    (pp_symbol ochan sym)
    (for i @NodeArgsOff size (do
        (output_char ochan ' ')
        (pp_expr ochan (load object node i))
        ))
    (output_char ochan ')')
    ))

(fun pp_prefix (ochan node) (
    (var op (field_get node 1))
    (var arg (field_get node 2))
    (output_string ochan "(pre ")
    (pp_symbol ochan op)
    (output_char ochan ' ')
    (pp_expr ochan arg)
    (output_char ochan ')')
    ))

(fun pp_postfix (ochan node) (
    (var op (field_get node 1))
    (var arg (field_get node 2))
    (output_string ochan "(post ")
    (pp_symbol ochan op)
    (output_char ochan ' ')
    (pp_expr ochan arg)
    (output_char ochan ')')
    ))

(fun pp_infix (ochan node) (
    (var op (field_get node 1))
    (var lhs (field_get node 2))
    (var rhs (field_get node 3))
    (output_char ochan '(')
    (pp_symbol ochan op)
    (output_char ochan ' ')
    (pp_expr ochan lhs)
    (output_char ochan ' ')
    (pp_expr ochan rhs)
    (output_char ochan ')')
    ))

(fun pp_call (ochan node) (
    (var expr (field_get node 1))
    (var args (field_get node 2))
    (pp_expr ochan expr)
    (output_char ochan '(')
    (pp_comma_list ochan args)
    (output_char ochan ')')
    ))

(fun pp_subscr (ochan node) (
    (var expr (field_get node 1))
    (var args (field_get node 2))
    (pp_expr ochan expr)
    (output_char ochan '[')
    (pp_comma_list ochan args)
    (output_char ochan ']')
    ))

    ))
