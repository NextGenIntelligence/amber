;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-string.rlc 2012-12-15 10:45:36 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-module")
(import "rowl1-compile")
(import "rowl1-error")

(extern object current_loc)

(fun s_size (s) (
    (return (box (strlen s)))
    ))

(fun s_equal (a b) (
    (if (streq a b)
        (return @C_TRUE)
        (return @C_FALSE)
        )
    ))

(fun s_hash (s) (
    (var len (strlen s))
    (var h 0)
    (for i 0 len (do
        (+= h (array_get char s i))
        ))
    (return (box h))
    ))

(fun s_to_s (s) (
    (return s)
    ))

(fun s_add (a b) (
    (return (strcat a b))
    ))

(fun s_add2 (a b) (
    (var to_s (to_sym "to_s"))
    (= a (call1 to_s a))
    (= b (call1 to_s b))
    (return (strcat a b))
    ))

(fun s_unescape (s) (
    (= s (strdup s))
    (unescape_string_d s)
    (return s)
    ))

(fun s_code (s) (
    (var len (strlen s))
    (if (!= len 1) (throw (invalid_argument current_loc
        (string "`code' requires a string of length 1")
        s)))
    (return (box (array_get char s 0)))
    ))

(fun s_char (i) (
    (= i (unbox i))
    (if (& i 0xffffff00) (throw (invalid_argument current_loc
        (string "`char' requires number between 0 and 255")
        (box i))))
    (return (ctos i))
    ))

(fun s_at (s i) (
    (= i (unbox i))
    (var len (strlen s))
    (if (< i 0) (+= i len))
    (if (|| (>= i len) (< i 0))
        (throw (out_of_range current_loc s (box i))))
    (return (ctos (array_get char s i)))
    ))

(fun s_store (s i c) (
    (if (!= (strlen c) 1)
        (throw (invalid_argument current_loc (string "2nd argument of store for String must be one character") c))
        )
    (= i (unbox i))
    (var len (strlen s))
    (if (< i 0) (+= i len))
    (if (|| (>= i len) (< i 0))
        (throw (out_of_range current_loc s (box i))))
    (array_set char s i (array_get char c 0))
    (return c)
    ))

(fun s_at_range (s r) (
    (var b (node_arg_int r 0))
    (var e (node_arg_int r 1))
    (var len (strlen s))
    (if (< b 0) (+= b len))
    (if (< e 0) (+= e len))
    (if (> b e)
        (throw (invalid_argument current_loc (string "Not valid range") r))
        )
    (if (|| (>= e len) (< b 0))
        (throw (out_of_range current_loc s r))
        )
    (var str (allocate_string (+ (- e b) 1)))
    (memcpy str (+ s b) (+ (- e b) 1))
    (return str)
    ))

;; StringIO
(fun new_sio () (
    (return (variant @StringIOE 1 (make_sio)))
    ))

(fun sio_to_s (io) (
    (return (string (sio_get (field_get io 1))))
    ))

(fun sio_print_symbol (io sym) (
    (output_string (field_get io 1) (symbol_name sym))
    (return @C_NIL)
    ))

(fun sio_print_str (io str) (
    (output_string (field_get io 1) str)
    (return @C_NIL)
    ))

(fun sio_print_int (io n) (
    (output_int (field_get io 1) (unbox n))
    (return @C_NIL)
    ))

(export fun setup_string (std) (
    (add_function1 std (to_sym "size") stringT s_size 0)
    (add_function2 std (to_sym "equal") stringT stringT s_equal 0)
    (add_function1 std (to_sym "hash") stringT s_hash 0)
    (add_function1 std (to_sym "to_s") stringT s_to_s 0)
    (add_function2 std (to_sym "add") stringT stringT s_add 0)
    (add_function2 std (to_sym "add") stringT DontCare s_add2 0)
    (add_function2 std (to_sym "add") DontCare stringT s_add2 0)

    (add_function1 std (to_sym "char") intT s_char 0)
    (add_function1 std (to_sym "code") stringT s_code 0) 

    (add_function2 std (to_sym "at") stringT intT s_at 0)
    (add_function2 std (to_sym "at") stringT irangeT s_at_range 0)
    (add_function3 std (to_sym "store") stringT intT stringT s_store 0)

    (add_function1 std (to_sym "unescape") stringT s_unescape 0)

    ; StringIO module
    (var sioT (domainP StringIO))
    (var SIO (find_module no_loc std (to_sym "StringIO") @TRUE))

    (add_function0 SIO (to_sym "new") new_sio 0)
    (add_function1 std (to_sym "to_s") sioT sio_to_s 0)

    (var IO (find_module no_loc std (to_sym "IO") @TRUE))
    (add_function2 IO (to_sym "print") sioT symT sio_print_symbol 0)
    (add_function2 IO (to_sym "print") sioT stringT sio_print_str 0)
    (add_function2 IO (to_sym "print") sioT intT sio_print_int 0)
    ))

    ))
