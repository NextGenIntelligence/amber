;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-node.rlc 2014-02-18 01:00:58 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")

(export fun exception (msg) (
    (return (make_object1 Exception msg))
    ))

(export fun exception1 (msg arg) (
    (return (make_object2 Exception msg arg))
    ))

(export fun exception2 (msg arg1 arg2) (
    (return (make_object3 Exception msg arg1 arg2))
    ))

(export fun logic_error (msg) (
    (return (make_object1 (to_sym "LogicError") msg))
    ))

(export fun logic_error1 (msg arg) (
    (return (make_object2 (to_sym "LogicError") msg arg))
    ))

(export fun logic_error2 (msg arg1 arg2) (
    (return (make_object3 (to_sym "LogicError") msg arg1 arg2))
    ))

(export fun invalid_argument (msg val) (
    (return (make_object2 (to_sym "InvalidArgument") msg val))
    ))

(export fun invalid_argument_order (msg args) (
    (return (make_object2 (to_sym "InvalidArgumentOrder") msg args))
    ))

(export fun value_error (msg val) (
    (return (make_object2 (to_sym "ValueError") msg val))
    ))

(export fun not_found (expr) (
    (return (make_object1 (to_sym "NotFound") expr))
    ))

(export fun type_error (required actual) (
    (return (make_object2 (to_sym "TypeError") 
        (make_object1 (to_sym "expected") required)
        (make_object1 (to_sym "value") actual)
        ))
    ))

(export fun out_of_range (obj idx) (
    (return (make_object2 (to_sym "IndexOutOfRange") 
        (make_object1 (to_sym "object") obj)
        (make_object1 (to_sym "index") idx)
        ))
    ))

(export fun out_of_domain (fun arg) (
    (return (make_object2 (to_sym "OutOfDomain") 
        (make_object1 (to_sym "function") fun)
        (make_object1 (to_sym "argument") arg)
        ))
    ))

(export fun invalid_slotname (val) (
    (return (make_object1 (to_sym "InvalidSlotName") val))
    ))

(export fun invalid_varname (val) (
    (return (make_object1 (to_sym "InvalidVariableName") val))
    ))


(export fun unexpected_error (msg val) (
    (return (make_object2 (to_sym "Unexpected") msg val))
    ))

(export fun matching_failed (pat self args) (
    (if (== self @C_UNDEF)
        (return (make_object2 (to_sym "MatchingFailed") 
            (make_object1 (to_sym "function") pat)
            (make_object1 (to_sym "args") args)
            ))
        (return (make_object3 (to_sym "MatchingFailed")
            (make_object1 (to_sym "function") pat)
            (make_object1 (to_sym "self") self)
            (make_object1 (to_sym "args") args)
            )))
    ))

(export fun unknown_field (head sym) (
    (return (make_object2 (to_sym "UnknownField")
        (make_object1 (to_sym "struct") head)
        (make_object1 (to_sym "field") sym)
        ))
    ))

(export fun undefined_var (sym) (
    (return (make_object1 (to_sym "UndefinedVariable") sym))
    ))

(export fun redefined_var (sym) (
    (return (make_object1 (to_sym "RedefinedVariable") sym))
    ))

(export fun undefined_slot (obj sym) (
    (return (make_object2 (to_sym "UndefinedSlot") obj sym))
    ))

(export fun redefined_slot (obj sym) (
    (return (make_object2 (to_sym "RedefinedSlot") obj sym))
    ))

(export fun undefined_fun (sym) (
    (return (make_object1 (to_sym "UndefinedFunction") sym))
    ))

(export fun unknown_expression (expr) (
    (return (make_object1 (to_sym "UnknownExpression") expr))
    ))

(export fun division_by_zero () (
    (return (make_object0 (to_sym "DivisionByZero") ))
    ))

(export fun bug (msg) (
    (return (make_object1 (to_sym "Bug") msg))
    ))

    ))
