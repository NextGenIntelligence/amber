;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: vm-prim-wrtable.rlc 2014-04-08 10:58:31 nineties $
;

; Weak reference table from object to object
; No scoping capability is supported.

(import "stdlib")
(import "vm-compile")

(var vm-prim-code `(

; structure of objects
;
; table
;     0 : bucket
;     1 : list of entries
;     2 : size of the bucket
;     3 : # of entries
;
; table entry
;     0 : pointer to the next entry in the bucket
;     1 : pointer to the next entry in the list of entries
;     2 : the key
;     3 : the value
;     4 : true if this entry is alive

(int[] 32 prime_numbers (
    5 11 17 37 67 131 257 521 1031 2053 4099 8209 16411 32771 65537 131101
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    ))

(void* wrtable_list 0)
(extern int stop_GC)

(export prim_make_wrtable)
(fun prim_make_wrtable () (
    (= stop_GC @TRUE)
    (int size (get prime_numbers 0))
    (void* bucket (prim_allocate_array size))
    (void* tbl (prim_make_struct4 2 bucket 0 size 0))
    (= wrtable_list (cons tbl wrtable_list))
    (= stop_GC @FALSE)
    (return tbl)
    ))

(export prim_wrtable_size)
(fun prim_wrtable_size (tbl) (
    (return (get tbl 3))
    ))

(export move_wrtable_entries)
(fun move_wrtable_entries () (
    (int changed 0)
    (void* list wrtable_list)
    (while list (
        (void* tbl (get list 0))
        (void* entry (get tbl 1))
        (while entry (
            (void* key (get entry 2))
            (void* value (get entry 3))
            (void* prev 0)
            (int alive (is_alive key))
            (if (&& alive (|| (require_move key) (require_move value)))
                (
                    (move_object (+ entry (* 2 @WORD_SIZE)))
                    (move_object (+ entry (* 3 @WORD_SIZE)))
                    (= changed 1)
                ))
            (set entry 4 alive)
            (= entry (get entry 1))
            ))
        (= list (get list 1))
        ))
    (return changed)
    ))

(fun rehash (table force) (
    (int old_size (get table 2))
    (int n_entry (get table 3))
    (if (|| (> n_entry old_size) force) (
        (int size (get prime_numbers (bsr n_entry)))
        (if (! size) (
            (if (! force) ((return)))
            (= size old_size)
            ))
        (void* bucket (prim_allocate_array size))
        (void* entry (get table 1))
        (void* prev 0)
        (int n_entry2 0)
        (while entry (
            (if (get entry 4)
                (
                    (int h (% (get entry 2) size))
                    (set entry 0 (get bucket h))
                    (set bucket h entry)
                    (incr n_entry2)
                    (= prev entry)
                )
                (
                    (if prev
                        ((set prev 1 (get entry 1)))
                        ((set table 1 (get entry 1)))
                        )
                ))
            (= entry (get entry 1))
            (decr n_entry)
            ))
        (set table 0 bucket)
        (set table 2 size)
        (set table 3 n_entry2)
        ))
    ))

(export update_wrtable_list)
(fun update_wrtable_list () (
    (= stop_GC @TRUE)
    (void* list wrtable_list)
    (while list (
        (rehash (get list 0) @TRUE)
        (= list (get list 1))
        ))
    (= stop_GC @FALSE)
    ))

(export prim_wrtable_add)
(fun prim_wrtable_add (table key val) (
    (= stop_GC @TRUE)

    (int size (get table 2))
    (void* bucket (get table 0))
    (int h (% key size))
    (void* entry (get bucket h))
    (while entry (
        (void* e_key (get entry 2))
        (if (== key e_key) (
            (set entry 3 val)
            (= stop_GC @FALSE)
            (return)
            ))
        (= entry (get entry 0))
        ))

    (rehash table @FALSE)
    (= entry (prim_make_struct5 2 0 0 key val @TRUE))

    (= bucket (get table 0))
    (= size (get table 2))
    (= h (% key size))

    ; add the entry to the bucket
    (set entry 0 (get bucket h))
    (set bucket h entry)

    (set entry 1 (get table 1))
    (set table 1 entry)
    (set table 3 (+ (get table 3) 1))
    (= stop_GC @FALSE)
    ))

(export prim_wrtable_del)
(fun prim_wrtable_del (table key) (
    (= stop_GC @TRUE)

    (int size (get table 2))
    (void* bucket (get table 0))
    (int h (% key size))
    (void* entry (get bucket h))
    (void* prev 0)
    (while entry (
        (void* e_key (get entry 2))
        (if (== key e_key) (
            (if prev
                ((set prev 0 (get entry 0)))
                ((set bucket h (get entry 0)))
                )
            (set table 3 (- (get table 3) 1))
            (= stop_GC @FALSE)
            (return)
            ))
        (= prev entry)
        (= entry (get entry 0))
        ))
    (= stop_GC @FALSE)
    ))

(export prim_wrtable_find)
(fun prim_wrtable_find (table key) (
    (int size (get table 2))
    (void* bucket (get table 0))
    (int h (% key size))
    (void* entry (get bucket h))
    (while entry (
        (void* e_key (get entry 2))
        (if (== key e_key) (
            (void* v (get entry 3))
            (return v)
            ))
        (= entry (get entry 0))
        ))
    (return @C_UNDEF)
    ))

(export prim_wrtable_findref)
(fun prim_wrtable_findref (table key) (
    (int size (get table 2))
    (void* bucket (get table 0))
    (int h (% key size))
    (void* entry (get bucket h))
    (while entry (
        (void* e_key (get entry 2))
        (if (== key e_key) (
            (return entry)
            ))
        (= entry (get entry 0))
        ))
    (return @C_UNDEF)
    ))

(export prim_wrtable_entries)
(fun prim_wrtable_entries (table) (
    (return (get table 1))
    ))

(export init_prim_wrtable)
(fun init_prim_wrtable () (
    (register_static (address wrtable_list))
    ))

    ))

(vtable_push)
(compile vm-prim-code)
(vtable_pop)
