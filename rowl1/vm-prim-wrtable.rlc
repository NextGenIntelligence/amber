;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: vm-prim-wrtable.rlc 2013-02-05 11:08:50 nineties $
;

; Weak reference table from object to object
; No scoping capability is supported.

(import "stdlib")
(import "vm-compile")

(var vm-prim-code `(

; structure of objects
;
; table
;     0 : bucket
;     1 : list of entries
;     2 : size of the bucket
;     3 : # of entries
;
; table entry
;     0 : the key
;     1 : the value
;     2 : pointer to the next entry in bucket
;     3 : pointer to the next entry in list of entries

(int[] 32 prime_numbers (
    5 11 17 37 67 131 257 521 1031 2053 4099 8209 16411 32771 65537 131101
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    ))

(void* wrtable_list 0)

(export prim_make_wrtable)
(fun prim_make_wrtable () (
    (int size (get prime_numbers 1))
    (void* bucket (prim_allocate_array size))
    (void* tbl (prim_make_struct4 0 bucket 0 size 0))
    (= wrtable_list (cons tbl wrtable_list))
    (return tbl)
    ))

(export update_wrtable_list)
(fun update_wrtable_list () (
    (int changed 0)
    (void* list wrtable_list)
    (while list (
        (void* tbl (get list 0))
        (void* entry (get tbl 1))
        (while entry (
            (void* key (get entry 0))
            (void* value (get entry 1))
            (if (&& (is_alive key) (! (is_alive value)))
                (
                    (= changed 1)
                    (move_object entry)
                    (move_object (+ entry 4))
                    (= changed 1)
                ))
            (= entry (get entry 3))
            ))
        (= list (get list 1))
        ))
    (return changed)
    ))

(export replace_wrtable_entries)
(fun replace_wrtable_entries () (
    (void* list wrtable_list)
    (while list (
        (void* tbl (get list 0))
        (int size (get tbl 2))
        (void* bucket (prim_allocate_array size))
        (void* entry (get tbl 1))

        (set tbl 0 bucket)
        (set tbl 1 0)
        (set tbl 3 0)

        (while entry (
            (void* key (get entry 0))
            (if (is_alive key) (
                (prim_wrtable_add tbl key (get entry 1))
                ))
            (= entry (get entry 3))
            ))
        (= list (get list 1))
        ))
    ))

(fun rehash (table) (
    (int old_size (get table 2))
    (int n_entry (get table 3))
    (if (> n_entry old_size) (
        (int size (get prime_numbers (bsr n_entry)))
        (if (! size) (
            (error "too many objects")
            ))
        (void* bucket (prim_allocate_array size))
        (void* entry (get table 1))
        (while entry (
            (int h (% (get entry 0) size))
            (set entry 2 (get bucket h))
            (set bucket h entry)
            (= entry (get entry 3))
            ))
        (set table 0 bucket)
        (set table 2 size)
        ))
    ))

(export prim_wrtable_add)
(fun prim_wrtable_add (table key val) (
    (int size (get table 2))
    (void* bucket (get table 0))
    (int h (% key size))
    (void* entry (get bucket h))
    (while entry (
        (void* e_key (get entry 0))
        (if (== key e_key) (
            (set entry 1 val)
            (return)
            ))
        (= entry (get entry 2))
        ))

    (rehash table)
    (void* ent (prim_make_struct4 0 key val 0 0))

    ; add the entry to the bucket
    (set ent 2 (get bucket h))
    (set bucket h ent)

    (set ent 3 (get table 1))
    (set table 1 ent)
    (set table 3 (+ (get table 3) 1))
    ))

(export prim_wrtable_find)
(fun prim_wrtable_find (table key) (
    (int size (get table 2))
    (void* bucket (get table 0))
    (int h (% key size))
    (void* entry (get bucket h))
    (while entry (
        (void* e_key (get entry 0))
        (if (== key e_key) ((return (get entry 1))))
        (= entry (get entry 2))
        ))
    (return @C_UNDEF)
    ))

(export init_prim_wrtable)
(fun init_prim_wrtable () (
    (register_static (address wrtable_list))
    ))

    ))

(vtable_push)
(compile vm-prim-code)
(vtable_pop)
