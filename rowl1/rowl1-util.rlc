;
; rowl - generation 1
; Copyright (C) 2010 nineties
;
; $Id: rowl1-util.rlc 2010-12-12 18:53:00 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(compile `object `(

(export fun output_char_escape (ochan t) (
    (if (== t '\\') (do (output_char ochan '\\') (output_char ochan '\\'))
    (if (== t '\a') (output_string ochan "\\a")
    (if (== t '\b') (output_string ochan "\\b")
    (if (== t '\f') (output_string ochan "\\f")
    (if (== t '\n') (output_string ochan "\\n")
    (if (== t '\r') (output_string ochan "\\r")
    (if (== t '\t') (output_string ochan "\\t")
    (if (== t '\v') (output_string ochan "\\v")
    (if (== t '\0') (output_string ochan "\\0")
        (output_char ochan t)
        )))))))))
    ))

(export fun output_string_escape (ochan str) (
    (var i 0)
    (while 1 (do
	(var c (array_get char str i))
	(if (! c) break)
	(output_char_escape ochan c)
	(incr i)
	))
    ))

(fun unescape_char (c) (
    (if (== c '\\') (return '\\'))
    (if (== c 'a') (return '\a'))
    (if (== c 'b') (return '\b'))
    (if (== c 'f') (return '\f'))
    (if (== c 'n') (return '\n'))
    (if (== c 'r') (return '\r'))
    (if (== c 't') (return '\t'))
    (if (== c 'v') (return '\v'))
    (if (== c '0') (return '\0'))
    (not_reachable "unescape_char")
    ))

(export fun unescape_string (str) (
    (var len (strlen str))
    (var i 0)
    (var j 0)
    (while (< i len) (do
        (var c (array_get char str i))
        (if (== c '\\') (do
            (incr i)
            (= c (unescape_char (array_get char str i)))
            ))
        (array_set char str j c)
        (incr i)
        (incr j)
        ))
    (array_set char str j 0)
    ))

(export fun list1 (v) (
    (return (cons v 0))
    ))

(export fun list2 (v1 v2) (
    (return (cons v1 (cons v2 0)))
    ))

(export fun list3 (v1 v2 v3) (
    (return (cons v1 (cons v2 (cons v3 0))))
    ))

(export fun list4 (v1 v2 v3 v4) (
    (return (cons v1 (cons v2 (cons v3 (cons v4 0)))))
    ))

(export fun list5 (v1 v2 v3 v4 v5) (
    (return (cons v1 (cons v2 (cons v3 (cons v4 (cons v5 0))))))
    ))

(export fun list_length (ls) (
    (var len 0)
    (while ls (do
        (= ls (cdr ls))
        (incr len)
        ))
    (return len)
    ))

(export fun list_reverse (ls) (
    (var new_ls 0)
    (while ls (do
        (= new_ls (cons (car ls) new_ls))
        (= ls (cdr ls))
        ))
    (return new_ls)
    ))

(export fun list_drop (ls n) (
    (while (> n 0) (do
        (= ls (cdr ls))
        (decr n)
        ))
    (return ls)
    ))

(export fun list_clone (ls) (
    (if (! ls) (return 0))
    (return (cons (car ls) (list_clone (cdr ls))))
    ))

(export fun list_split (ls n) (
    (if (== n 0) (return (cons 0 ls)))
    (var hd ls)
    (while (> n 1) (do
        (= ls (cdr ls))
        (decr n)
        ))
    (var tl (cdr ls))
    (setcdr ls 0)
    (return (cons hd tl))
    ))

(export fun not_reachable (name) (
    (flush stdout)
    (output_string stderr "INTERNAL ERROR: ")
    (output_string stderr name)
    (output_string stderr " : not reachable here")
    (exit 1)
    ))

(export fun not_implemented (name) (
    (flush stdout)
    (output_string stderr "INTERNAL ERROR: ")
    (output_string stderr name)
    (output_string stderr " : not implemented here")
    (exit 1)
    ))

    ))
