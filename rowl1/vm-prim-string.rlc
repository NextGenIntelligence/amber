;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: vm-prim-string.rlc 2014-03-12 09:45:57 nineties $
;

(import "stdlib")
(import "vm-compile")

(var vm-prim-code `(

(export prim_string)
(fun prim_string (str) (
    (int len (prim_strlen str))
    (void* ptr (allocate_pstruct @PLAIN_STRING (+ len 1)))
    (prim_strncpy ptr str len)
    (return ptr)
    ))

(export prim_ctos)
(fun prim_ctos (c) (
    (void* ptr (allocate_pstruct @PLAIN_STRING 2))
    ([]=8 ptr 0 c)
    ([]=8 ptr 1 0)
    (return ptr)
    ))
 
(export prim_itos)
(string ldigits "0123456789abcdefghijklmnopqrstuvwxyz")
(string udigits "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(fun prim_itos (num base prec upper unsigned) (
    (if (&& unsigned (< num 0))
        ((return (itos_unsigned num base prec upper)))
        ((return (itos_signed num base prec upper)))
        )
    ))
(fun itos_signed (num base prec upper) (
    (void* digits ldigits)
    (if upper ((= digits udigits)))
    (int sign 0)
    (if (< num 0) (
        (= sign 1)
        (= num (neg num))
        ))
    (int alloc 32)
    (if (> prec alloc) ((= alloc prec)))
    (if sign ((incr alloc)))
    (void* ptr (prim_allocate_string alloc))
    (int idx (- alloc 1))
    (set8 ptr idx ([]8 digits (% num base)))
    (decr idx)
    (decr prec)
    (= num (/ num base))
    (while (> num 0) (
        (set8 ptr idx ([]8 digits (% num base)))
        (= num (/ num base))
        (decr idx)
        (decr prec)
        ))
    (while (> prec 0) (
        (set8 ptr idx '0')
        (decr idx)
        (decr prec)
        ))
    (if sign ((set8 ptr idx '-') (decr idx)))
    (if (>= idx 0) ((prim_memcpy ptr (+ ptr (+ idx 1)) (- alloc idx))))
    (return (prim_strdup ptr))
    ))

(fun itos_unsigned (num base prec upper) (
    (void* digits ldigits)
    (if upper ((= digits udigits)))
    (= num (neg num))
    (int alloc 32)
    (if (> prec alloc) ((= alloc prec)))
    (void* ptr (prim_allocate_string alloc))
    (int idx (- alloc 1))
    (set8 ptr idx ([]8 digits (- base (% num base))))
    (decr idx)
    (decr prec)
    (= num (/ num base))
    (while (> num 0) (
        (set8 ptr idx ([]8 digits (- (- base (% num base)) 1)))
        (= num (/ num base))
        (decr idx)
        (decr prec)
        ))
    (while (> prec 0) (
        (set8 ptr idx ([]8 digits (- base 1)))
        (decr idx)
        (decr prec)
        ))
    (if (>= idx 0) ((prim_memcpy ptr (+ ptr (+ idx 1)) (- alloc idx))))
    (return (prim_strdup ptr))
    ))

(export prim_itos10)
(fun prim_itos10 (num) (
    (return (prim_itos num 10 0 @FALSE @FALSE))
    ))

(export prim_allocate_string)
(fun prim_allocate_string (n) (
    (void* p (allocate_pstruct @PLAIN_STRING (+ n 1)))
    (memset p 0 (+ n 1))
    (return p)
    ))

(export prim_strlen)
(fun prim_strlen (str) (
    (int len 0)
    (while (!= (*8 str) '\0') (
        (incr len)
        (incr str)
        ))
    (return len)
    ))

(export prim_streq)
(fun prim_streq (str1 str2) (
    (while (!= (*8 str1) '\0') (
        (if (!= (*8 str1) (*8 str2)) (
            (return @FALSE)
            ))
        (incr str1)
        (incr str2)
        ))
    (if (== (*8 str2) '\0')
        ((return @TRUE))
        ((return @FALSE))
        )
    ))

(export prim_strneq)
(fun prim_strneq (str1 str2 n) (
    (while (> n 0) (
        (if (== (*8 str1) '\0') (
            (return @FALSE)
            ))
        (if (!= (*8 str1) (*8 str2)) (
            (return @FALSE)
            ))
        (incr str1)
        (incr str2)
        (decr n)
        ))
    (return @TRUE)
    ))

(export prim_strcmp)
(fun prim_strcmp (str1 str2 n) (
    (while (!= (*8 str1) '\0') (
        (if (> (*8 str1) (*8 str2)) (
            (return 1)
            ))
        (if (< (*8 str1) (*8 str2)) (
            (return -1)
            ))
        (incr str1)
        (incr str2)
        ))
    (if (== (*8 str2) '\0')
        ((return 0))
        ((return -1))
        )
    ))

(export prim_strcpy)
(fun prim_strcpy (dst str) (
    (int len 0)
    (while (!= (*8 str) 0) (
        ([]=8 dst 0 (*8 str))
        (incr dst)
        (incr str)
        (+= len 1)
        ))
    ([]=8 dst 0 0)
    (return len)
    ))

; `len` the maximum length of characters excluding '\0' which can be copied.
(export prim_strncpy)
(fun prim_strncpy (dst str len) (
    (for i 0 len (
        ([]=8 dst 0 (*8 str))
        (if (== (*8 str) 0) ((return (+ i 1))))
        (incr dst)
        (incr str)
        ))
    ([]=8 dst 0 0)
    (return len)
    ))

(export prim_strdup)
(fun prim_strdup (str) (
    (int len (prim_strlen str))
    (void* new_str (allocate_pstruct @PLAIN_STRING (+ len 1)))
    (prim_strncpy new_str str len)
    (return new_str)
    ))

(export prim_strndup)
(fun prim_strndup (str len) (
    (void* new_str (allocate_pstruct @PLAIN_STRING (+ len 1)))
    (prim_strncpy new_str str len)
    (return new_str)
    ))

(export prim_strcat)
(fun prim_strcat (str1 str2) (
    (int len1 (prim_strlen str1))
    (int len2 (prim_strlen str2))
    (void* dst (allocate_pstruct @PLAIN_STRING (+ (+ len1 len2) 1)))
    (prim_strncpy dst str1 len1)
    (prim_strncpy (+ dst len1) str2 len2)
    (return dst)
    ))

; Append `src` to `dst`. `len` is the maxmum length of the result
; excluding '\0'.
(export prim_strlcat)
(fun prim_strlcat (dst src len) (
    (int len1 (prim_strlen dst))
    (int len2 (prim_strlen src))
    (if (> (+ len1 len2) len) (
        (= len2 (- len len1))
        ))
    (prim_strncpy (+ dst len1) src len2)
    (return (+ len1 len2))
    ))

))

(vtable_push)
(compile vm-prim-code)
(vtable_pop)
