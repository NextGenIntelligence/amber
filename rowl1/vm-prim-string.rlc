;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: vm-prim-string.rlc 2014-01-28 00:15:08 nineties $
;

(import "stdlib")
(import "vm-compile")

(var vm-prim-code `(

(export prim_string)
(fun prim_string (str) (
    (int len (+ (prim_strlen str) 1))
    (void* ptr (allocate_pstruct @PLAIN_STRING len))
    (prim_strlcpy ptr str len)
    (return ptr)
    ))

(export prim_ctos)
(fun prim_ctos (c) (
    (void* ptr (allocate_pstruct @PLAIN_STRING 2))
    ([]=8 ptr 0 c)
    ([]=8 ptr 1 0)
    (return ptr)
    ))
 
(export prim_itos)
(char[] 10 int_digits)
(fun prim_itos (num) (
    (void* ptr (allocate_pstruct @PLAIN_STRING 12))
    (int idx 0)
    (if (< num 0) (
        ([]=8 ptr idx '-')
        (incr idx)
        (= num (neg num))
        ))
    (set8 int_digits 0 (+ (% num 10) '0'))
    (/= num 10)
    (int i 0)
    (while (!= num 0) (
        (incr i)
        (set8 int_digits i (+ (% num 10) '0'))
        (/= num 10)
        ))
    (while (>= i 0) (
        ([]=8 ptr idx (get8 int_digits i))
        (incr idx)
        (decr i)
        ))
    ([]=8 ptr idx 0)
    (return ptr)
    ))

(export prim_allocate_string)
(fun prim_allocate_string (n) (
    (void* p (allocate_pstruct @PLAIN_STRING (+ n 1)))
    (memset p 0 (+ n 1))
    (return p)
    ))

(export prim_strlen)
(fun prim_strlen (str) (
    (int len 0)
    (while (!= (*8 str) '\0') (
        (incr len)
        (incr str)
        ))
    (return len)
    ))

(export prim_streq)
(fun prim_streq (str1 str2) (
    (while (!= (*8 str1) '\0') (
        (if (!= (*8 str1) (*8 str2)) (
            (return @FALSE)
            ))
        (incr str1)
        (incr str2)
        ))
    (if (== (*8 str2) '\0')
        ((return @TRUE))
        ((return @FALSE))
        )
    ))

(export prim_strneq)
(fun prim_strneq (str1 str2 n) (
    (while (> n 0) (
        (if (== (*8 str1) '\0') (
            (return @FALSE)
            ))
        (if (!= (*8 str1) (*8 str2)) (
            (return @FALSE)
            ))
        (incr str1)
        (incr str2)
        (decr n)
        ))
    (return @TRUE)
    ))

(export prim_strcmp)
(fun prim_strcmp (str1 str2 n) (
    (while (!= (*8 str1) '\0') (
        (if (> (*8 str1) (*8 str2)) (
            (return 1)
            ))
        (if (< (*8 str1) (*8 str2)) (
            (return -1)
            ))
        (incr str1)
        (incr str2)
        ))
    (if (== (*8 str2) '\0')
        ((return 0))
        ((return -1))
        )
    ))

(export prim_strlcpy)
(fun prim_strlcpy (dst str len) (
    (for i 0 (- len 1) (
        ([]=8 dst 0 (*8 str))
        (if (== (*8 str) 0) ((return (+ i 1))))
        (incr dst)
        (incr str)
        ))
    ([]=8 dst 0 0)
    (return len)
    ))

(export prim_strdup)
(fun prim_strdup (str) (
    (int len (+ (prim_strlen str) 1))
    (void* new_str (allocate_pstruct @PLAIN_STRING len))
    (prim_strlcpy new_str str len)
    (return new_str)
    ))

(export prim_strldup)
(fun prim_strldup (str len) (
    (void* new_str (allocate_pstruct @PLAIN_STRING (+ len 1)))
    (prim_strlcpy new_str str len)
    (return new_str)
    ))

(export prim_strcat)
(fun prim_strcat (str1 str2) (
    (int len1 (prim_strlen str1))
    (int len2 (prim_strlen str2))
    (void* dst (allocate_pstruct @PLAIN_STRING (+ (+ len1 len2) 1)))
    (prim_strlcpy dst str1 (+ len1 1))
    (prim_strlcpy (+ dst len1) str2 (+ len2 1))
    (return dst)
    ))

(export prim_strlcat)
(fun prim_strlcat (dst src len) (
    (int len1 (prim_strlen dst))
    (int len2 (prim_strlen src))
    (if (> (+ (+ len1 len2) 1) len) (
        (= len2 (- (- len len1) 1))
        ))
    (prim_strlcpy (+ dst len1) src (+ len2 1))
    (return (+ len1 len2))
    ))

))

(vtable_push)
(compile vm-prim-code)
(vtable_pop)
