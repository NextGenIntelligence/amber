;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: rowl1-string.rlc 2014-02-15 22:24:53 nineties $
;

(import "rlvm-compile")
(import "rowl1-types")

(var ALPHA `('A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z'))
(var LOWER `('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z'))
(var UPPER `('A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z'))
(var ALNUM `('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z'))
(var WORD `('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '_' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z'))
(var XDIGIT `('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F' 'a' 'b' 'c' 'd' 'e' 'f'))
(var DIGIT `('0' '1' '2' '3' '4' '5' '6' '7' '8' '9'))
(var GRAPH `('!' '\"' '#' '$' '%' '&' '\'' '(' ')' '*' '+' ',' '-' '.' '/' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' ':' ';' '<' '=' '>' '?' '@' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '[' '\\' ']' '^' '_' '`' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' '{' '|' '}' '~'))
(var PUNCT `('!' '\"' '#' '$' '%' '&' ''' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '=' '>' '?' '@' '[' '\\' ']' '^' '_' '`' '{' '|' '}' '~'))
(var PRINT `(' ' '!' '\"' '#' '$' '%' '&' ''' '(' ')' '*' '+' ',' '-' '.' '/' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' ':' ';' '<' '=' '>' '?' '@' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '[' '\\' ']' '^' '_' '`' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' '{' '|' '}' '~'))
(var BLANK `('\t' ' '))
(var SPACE `('\t' '\n' '\v' '\f' '\r' ' '))
(var NEWLINE `('\n'))
(var CNTRL `('\0' 0x01 0x02 0x03 0x04 0x05 0x06 '\a' '\b' '\t' '\n' '\v' '\f' '\r' 0x0e 0x0f 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19 0x1a 0x1b 0x1c 0x1d 0x1e 0x1f 0x7f))
(var ASCII `('\0' 0x01 0x02 0x03 0x04 0x05 0x06 '\a' '\b' '\t' '\n' '\v' '\f' '\r' 0x0e 0x0f 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19 0x1a 0x1b 0x1c 0x1d 0x1e 0x1f ' ' '!' '\"' '#' '$' '%' '&' ''' '(' ')' '*' '+' ',' '-' '.' '/' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' ':' ';' '<' '=' '>' '?' '@' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '[' '\\' ']' '^' '_' '`' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' '{' '|' '}' '~' 0x7f))

(var CTYPE_ALPHA     0x0001)
(var CTYPE_LOWER     0x0002)
(var CTYPE_UPPER     0x0004)
(var CTYPE_ALNUM     0x0008)
(var CTYPE_WORD      0x0010)
(var CTYPE_DIGIT     0x0020)
(var CTYPE_XDIGIT    0x0040)
(var CTYPE_GRAPH     0x0080)
(var CTYPE_PUNCT     0x0100)
(var CTYPE_PRINT     0x0200)
(var CTYPE_BLANK     0x0400)
(var CTYPE_SPACE     0x0800)
(var CTYPE_NEWLINE   0x1000)
(var CTYPE_CNTRL     0x2000)
(var CTYPE_ASCII     0x4000)

(var CTYPE_CATEGORIES `(ALPHA LOWER UPPER ALNUM WORD DIGIT XDIGIT GRAPH PUNCT PRINT BLANK SPACE NEWLINE CNTRL ASCII))

; Convert characters to its code
(define c2i (c) (if (char? c) (char2int c) c))
(foreach cat CTYPE_CATEGORIES (do
    (eval `(= @cat `@(map c2i (eval cat))))
    ))

(define create_ctype_mask (c) (do
    (var mask 0)
    (foreach cat CTYPE_CATEGORIES (do
        (if (member? c (eval cat)) (do
            (= mask (| (eval (s++ CTYPE_ cat)) mask))
            ))
        ))
    mask
    ))

(var CTYPE_MASK_TABLE `())
(downto c 255 0 (do
    (push CTYPE_MASK_TABLE (create_ctype_mask c))
    ))

(compile `object `(

(import "rowl1-util")
(import "rowl1-node")
(import "rowl1-error")
(import "rowl1-compile")

(array ushort ascii_ctype_mask @CTYPE_MASK_TABLE)

(extern object current_loc)

(fun is_ctype (s mask) (
    (if (!= (strlen s) 1)
        (throw (invalid_argument current_loc
            (string "Not a character") s))
        )
    (var c (array_get char s 0))
    (if (& (array_get ushort ascii_ctype_mask c) mask)
        (return @C_TRUE)
        (return @C_FALSE)
        )
    ))

(export fun is_alpha (s)   ((return (is_ctype s @CTYPE_ALPHA))))
(export fun is_lower (s)   ((return (is_ctype s @CTYPE_LOWER))))
(export fun is_upper (s)   ((return (is_ctype s @CTYPE_UPPER))))
(export fun is_alnum (s)   ((return (is_ctype s @CTYPE_ALNUM))))
(export fun is_word (s)    ((return (is_ctype s @CTYPE_WORD))))
(export fun is_digit (s)   ((return (is_ctype s @CTYPE_DIGIT))))
(export fun is_xdigit (s)  ((return (is_ctype s @CTYPE_XDIGIT))))
(export fun is_graph (s)   ((return (is_ctype s @CTYPE_GRAPH))))
(export fun is_punct (s)   ((return (is_ctype s @CTYPE_PUNCT))))
(export fun is_print (s)   ((return (is_ctype s @CTYPE_PRINT))))
(export fun is_blank (s)   ((return (is_ctype s @CTYPE_BLANK))))
(export fun is_space (s)   ((return (is_ctype s @CTYPE_SPACE))))
(export fun is_newline (s) ((return (is_ctype s @CTYPE_NEWLINE))))
(export fun is_cntrl (s)   ((return (is_ctype s @CTYPE_CNTRL))))
(export fun is_ascii (s)   ((return (is_ctype s @CTYPE_ASCII))))

(export fun setup_encoding (mod) (
    (add_function1 mod (to_sym "is_alpha?") stringT is_alpha 0)
    (add_function1 mod (to_sym "is_lower?") stringT is_lower 0)
    (add_function1 mod (to_sym "is_upper?") stringT is_upper 0)
    (add_function1 mod (to_sym "is_alnum?") stringT is_alnum 0)
    (add_function1 mod (to_sym "is_word?") stringT is_word 0)
    (add_function1 mod (to_sym "is_digit?") stringT is_digit 0)
    (add_function1 mod (to_sym "is_xdigit?") stringT is_xdigit 0)
    (add_function1 mod (to_sym "is_graph?") stringT is_graph 0)
    (add_function1 mod (to_sym "is_punct?") stringT is_punct 0)
    (add_function1 mod (to_sym "is_print?") stringT is_print 0)
    (add_function1 mod (to_sym "is_blank?") stringT is_blank 0)
    (add_function1 mod (to_sym "is_space?") stringT is_space 0)
    (add_function1 mod (to_sym "is_newline?") stringT is_newline 0)
    (add_function1 mod (to_sym "is_cntrl?") stringT is_cntrl 0)
    (add_function1 mod (to_sym "is_ascii?") stringT is_ascii 0)
    ))

    ))
